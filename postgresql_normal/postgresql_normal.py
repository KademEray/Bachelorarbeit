import subprocess
import time
from pathlib import Path
import psycopg2

# ----------------------------- Konfiguration
IMAGE_NAME = "pg17-normal"               # Name des zu erstellenden Docker-Images
CONTAINER_NAME = "pg_test_normal"        # Eindeutiger Name f√ºr den Container
POSTGRES_PORT = 5432                     # Port, √ºber den PostgreSQL erreichbar ist
DOCKERFILE_DIR = Path("./")              # Pfad zum Verzeichnis mit dem Dockerfile
sql_file = Path("./setup_postgres_normal.sql")  # SQL-Skript mit der Strukturdefinition


# ----------------------------- Funktionen

def build_normal_postgres_image(DOCKERFILE_DIR: Path = DOCKERFILE_DIR):
    """
    Baut ein Docker-Image mit einem angepassten PostgreSQL-Setup.

    Das Image basiert auf dem in DOCKERFILE_DIR befindlichen Dockerfile
    und enth√§lt bereits die initiale Konfiguration (z.‚ÄØB. Tuning-Parameter).
    """
    print(f"üõ† Baue Image '{IMAGE_NAME}' aus {DOCKERFILE_DIR} ...")
    subprocess.run([
        "docker", "build", "-t", IMAGE_NAME, "."
    ], cwd=str(DOCKERFILE_DIR), check=True)
    print("‚úÖ Image erfolgreich gebaut.")


def start_normal_postgres_container():
    """
    Startet einen neuen PostgreSQL-Container auf Basis des zuvor erstellten Images.

    Der Container wird im Hintergrund ausgef√ºhrt und nach dem Stoppen automatisch gel√∂scht (--rm).
    Es werden Umgebungsvariablen f√ºr das Passwort und die Datenbank gesetzt.
    """
    print(f"üöÄ Starte Container '{CONTAINER_NAME}' aus Image '{IMAGE_NAME}' ...")
    subprocess.run([
        "docker", "run", "-d", "--rm",
        "--name", CONTAINER_NAME,
        "--shm-size", "10g",
        "-e", "POSTGRES_PASSWORD=pass",
        "-e", "POSTGRES_DB=testdb",
        "-p", f"{POSTGRES_PORT}:5432",
        IMAGE_NAME
    ], check=True)
    print("‚è≥ Warte auf Initialisierung...")
    time.sleep(15)
    print("‚úÖ Container l√§uft.")


def apply_normal_sql_structure(sql_file: Path = sql_file):
    """
    Spielt das Datenbankschema aus einer SQL-Datei in die laufende PostgreSQL-Datenbank ein.

    Die SQL-Datei enth√§lt typischerweise die Definitionen f√ºr Tabellen, Indizes und Constraints.
    Die Verbindung wird direkt zum lokal laufenden Container aufgebaut.
    """
    print(f"üìÑ Spiele SQL-Struktur aus {sql_file} ein...")

    try:
        with open(sql_file, "r", encoding="utf-8") as file:
            sql = file.read()

        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            user="postgres",
            password="pass",
            dbname="testdb"
        )
        with conn.cursor() as cur:
            cur.execute(sql)
        conn.commit()
        conn.close()
        print("‚úÖ Struktur erfolgreich eingespielt.")
    except Exception as e:
        print(f"‚ùå Fehler beim Einspielen der Struktur: {e}")
        return


def stop_normal_postgres_container():
    """
    Stoppt den laufenden PostgreSQL-Container und wartet auf dessen vollst√§ndige Entfernung.

    Diese Funktion ist hilfreich, um sicherzustellen, dass keine Altinstanzen beim Wiederaufbau st√∂ren.
    Es wird √ºberpr√ºft, ob der Container nach dem Stoppen tats√§chlich nicht mehr existiert.
    """
    print(f"üõë Versuche Container '{CONTAINER_NAME}' zu stoppen...")
    try:
        subprocess.run(["docker", "stop", CONTAINER_NAME], check=True)
        print("üßπ Container gestoppt. Warte auf vollst√§ndige Entfernung...")

        # Warte, bis Docker den Container intern wirklich entfernt hat
        for i in range(10):  # max. 10 Sekunden
            result = subprocess.run(["docker", "ps", "-a", "-q", "-f", f"name={CONTAINER_NAME}"],
                                    capture_output=True, text=True)
            if not result.stdout.strip():
                print("‚úÖ Container wurde vollst√§ndig entfernt.")
                return
            time.sleep(1)

        print("‚ö†Ô∏è  Container noch nicht entfernt nach Timeout.")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Container war nicht aktiv oder konnte nicht gestoppt werden.")
    except Exception as e:
        print(f"‚ùó Fehler beim Stoppen des Containers: {e}")


def delete_normal_postgres_image():
    """
    Entfernt das erstellte Docker-Image f√ºr PostgreSQL.

    Diese Funktion ist n√ºtzlich zur Bereinigung nach einem Testlauf oder vor dem erneuten Aufbau eines Images.
    """
    print(f"üóëÔ∏è  Versuche Image '{IMAGE_NAME}' zu l√∂schen...")
    try:
        subprocess.run(["docker", "rmi", IMAGE_NAME], check=True)
        print("‚úÖ Image gel√∂scht.")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Image konnte nicht gel√∂scht werden (evtl. Container l√§uft noch?).")
    except Exception as e:
        print(f"‚ùó Fehler beim L√∂schen des Images: {e}")

def main():
    """
    Hauptablauf zur Ausf√ºhrung der vorbereitenden Schritte:
    - Bauen des Docker-Images
    - Starten des Containers
    - Einspielen der Datenbankstruktur

    Kann durch weitere Schritte wie Datenimport oder Performance-Messungen erg√§nzt werden.
    """
    try:
        # 1) Setup
        build_normal_postgres_image()
        start_normal_postgres_container()
        apply_normal_sql_structure()

        # Hier kannst du weitere Schritte hinzuf√ºgen, z.B. Daten einf√ºgen oder Benchmarks durchf√ºhren

    except Exception as e:
        print(f"‚ùó Ein Fehler ist aufgetreten: {e}")


if __name__ == "__main__":
    main()