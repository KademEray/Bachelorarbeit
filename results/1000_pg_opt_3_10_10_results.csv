"db","mode","phase","concurrency","query_no","repeat","complexity","duration_ms","server_ms","qps","avg_cpu","avg_mem","disk_mb","statement","result"
"postgres","optimized","warmup",1,1,1,"simple","92.12","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,2,"simple","73.47","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,3,"simple","70.60","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,4,"simple","67.93","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,5,"simple","69.72","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,6,"simple","80.71","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,7,"simple","75.55","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,8,"simple","69.98","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,9,"simple","69.28","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,10,"simple","71.00","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,1,1,"simple","20.73","2.24","48.24","23.71","6701.21","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,2,"simple","19.73","2.20","50.68","242.79","6708.56","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,3,"simple","18.73","2.22","53.40","302.78","6712.87","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,4,"simple","18.46","2.21","54.16","19.65","6708.55","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,5,"simple","21.35","2.26","46.84","19.48","6708.47","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,6,"simple","20.57","2.25","48.61","17.36","6708.71","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,7,"simple","18.76","2.24","53.30","18.31","6708.59","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,8,"simple","21.37","2.22","46.80","19.39","6708.41","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,9,"simple","19.38","2.26","51.59","18.47","6708.68","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,1,10,"simple","21.87","2.31","45.72","16.43","6708.32","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",1,2,1,"simple","51.29","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,2,"simple","51.35","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,3,"simple","51.36","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,4,"simple","51.23","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,5,"simple","51.12","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,6,"simple","51.27","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,7,"simple","51.14","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,8,"simple","51.25","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,9,"simple","51.45","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,10,"simple","51.43","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,2,1,"simple","1.04","0.07","960.71","271.28","6708.07","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,2,"simple","1.02","0.07","980.10","284.97","6708.62","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,3,"simple","0.94","0.07","1058.20","296.58","6708.40","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,4,"simple","0.95","0.07","1052.30","291.91","6708.64","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,5,"simple","1.01","0.08","989.22","271.98","6708.24","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,6,"simple","0.95","0.07","1047.12","337.08","6708.36","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,7,"simple","0.96","0.07","1043.41","326.36","6708.57","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,8,"simple","1.02","0.07","978.19","264.88","6708.12","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,9,"simple","1.00","0.07","1004.72","270.97","6708.60","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,10,"simple","0.96","0.07","1044.50","284.26","6708.39","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",1,3,1,"simple","52.39","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,2,"simple","52.23","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,3,"simple","52.10","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,4,"simple","52.00","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,5,"simple","52.13","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,6,"simple","52.28","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,7,"simple","51.97","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,8,"simple","51.88","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,9,"simple","51.86","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,10,"simple","52.77","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,3,1,"simple","1.80","0.20","556.33","154.69","6708.55","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,2,"simple","1.83","0.19","546.54","148.78","6708.44","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,3,"simple","1.67","0.19","599.77","164.36","6708.65","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,4,"simple","1.76","0.19","569.35","153.74","6708.35","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,5,"simple","1.76","0.19","568.80","155.06","6708.57","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,6,"simple","1.73","0.19","579.61","159.75","6708.61","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,7,"simple","1.69","0.19","590.49","186.20","6708.60","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,8,"simple","1.73","0.19","578.74","155.08","6708.45","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,9,"simple","1.77","0.19","564.40","156.15","6708.35","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,10,"simple","1.78","0.19","562.43","154.82","6708.44","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Killerallee 55"", ""Hersbruck"", ""25821"", ""Deutschland"", true]}"
"postgres","optimized","warmup",1,4,1,"medium","56.02","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,2,"medium","53.64","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,3,"medium","53.52","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,4,"medium","53.59","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,5,"medium","53.92","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,6,"medium","53.76","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,7,"medium","53.86","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,8,"medium","53.93","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,9,"medium","53.83","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,10,"medium","53.74","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,4,1,"medium","3.51","0.47","285.24","80.07","6708.51","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,2,"medium","3.82","0.47","261.95","75.70","6708.64","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,3,"medium","3.42","0.45","292.65","83.23","6708.61","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,4,"medium","3.39","0.45","295.39","83.27","6708.73","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,5,"medium","3.64","0.45","274.63","80.92","6708.60","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,6,"medium","3.37","0.45","296.83","86.46","6708.51","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,7,"medium","3.10","0.45","322.87","89.44","6708.96","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,8,"medium","3.12","0.46","320.94","90.12","6708.67","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,9,"medium","3.32","0.45","301.41","83.44","6708.81","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",1,4,10,"medium","3.35","0.45","298.47","83.62","6708.34","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 17, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",1,5,1,"medium","124.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,2,"medium","69.24","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,3,"medium","68.38","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,4,"medium","70.29","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,5,"medium","69.36","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,6,"medium","69.74","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,7,"medium","69.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,8,"medium","69.78","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,9,"medium","69.91","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,10,"medium","69.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,5,1,"medium","19.72","17.64","50.71","21.60","6711.25","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,2,"medium","20.00","17.63","50.00","21.49","6711.41","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,3,"medium","19.40","17.31","51.56","21.14","6711.33","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,4,"medium","18.71","17.38","53.46","22.26","6711.53","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,5,"medium","18.98","17.29","52.69","21.58","6711.47","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,6,"medium","18.87","17.55","52.98","21.88","6711.70","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,7,"medium","19.13","18.54","52.26","21.77","6711.58","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,8,"medium","19.47","17.42","51.36","21.44","6711.34","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,9,"medium","19.09","17.24","52.38","21.85","6711.62","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",1,5,10,"medium","18.87","17.29","52.99","21.87","6711.62","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","warmup",1,6,1,"medium","51.81","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,2,"medium","51.35","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,3,"medium","51.22","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,4,"medium","51.18","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,5,"medium","51.27","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,6,"medium","51.08","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,7,"medium","51.12","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,8,"medium","51.12","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,9,"medium","51.43","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,10,"medium","51.54","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,6,1,"medium","1.05","0.10","956.11","259.68","6711.38","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,2,"medium","1.09","0.10","914.24","246.56","6711.50","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,3,"medium","1.03","0.10","971.25","268.32","6711.32","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,4,"medium","1.09","0.10","920.30","287.71","6711.33","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,5,"medium","1.03","0.10","967.31","259.68","6711.45","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,6,"medium","1.08","0.10","924.04","251.42","6711.48","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,7,"medium","1.07","0.10","938.44","251.08","6711.41","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,8,"medium","1.03","0.10","971.82","260.20","6711.70","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,9,"medium","1.13","0.10","883.16","252.66","6711.58","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",1,6,10,"medium","1.04","0.10","960.89","298.81","6711.57","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","warmup",1,7,1,"complex","57.45","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,2,"complex","52.72","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,3,"complex","52.45","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,4,"complex","52.70","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,5,"complex","52.72","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,6,"complex","52.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,7,"complex","52.47","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,8,"complex","52.24","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,9,"complex","52.67","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,10,"complex","52.62","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,7,1,"complex","2.18","0.80","457.73","127.96","6711.52","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,2,"complex","2.15","0.79","464.10","127.93","6711.49","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,3,"complex","2.19","0.80","455.93","145.44","6711.46","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,4,"complex","2.20","0.80","453.56","128.41","6711.78","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,5,"complex","2.16","0.78","462.41","127.34","6711.42","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,6,"complex","2.23","0.78","447.85","125.04","6711.86","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,7,"complex","2.14","0.82","467.09","127.87","6711.61","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,8,"complex","2.25","0.78","443.68","122.16","6711.42","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,9,"complex","2.16","0.80","462.02","129.64","6711.70","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",1,7,10,"complex","2.20","0.80","453.60","145.73","6711.56","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","warmup",1,8,1,"complex","54.73","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,2,"complex","52.68","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,3,"complex","52.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,4,"complex","52.55","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,5,"complex","52.73","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,6,"complex","52.67","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,7,"complex","52.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,8,"complex","52.75","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,9,"complex","52.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,10,"complex","52.28","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,8,1,"complex","2.27","1.19","440.55","123.03","6711.97","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,2,"complex","2.33","1.18","429.57","119.36","6711.96","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,3,"complex","2.45","1.14","408.48","113.38","6711.74","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,4,"complex","2.26","1.19","443.44","124.27","6711.80","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,5,"complex","2.37","1.17","422.14","119.49","6711.59","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,6,"complex","2.27","1.17","441.31","127.20","6711.88","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,7,"complex","2.19","1.16","457.50","125.26","6711.63","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,8,"complex","2.41","1.18","414.10","117.04","6711.60","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,9,"complex","2.22","1.19","449.64","147.09","6711.57","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,10,"complex","2.30","1.19","434.05","121.45","6711.71","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 55, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",1,9,1,"complex","53.95","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,2,"complex","52.03","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,3,"complex","51.85","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,4,"complex","52.05","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,5,"complex","51.66","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,6,"complex","52.10","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,7,"complex","51.95","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,8,"complex","51.84","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,9,"complex","52.04","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,10,"complex","51.95","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,9,1,"complex","1.60","0.58","623.09","197.44","6711.61","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,2,"complex","1.59","0.58","630.16","174.03","6711.75","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,3,"complex","1.58","0.55","630.95","171.47","6711.67","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,4,"complex","1.58","0.57","631.83","171.06","6711.73","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,5,"complex","1.57","0.55","637.84","173.11","6711.87","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,6,"complex","1.64","0.56","608.46","165.52","6711.38","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,7,"complex","1.60","0.55","623.79","172.49","6711.88","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,8,"complex","1.61","0.56","620.89","171.16","6712.03","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,9,"complex","1.63","0.56","613.23","165.33","6711.69","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","steady",1,9,10,"complex","1.68","0.56","596.59","164.67","6711.71","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 284, ""first"": [9, 1]}"
"postgres","optimized","warmup",1,10,1,"very_complex","58.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,2,"very_complex","53.26","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,3,"very_complex","53.23","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,4,"very_complex","53.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,5,"very_complex","53.54","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,6,"very_complex","53.02","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,7,"very_complex","53.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,8,"very_complex","53.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,9,"very_complex","53.11","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,10,"very_complex","53.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,10,1,"very_complex","2.88","1.96","347.16","101.33","6712.32","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,2,"very_complex","2.59","1.73","385.94","107.73","6712.56","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,3,"very_complex","2.65","1.72","377.84","105.35","6712.79","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,4,"very_complex","2.67","1.70","374.63","107.58","6712.69","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,5,"very_complex","2.58","1.69","387.73","109.43","6712.62","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,6,"very_complex","2.63","1.68","380.21","106.10","6712.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,7,"very_complex","2.57","1.68","389.76","109.16","6712.82","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,8,"very_complex","2.62","1.74","381.40","106.54","6712.58","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,9,"very_complex","2.58","1.83","387.61","110.33","6712.52","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,10,10,"very_complex","2.64","1.72","378.16","106.58","6712.68","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",1,11,1,"very_complex","55.16","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,2,"very_complex","54.94","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,3,"very_complex","55.20","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,4,"very_complex","54.94","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,5,"very_complex","55.02","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,6,"very_complex","55.19","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,7,"very_complex","55.33","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,8,"very_complex","54.93","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,9,"very_complex","54.93","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,10,"very_complex","55.25","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,11,1,"very_complex","4.77","4.63","209.71","63.59","6712.85","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,2,"very_complex","4.75","4.58","210.54","63.83","6712.96","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,3,"very_complex","4.85","4.58","206.04","62.81","6712.80","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,4,"very_complex","4.81","4.58","207.84","63.05","6712.93","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,5,"very_complex","4.72","4.47","211.99","63.72","6712.69","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,6,"very_complex","4.74","4.62","211.08","71.26","6712.63","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,7,"very_complex","4.68","4.52","213.84","64.21","6712.83","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,8,"very_complex","4.77","4.50","209.68","62.30","6712.60","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,9,"very_complex","4.91","4.61","203.62","62.75","6712.68","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",1,11,10,"very_complex","4.79","4.54","208.85","61.40","6712.75","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","warmup",1,12,1,"very_complex","52.61","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,2,"very_complex","52.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,3,"very_complex","52.80","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,4,"very_complex","52.82","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,5,"very_complex","52.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,6,"very_complex","52.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,7,"very_complex","52.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,8,"very_complex","52.82","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,9,"very_complex","53.04","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,10,"very_complex","52.72","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,12,1,"very_complex","2.58","1.70","387.66","109.66","6712.73","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,2,"very_complex","2.68","1.75","373.82","107.93","6712.66","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,3,"very_complex","2.65","1.74","377.94","107.10","6712.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,4,"very_complex","2.75","1.74","363.42","103.75","6712.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,5,"very_complex","2.69","1.79","371.43","105.75","6712.84","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,6,"very_complex","2.71","1.71","369.49","106.86","6712.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,7,"very_complex","2.65","1.70","377.53","109.75","6712.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,8,"very_complex","2.62","1.71","381.13","110.14","6712.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,9,"very_complex","2.64","1.70","378.36","108.23","6712.80","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",1,12,10,"very_complex","2.62","1.70","381.17","105.54","6712.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",1,13,1,"create","54.41","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,2,"create","59.79","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,3,"create","59.46","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,4,"create","52.28","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,5,"create","52.35","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,6,"create","53.59","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,7,"create","60.18","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,8,"create","59.20","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,9,"create","59.57","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,10,"create","59.14","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,13,1,"create","6.34","4.64","157.63","43.23","6712.73","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1362]}"
"postgres","optimized","steady",1,13,2,"create","2.25","0.10","444.44","120.76","6712.97","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1364]}"
"postgres","optimized","steady",1,13,3,"create","8.82","0.11","113.34","30.52","6712.88","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1366]}"
"postgres","optimized","steady",1,13,4,"create","3.01","0.11","332.04","102.98","6713.05","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1368]}"
"postgres","optimized","steady",1,13,5,"create","1.91","0.20","522.79","144.84","6712.84","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1370]}"
"postgres","optimized","steady",1,13,6,"create","8.90","0.10","112.38","29.94","6712.75","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1372]}"
"postgres","optimized","steady",1,13,7,"create","1.80","0.11","555.68","155.66","6712.65","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1374]}"
"postgres","optimized","steady",1,13,8,"create","1.89","0.12","527.73","145.06","6712.79","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1376]}"
"postgres","optimized","steady",1,13,9,"create","5.91","0.10","169.26","46.09","6712.91","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1378]}"
"postgres","optimized","steady",1,13,10,"create","1.78","0.10","560.48","185.48","6713.11","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1380]}"
"postgres","optimized","warmup",1,14,1,"create","52.43","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,2,"create","52.48","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,3,"create","52.31","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,4,"create","53.34","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,5,"create","52.40","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,6,"create","58.97","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,7,"create","52.49","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,8,"create","54.33","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,9,"create","52.15","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,10,"create","51.96","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,14,1,"create","1.88","0.10","533.02","143.39","6712.86","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2020]}"
"postgres","optimized","steady",1,14,2,"create","9.01","0.10","110.98","29.47","6712.98","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2022]}"
"postgres","optimized","steady",1,14,3,"create","1.75","0.10","572.08","157.00","6712.54","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2024]}"
"postgres","optimized","steady",1,14,4,"create","5.53","0.10","180.69","47.92","6713.05","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2026]}"
"postgres","optimized","steady",1,14,5,"create","1.85","0.10","539.87","146.37","6712.81","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2028]}"
"postgres","optimized","steady",1,14,6,"create","1.84","0.12","544.57","185.41","2222.47","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2030]}"
"postgres","optimized","steady",1,14,7,"create","1.73","0.10","578.17","207.97","1649.44","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2032]}"
"postgres","optimized","steady",1,14,8,"create","1.68","0.10","593.68","158.93","1649.65","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2034]}"
"postgres","optimized","steady",1,14,9,"create","8.93","0.14","111.95","43.02","1649.24","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2036]}"
"postgres","optimized","steady",1,14,10,"create","6.12","0.17","163.52","56.54","1651.44","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2038]}"
"postgres","optimized","warmup",1,15,1,"create","52.60","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,2,"create","52.23","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,3,"create","52.13","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,4,"create","52.05","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,5,"create","52.05","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,6,"create","52.23","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,7,"create","52.20","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,8,"create","51.94","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,9,"create","56.50","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,10,"create","52.00","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,15,1,"create","2.18","0.11","458.34","123.46","1653.03","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1499]}"
"postgres","optimized","steady",1,15,2,"create","1.76","0.12","567.76","174.30","1652.91","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1501]}"
"postgres","optimized","steady",1,15,3,"create","1.92","0.18","521.19","156.06","1653.43","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1503]}"
"postgres","optimized","steady",1,15,4,"create","1.84","0.69","542.48","182.40","1652.92","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1505]}"
"postgres","optimized","steady",1,15,5,"create","2.15","0.11","464.04","132.85","1653.25","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1507]}"
"postgres","optimized","steady",1,15,6,"create","1.76","0.11","566.67","155.61","1653.24","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1509]}"
"postgres","optimized","steady",1,15,7,"create","2.03","0.11","492.00","150.02","1653.18","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1511]}"
"postgres","optimized","steady",1,15,8,"create","1.67","0.14","600.42","162.92","1653.28","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1513]}"
"postgres","optimized","steady",1,15,9,"create","1.85","0.11","541.92","174.72","1653.65","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1515]}"
"postgres","optimized","steady",1,15,10,"create","1.97","0.13","507.28","143.49","1653.60","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1517]}"
"postgres","optimized","warmup",1,16,1,"create","52.77","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,2,"create","55.51","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,3,"create","52.23","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,4,"create","59.47","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,5,"create","56.17","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,6,"create","55.40","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,7,"create","59.43","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,8,"create","52.02","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,9,"create","59.27","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,10,"create","52.30","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,16,1,"create","1.75","0.11","572.34","178.54","1653.62","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10454]}"
"postgres","optimized","steady",1,16,2,"create","9.05","0.12","110.46","29.52","1653.75","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10456]}"
"postgres","optimized","steady",1,16,3,"create","1.76","0.13","566.86","155.92","1653.57","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10458]}"
"postgres","optimized","steady",1,16,4,"create","2.14","0.12","467.64","125.87","1653.43","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10460]}"
"postgres","optimized","steady",1,16,5,"create","1.81","0.11","551.45","148.63","1653.34","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10462]}"
"postgres","optimized","steady",1,16,6,"create","8.85","0.12","113.05","30.26","1653.45","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10464]}"
"postgres","optimized","steady",1,16,7,"create","9.25","0.13","108.06","28.83","1653.51","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10466]}"
"postgres","optimized","steady",1,16,8,"create","2.14","0.12","466.44","144.54","1653.43","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10468]}"
"postgres","optimized","steady",1,16,9,"create","9.20","0.13","108.72","29.06","1653.46","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10470]}"
"postgres","optimized","steady",1,16,10,"create","2.33","0.12","429.94","117.47","1653.70","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10472]}"
"postgres","optimized","warmup",1,17,1,"update","64.36","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,2,"update","51.99","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,3,"update","51.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,4,"update","52.11","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,5,"update","51.65","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,6,"update","52.31","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,7,"update","51.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,8,"update","51.97","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,9,"update","51.73","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,10,"update","51.82","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,17,1,"update","1.97","0.08","506.59","169.72","1674.05","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [11, 4]}"
"postgres","optimized","steady",1,17,2,"update","1.61","0.08","619.85","187.73","1678.07","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [12, 14]}"
"postgres","optimized","steady",1,17,3,"update","1.75","0.08","571.76","163.77","1682.43","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [13, 68]}"
"postgres","optimized","steady",1,17,4,"update","1.69","0.09","592.17","169.35","1686.73","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [14, 88]}"
"postgres","optimized","steady",1,17,5,"update","1.48","0.09","674.31","190.84","1690.96","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [15, 80]}"
"postgres","optimized","steady",1,17,6,"update","1.69","0.09","592.42","176.11","1695.43","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [16, 81]}"
"postgres","optimized","steady",1,17,7,"update","1.73","0.09","577.37","178.59","1700.14","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [17, 100]}"
"postgres","optimized","steady",1,17,8,"update","1.88","0.11","531.43","155.44","1704.92","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [18, 59]}"
"postgres","optimized","steady",1,17,9,"update","1.74","0.08","575.21","168.74","1709.85","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [19, 35]}"
"postgres","optimized","steady",1,17,10,"update","1.73","0.08","577.27","172.42","1714.24","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [20, 81]}"
"postgres","optimized","warmup",1,18,1,"update","52.15","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,2,"update","51.84","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,3,"update","52.15","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,4,"update","52.10","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,5,"update","51.91","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,6,"update","52.20","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,7,"update","51.67","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,8,"update","52.30","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,9,"update","51.70","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,10,"update","52.22","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,18,1,"update","1.73","0.10","579.47","165.95","1738.33","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [11, 2]}"
"postgres","optimized","steady",1,18,2,"update","1.64","0.10","611.21","193.48","1743.36","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [12, 3]}"
"postgres","optimized","steady",1,18,3,"update","1.68","0.10","594.64","178.10","1747.89","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [13, 2]}"
"postgres","optimized","steady",1,18,4,"update","1.87","0.11","534.79","150.55","1752.73","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [14, 1]}"
"postgres","optimized","steady",1,18,5,"update","1.50","0.10","666.84","188.02","1756.55","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [15, 3]}"
"postgres","optimized","steady",1,18,6,"update","2.63","0.10","380.26","107.98","1760.90","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [16, 2]}"
"postgres","optimized","steady",1,18,7,"update","1.52","0.10","658.07","183.10","1765.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [17, 2]}"
"postgres","optimized","steady",1,18,8,"update","1.71","0.10","586.48","169.47","1769.35","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [18, 3]}"
"postgres","optimized","steady",1,18,9,"update","1.68","0.10","593.89","173.26","1773.59","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [19, 3]}"
"postgres","optimized","steady",1,18,10,"update","1.72","0.10","581.87","166.49","1777.94","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [20, 4]}"
"postgres","optimized","warmup",1,19,1,"update","51.93","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,2,"update","52.21","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,3,"update","52.06","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,4,"update","51.95","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,5,"update","51.80","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,6,"update","51.93","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,7,"update","51.83","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,8,"update","51.96","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,9,"update","51.70","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,10,"update","51.86","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,19,1,"update","1.86","0.12","536.45","165.35","1799.56","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [11, 5]}"
"postgres","optimized","steady",1,19,2,"update","1.73","0.09","577.87","168.40","1804.06","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [12, 5]}"
"postgres","optimized","steady",1,19,3,"update","1.65","0.09","606.06","170.78","1808.21","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [13, 4]}"
"postgres","optimized","steady",1,19,4,"update","1.63","0.10","612.14","179.79","1812.80","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [14, 4]}"
"postgres","optimized","steady",1,19,5,"update","1.68","0.10","596.13","170.19","1816.67","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [15, 4]}"
"postgres","optimized","steady",1,19,6,"update","1.63","0.08","613.16","176.86","1820.87","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [16, 4]}"
"postgres","optimized","steady",1,19,7,"update","1.68","0.08","595.34","170.03","1824.81","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [17, 5]}"
"postgres","optimized","steady",1,19,8,"update","1.70","0.09","586.58","169.82","1829.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [18, 4]}"
"postgres","optimized","steady",1,19,9,"update","1.80","0.09","554.35","157.03","1833.19","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [19, 4]}"
"postgres","optimized","steady",1,19,10,"update","1.63","0.09","613.61","179.95","1837.39","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [20, 4]}"
"postgres","optimized","warmup",1,20,1,"update","52.09","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,2,"update","52.28","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,3,"update","51.97","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,4,"update","52.39","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,5,"update","54.82","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,6,"update","52.22","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,7,"update","51.85","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,8,"update","52.18","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,9,"update","52.31","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,10,"update","51.78","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,20,1,"update","1.76","0.12","568.02","164.06","1861.75","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [11, ""jradisch@example.net.tmp""]}"
"postgres","optimized","steady",1,20,2,"update","1.84","0.11","544.72","160.89","1866.58","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [12, ""falkoberger@example.com.tmp""]}"
"postgres","optimized","steady",1,20,3,"update","1.72","0.11","580.21","169.98","1871.45","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [13, ""zaenkermarek@example.com.tmp""]}"
"postgres","optimized","steady",1,20,4,"update","1.81","0.11","552.73","160.26","1875.96","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [14, ""wohlgemutgerolf@example.org.tmp""]}"
"postgres","optimized","steady",1,20,5,"update","1.71","0.14","585.65","203.10","1880.77","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [15, ""sagerbela@example.com.tmp""]}"
"postgres","optimized","steady",1,20,6,"update","1.76","0.12","567.57","168.16","1885.84","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [16, ""wesackjasmina@example.net.tmp""]}"
"postgres","optimized","steady",1,20,7,"update","1.78","0.11","561.32","165.18","1890.50","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [17, ""andrzejhenschel@example.net.tmp""]}"
"postgres","optimized","steady",1,20,8,"update","2.22","0.11","450.53","139.63","1895.33","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [18, ""paulinemoechlichen@example.com.tmp""]}"
"postgres","optimized","steady",1,20,9,"update","2.33","0.12","429.83","127.28","1899.79","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [19, ""arndhenschel@example.org.tmp""]}"
"postgres","optimized","steady",1,20,10,"update","2.18","0.11","459.71","141.27","1903.86","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [20, ""ubarth@example.org.tmp""]}"
"postgres","optimized","warmup",1,21,1,"delete","52.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,2,"delete","52.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,3,"delete","52.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,4,"delete","52.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,5,"delete","52.35","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,6,"delete","52.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,7,"delete","52.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,8,"delete","52.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,9,"delete","52.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,10,"delete","52.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,21,1,"delete","2.19","0.04","457.64","135.43","1925.39","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,21,2,"delete","1.79","0.04","560.07","166.53","1929.72","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,21,3,"delete","1.78","0.04","562.33","163.34","1933.72","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,21,4,"delete","1.62","0.04","616.83","180.82","1937.85","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,21,5,"delete","2.13","0.04","468.52","134.71","1941.93","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,21,6,"delete","2.25","0.04","444.17","124.63","1946.32","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,21,7,"delete","2.15","0.04","465.12","141.91","1950.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,21,8,"delete","1.63","0.04","614.89","187.36","1955.14","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,21,9,"delete","1.83","0.04","546.45","163.35","1959.37","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,21,10,"delete","2.23","0.04","448.03","131.17","1963.72","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,22,1,"delete","52.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,2,"delete","52.43","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,3,"delete","52.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,4,"delete","52.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,5,"delete","52.70","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,6,"delete","51.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,7,"delete","51.81","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,8,"delete","51.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,9,"delete","52.75","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,10,"delete","52.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,22,1,"delete","2.36","0.08","422.87","125.86","1985.37","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,22,2,"delete","1.73","0.08","579.41","175.69","1990.02","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,22,3,"delete","1.80","0.08","554.82","165.30","1994.82","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,22,4,"delete","2.22","0.08","451.28","159.39","1999.54","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,22,5,"delete","1.73","0.07","578.50","170.92","2005.11","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,22,6,"delete","2.35","0.08","425.50","129.32","2010.07","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,22,7,"delete","2.35","0.08","426.15","130.09","2015.06","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,22,8,"delete","1.73","0.07","577.30","170.78","2019.47","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,22,9,"delete","2.17","0.08","460.38","135.46","2024.22","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,22,10,"delete","2.36","0.08","423.07","142.26","2029.35","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,23,1,"delete","52.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,2,"delete","52.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,3,"delete","52.56","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,4,"delete","52.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,5,"delete","52.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,6,"delete","52.45","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,7,"delete","52.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,8,"delete","52.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,9,"delete","52.75","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,10,"delete","51.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,23,1,"delete","2.20","0.04","454.07","135.71","2053.30","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,23,2,"delete","2.16","0.04","463.31","133.02","2057.05","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,23,3,"delete","2.19","0.04","456.39","134.16","2061.49","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,23,4,"delete","1.81","0.04","551.66","159.30","2065.85","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,23,5,"delete","2.14","0.04","466.24","132.57","2070.28","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,23,6,"delete","2.14","0.04","468.14","135.58","2074.56","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,23,7,"delete","2.18","0.04","459.50","139.22","2078.56","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,23,8,"delete","1.79","0.04","559.57","159.10","2082.98","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,23,9,"delete","1.80","0.04","555.99","156.64","2087.19","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,23,10,"delete","1.74","0.04","573.26","166.46","2091.44","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,24,1,"delete","52.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,2,"delete","51.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,3,"delete","51.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,4,"delete","51.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,5,"delete","52.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,6,"delete","51.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,7,"delete","52.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,8,"delete","52.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,9,"delete","51.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,10,"delete","52.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,24,1,"delete","1.78","0.04","562.78","166.72","2113.30","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,24,2,"delete","1.77","0.04","563.98","167.64","2117.56","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,24,3,"delete","1.90","0.04","525.40","161.46","2122.14","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,24,4,"delete","1.76","0.04","569.48","161.93","2126.56","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,24,5,"delete","1.80","0.04","554.69","159.87","2130.63","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,24,6,"delete","2.13","0.04","469.53","141.60","2134.90","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,24,7,"delete","1.85","0.04","541.59","161.49","2139.75","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,24,8,"delete","1.74","0.04","573.33","165.52","2144.44","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,24,9,"delete","1.75","0.04","572.70","190.38","2149.12","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,24,10,"delete","1.71","0.04","586.13","168.95","2153.76","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",3,1,1,"simple","115.64","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,2,"simple","105.51","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,3,"simple","105.73","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,4,"simple","104.94","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,5,"simple","105.89","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,6,"simple","103.97","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,7,"simple","103.05","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,8,"simple","100.31","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,9,"simple","105.68","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,10,"simple","104.53","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,1,1,"simple","52.42","2.23","57.23","12.67","2179.34","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,2,"simple","53.00","2.23","56.60","13.13","2184.36","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,3,"simple","53.06","2.22","56.54","12.42","2188.86","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,4,"simple","55.82","2.23","53.74","12.12","2193.65","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,5,"simple","53.18","2.22","56.42","11.98","2197.98","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,6,"simple","52.39","2.22","57.27","12.05","2202.28","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,7,"simple","50.65","2.22","59.23","12.70","2206.59","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,8,"simple","53.98","2.23","55.58","12.10","2210.81","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,9,"simple","53.13","2.22","56.47","12.13","2215.44","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,1,10,"simple","53.44","1.96","56.14","12.35","2219.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",3,2,1,"simple","72.62","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,2,"simple","74.25","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,3,"simple","72.00","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,4,"simple","73.87","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,5,"simple","72.00","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,6,"simple","74.80","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,7,"simple","74.55","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,8,"simple","71.99","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,9,"simple","74.01","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,10,"simple","75.04","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,2,1,"simple","24.73","0.07","121.31","16.15","2242.14","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,2,"simple","21.51","0.07","139.48","18.74","2246.63","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,3,"simple","23.15","0.07","129.62","17.58","2250.93","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,4,"simple","22.60","0.07","132.73","18.73","2255.77","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,5,"simple","21.80","0.07","137.64","21.29","2260.40","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,6,"simple","24.18","0.07","124.08","17.39","2265.03","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,7,"simple","21.56","0.07","139.12","21.51","2269.28","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,8,"simple","22.37","0.07","134.10","22.14","2274.11","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,9,"simple","23.71","0.07","126.50","20.42","2278.53","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,10,"simple","24.39","0.07","123.01","19.21","2283.79","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",3,3,1,"simple","75.23","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,2,"simple","74.21","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,3,"simple","75.53","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,4,"simple","73.50","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,5,"simple","75.43","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,6,"simple","73.16","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,7,"simple","75.26","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,8,"simple","74.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,9,"simple","72.95","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,10,"simple","75.15","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,3,1,"simple","23.58","0.20","127.25","17.86","2308.77","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,2,"simple","23.11","0.19","129.79","18.54","2313.41","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,3,"simple","23.13","0.19","129.69","18.75","2318.31","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,4,"simple","24.10","0.21","124.51","18.08","2323.02","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,5,"simple","43.28","0.21","69.31","9.92","2328.08","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,6,"simple","23.36","0.21","128.43","18.08","2332.71","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,7,"simple","22.60","0.21","132.74","18.63","2337.70","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,8,"simple","23.47","0.19","127.85","18.16","2342.02","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,9,"simple","23.06","0.19","130.11","17.96","2346.14","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","steady",3,3,10,"simple","22.01","0.19","136.33","18.85","2350.62","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Kerstin-Weinhage-Allee 12"", ""Hannover"", ""93676"", ""Deutschland"", true]}"
"postgres","optimized","warmup",3,4,1,"medium","77.37","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,2,"medium","77.28","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,3,"medium","96.25","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,4,"medium","77.59","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,5,"medium","76.05","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,6,"medium","75.79","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,7,"medium","76.80","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,8,"medium","77.35","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,9,"medium","75.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,10,"medium","75.93","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,4,1,"medium","26.30","0.46","114.08","17.63","2372.63","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,2,"medium","26.94","0.45","111.37","17.74","2377.11","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,3,"medium","25.84","0.45","116.09","17.74","2381.37","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,4,"medium","25.97","0.51","115.53","18.91","2385.53","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,5,"medium","27.31","0.46","109.84","16.90","2389.73","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,6,"medium","26.68","0.45","112.44","16.92","2394.25","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,7,"medium","28.65","0.46","104.71","16.27","2398.65","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,8,"medium","25.65","0.45","116.96","16.83","2402.88","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,9,"medium","25.08","0.46","119.64","17.32","2407.21","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",3,4,10,"medium","25.80","0.45","116.26","17.21","2411.57","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",3,5,1,"medium","112.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,2,"medium","110.10","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,3,"medium","111.65","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,4,"medium","117.02","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,5,"medium","108.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,6,"medium","111.09","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,7,"medium","111.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,8,"medium","110.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,9,"medium","112.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,10,"medium","111.56","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,5,1,"medium","61.16","18.03","49.05","21.66","2435.32","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,2,"medium","60.10","17.57","49.92","22.25","2439.94","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,3,"medium","61.00","17.85","49.18","21.37","2444.89","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,4,"medium","62.65","18.61","47.89","21.84","2450.15","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,5,"medium","59.30","17.79","50.59","21.92","2454.76","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,6,"medium","61.95","17.58","48.43","21.08","2459.79","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,7,"medium","64.78","18.32","46.31","20.57","2464.72","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,8,"medium","67.44","17.59","44.48","19.48","2469.78","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,9,"medium","67.54","17.72","44.42","19.55","2474.73","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",3,5,10,"medium","65.69","17.91","45.67","20.37","2479.90","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","warmup",3,6,1,"medium","71.70","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,2,"medium","74.47","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,3,"medium","74.54","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,4,"medium","73.82","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,5,"medium","81.11","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,6,"medium","92.25","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,7,"medium","78.47","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,8,"medium","76.15","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,9,"medium","72.73","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,10,"medium","75.23","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,6,1,"medium","26.04","0.15","115.19","19.73","2502.98","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,2,"medium","23.58","0.09","127.24","20.24","2507.37","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,3,"medium","22.29","0.09","134.59","19.09","2511.45","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,4,"medium","22.43","0.09","133.75","18.91","2515.57","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,5,"medium","25.18","0.09","119.14","17.69","2519.91","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,6,"medium","22.54","0.09","133.12","19.01","2524.06","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,7,"medium","27.91","0.09","107.50","18.59","1656.81","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,8,"medium","24.98","0.09","120.11","19.11","1662.98","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,9,"medium","23.84","0.09","125.82","18.52","1667.48","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",3,6,10,"medium","22.93","0.09","130.83","18.40","1672.36","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","warmup",3,7,1,"complex","77.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,2,"complex","76.34","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,3,"complex","76.79","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,4,"complex","76.58","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,5,"complex","76.28","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,6,"complex","73.84","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,7,"complex","77.65","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,8,"complex","77.53","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,9,"complex","76.15","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,10,"complex","75.56","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,7,1,"complex","24.40","0.85","122.95","19.12","1695.17","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,2,"complex","25.81","0.80","116.24","18.21","1699.84","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,3,"complex","24.85","0.74","120.73","18.69","1704.41","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,4,"complex","25.30","0.78","118.58","18.99","1709.44","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,5,"complex","25.74","0.79","116.54","18.90","1714.08","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,6,"complex","23.98","0.78","125.12","19.76","1719.33","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,7,"complex","24.19","0.84","124.02","18.80","1724.45","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,8,"complex","26.12","0.82","114.84","17.76","1729.21","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,9,"complex","24.78","0.78","121.06","18.97","1733.94","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",3,7,10,"complex","23.65","0.78","126.84","19.30","1739.24","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","warmup",3,8,1,"complex","80.89","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,2,"complex","79.06","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,3,"complex","78.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,4,"complex","78.42","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,5,"complex","79.52","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,6,"complex","78.23","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,7,"complex","79.65","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,8,"complex","78.33","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,9,"complex","78.56","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,10,"complex","78.24","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,8,1,"complex","25.37","1.10","118.26","20.56","1762.92","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,2,"complex","25.61","1.09","117.16","20.44","1767.37","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,3,"complex","26.40","1.10","113.65","20.03","1771.72","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,4,"complex","26.25","1.09","114.28","19.57","1776.27","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,5,"complex","28.25","1.06","106.18","19.33","1780.23","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,6,"complex","28.15","1.06","106.57","19.22","1784.44","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,7,"complex","26.77","1.07","112.06","20.07","1788.96","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,8,"complex","25.72","1.16","116.65","20.10","1793.70","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,9,"complex","25.85","1.11","116.06","19.41","1797.55","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,10,"complex","25.74","1.13","116.53","19.25","1802.01","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 52, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",3,9,1,"complex","75.03","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,2,"complex","74.46","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,3,"complex","77.40","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,4,"complex","72.68","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,5,"complex","75.89","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,6,"complex","75.55","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,7,"complex","75.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,8,"complex","75.62","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,9,"complex","75.42","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,10,"complex","75.38","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,9,1,"complex","22.52","0.60","133.22","19.72","1823.74","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,2,"complex","22.55","0.60","133.03","20.10","1828.21","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,3,"complex","22.80","0.57","131.56","19.81","1832.66","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,4,"complex","23.12","0.57","129.74","19.64","1836.79","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,5,"complex","23.23","0.57","129.14","21.36","1841.27","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,6,"complex","23.84","0.56","125.85","18.54","1845.58","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,7,"complex","23.84","0.58","125.84","20.01","1850.28","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,8,"complex","23.48","0.56","127.75","19.62","1854.95","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,9,"complex","25.72","0.57","116.66","17.13","1859.83","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,10,"complex","25.56","0.58","117.36","17.69","1864.99","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 285, ""first"": [1, 20]}"
"postgres","optimized","warmup",3,10,1,"very_complex","77.99","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,2,"very_complex","75.17","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,3,"very_complex","83.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,4,"very_complex","78.18","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,5,"very_complex","78.53","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,6,"very_complex","76.86","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,7,"very_complex","77.37","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,8,"very_complex","77.25","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,9,"very_complex","75.88","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,10,"very_complex","77.40","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,10,1,"very_complex","26.97","1.91","111.22","17.86","1890.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,2,"very_complex","25.70","1.76","116.71","18.54","1895.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,3,"very_complex","25.99","1.73","115.45","20.40","1899.68","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,4,"very_complex","26.37","1.74","113.77","18.39","1904.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,5,"very_complex","25.20","1.76","119.05","18.99","1908.65","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,6,"very_complex","26.16","1.72","114.66","18.36","1913.31","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,7,"very_complex","24.88","1.75","120.59","20.04","1917.77","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,8,"very_complex","26.12","1.73","114.86","18.91","1921.73","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,9,"very_complex","24.69","1.72","121.51","19.88","1926.42","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,10,10,"very_complex","27.20","1.70","110.28","17.35","1930.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",3,11,1,"very_complex","75.93","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,2,"very_complex","79.61","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,3,"very_complex","77.96","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,4,"very_complex","79.75","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,5,"very_complex","78.71","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,6,"very_complex","79.06","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,7,"very_complex","79.85","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,8,"very_complex","78.82","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,9,"very_complex","78.54","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,10,"very_complex","80.26","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,11,1,"very_complex","28.91","4.58","103.78","18.24","1952.77","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,2,"very_complex","26.86","4.54","111.68","19.25","1956.80","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,3,"very_complex","26.09","4.55","114.99","19.87","1961.10","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,4,"very_complex","36.01","4.58","83.30","14.61","1965.59","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,5,"very_complex","25.93","4.53","115.71","19.97","1969.55","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,6,"very_complex","32.45","4.58","92.45","16.07","1974.60","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,7,"very_complex","30.12","4.72","99.60","17.30","1978.98","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,8,"very_complex","26.52","4.84","113.12","19.85","1983.75","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,9,"very_complex","27.98","4.54","107.22","17.41","1984.96","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",3,11,10,"very_complex","27.42","4.54","109.40","17.57","1985.18","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","warmup",3,12,1,"very_complex","77.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,2,"very_complex","76.75","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,3,"very_complex","78.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,4,"very_complex","78.33","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,5,"very_complex","75.68","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,6,"very_complex","77.40","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,7,"very_complex","75.36","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,8,"very_complex","76.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,9,"very_complex","75.41","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,10,"very_complex","78.31","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,12,1,"very_complex","25.60","1.85","117.21","17.09","1985.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,2,"very_complex","25.29","1.77","118.63","17.78","1985.33","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,3,"very_complex","27.07","1.72","110.81","15.97","1985.12","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,4,"very_complex","24.65","1.73","121.72","17.78","1985.30","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,5,"very_complex","25.96","1.80","115.56","17.17","1985.37","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,6,"very_complex","26.01","1.71","115.35","17.20","1985.29","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,7,"very_complex","27.39","1.78","109.53","16.45","1985.28","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,8,"very_complex","26.12","1.71","114.86","17.16","1985.17","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,9,"very_complex","23.99","1.71","125.07","18.62","1985.21","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",3,12,10,"very_complex","25.11","1.81","119.46","17.71","1985.08","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",3,13,1,"create","72.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,2,"create","75.31","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,3,"create","75.21","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,4,"create","75.09","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,5,"create","75.16","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,6,"create","74.83","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,7,"create","75.38","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,8,"create","75.51","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,9,"create","72.64","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,10,"create","75.23","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,13,1,"create","25.40","0.14","118.13","15.22","1985.34","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1412]}"
"postgres","optimized","steady",3,13,2,"create","22.45","0.10","133.62","17.08","1985.10","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1416]}"
"postgres","optimized","steady",3,13,3,"create","22.72","0.10","132.02","17.00","1985.56","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1420]}"
"postgres","optimized","steady",3,13,4,"create","22.65","0.12","132.45","17.04","1985.10","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1424]}"
"postgres","optimized","steady",3,13,5,"create","22.26","0.11","134.76","17.08","1985.29","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1428]}"
"postgres","optimized","steady",3,13,6,"create","23.73","0.12","126.41","16.40","1985.45","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1432]}"
"postgres","optimized","steady",3,13,7,"create","23.54","0.10","127.42","18.63","1985.35","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1436]}"
"postgres","optimized","steady",3,13,8,"create","23.41","0.13","128.17","16.26","1985.41","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1440]}"
"postgres","optimized","steady",3,13,9,"create","22.63","0.10","132.57","16.85","1985.27","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1444]}"
"postgres","optimized","steady",3,13,10,"create","23.92","0.11","125.41","39.90","1985.63","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1448]}"
"postgres","optimized","warmup",3,14,1,"create","75.20","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,2,"create","75.15","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,3,"create","86.89","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,4,"create","72.54","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,5,"create","75.51","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,6,"create","75.33","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,7,"create","74.29","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,8,"create","75.23","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,9,"create","72.76","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,10,"create","75.30","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,14,1,"create","22.94","0.10","130.80","17.16","1985.61","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2070]}"
"postgres","optimized","steady",3,14,2,"create","25.14","0.10","119.33","15.73","1985.94","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2074]}"
"postgres","optimized","steady",3,14,3,"create","25.76","0.10","116.46","15.20","1986.14","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2078]}"
"postgres","optimized","steady",3,14,4,"create","24.00","0.10","124.98","16.24","1985.92","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2082]}"
"postgres","optimized","steady",3,14,5,"create","24.19","0.10","124.01","16.06","1986.07","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2086]}"
"postgres","optimized","steady",3,14,6,"create","24.85","0.10","120.73","17.75","1985.86","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2090]}"
"postgres","optimized","steady",3,14,7,"create","23.46","0.10","127.88","16.62","1986.01","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2094]}"
"postgres","optimized","steady",3,14,8,"create","24.86","0.10","120.66","15.88","1986.25","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2098]}"
"postgres","optimized","steady",3,14,9,"create","22.90","0.10","131.01","17.13","1985.79","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2102]}"
"postgres","optimized","steady",3,14,10,"create","25.42","0.10","118.00","15.37","1985.87","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2106]}"
"postgres","optimized","warmup",3,15,1,"create","74.95","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,2,"create","75.73","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,3,"create","73.95","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,4,"create","75.72","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,5,"create","76.02","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,6,"create","75.02","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,7,"create","75.68","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,8,"create","77.06","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,9,"create","74.80","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,10,"create","75.96","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,15,1,"create","23.86","0.12","125.74","16.57","1986.27","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1549]}"
"postgres","optimized","steady",3,15,2,"create","23.99","0.11","125.07","16.39","1985.96","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1553]}"
"postgres","optimized","steady",3,15,3,"create","23.35","0.13","128.47","16.78","1986.07","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1557]}"
"postgres","optimized","steady",3,15,4,"create","22.59","0.11","132.79","17.26","1985.92","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1561]}"
"postgres","optimized","steady",3,15,5,"create","22.87","0.20","131.20","19.27","1986.19","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1565]}"
"postgres","optimized","steady",3,15,6,"create","22.53","0.11","133.16","17.11","1986.05","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1569]}"
"postgres","optimized","steady",3,15,7,"create","22.81","0.12","131.54","17.40","1986.25","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1573]}"
"postgres","optimized","steady",3,15,8,"create","24.74","0.11","121.25","18.69","1985.96","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1577]}"
"postgres","optimized","steady",3,15,9,"create","22.49","0.31","133.42","17.36","1986.26","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1581]}"
"postgres","optimized","steady",3,15,10,"create","24.25","0.11","123.72","16.28","1986.14","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1585]}"
"postgres","optimized","warmup",3,16,1,"create","76.14","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,2,"create","75.51","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,3,"create","76.00","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,4,"create","75.49","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,5,"create","75.87","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,6,"create","75.72","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,7,"create","77.23","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,8,"create","75.60","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,9,"create","75.86","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,10,"create","75.54","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,16,1,"create","23.69","0.12","126.65","16.69","1986.23","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10504]}"
"postgres","optimized","steady",3,16,2,"create","22.72","0.12","132.06","17.25","1986.12","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10508]}"
"postgres","optimized","steady",3,16,3,"create","25.32","0.12","118.48","15.16","1986.38","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10512]}"
"postgres","optimized","steady",3,16,4,"create","23.04","0.14","130.21","17.23","1986.02","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10516]}"
"postgres","optimized","steady",3,16,5,"create","23.46","0.12","127.86","17.06","1985.99","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10520]}"
"postgres","optimized","steady",3,16,6,"create","26.17","0.12","114.61","15.74","1986.36","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10524]}"
"postgres","optimized","steady",3,16,7,"create","25.67","0.12","116.85","15.33","1986.50","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10528]}"
"postgres","optimized","steady",3,16,8,"create","23.14","0.12","129.63","17.08","1986.23","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10532]}"
"postgres","optimized","steady",3,16,9,"create","22.94","0.16","130.77","17.30","1986.39","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10536]}"
"postgres","optimized","steady",3,16,10,"create","22.82","0.12","131.44","17.54","1986.34","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10540]}"
"postgres","optimized","warmup",3,17,1,"update","73.46","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,2,"update","73.22","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,3,"update","75.09","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,4,"update","74.82","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,5,"update","74.87","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,6,"update","74.65","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,7,"update","75.76","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,8,"update","74.82","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,9,"update","75.62","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,10,"update","73.39","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,17,1,"update","23.46","0.11","127.90","16.56","1986.45","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 48]}"
"postgres","optimized","steady",3,17,2,"update","22.72","0.08","132.05","17.10","1986.29","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 51]}"
"postgres","optimized","steady",3,17,3,"update","24.81","0.08","120.90","15.31","1986.41","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 54]}"
"postgres","optimized","steady",3,17,4,"update","23.17","0.08","129.46","16.42","1986.31","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 57]}"
"postgres","optimized","steady",3,17,5,"update","23.44","0.08","127.98","16.16","1986.18","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 60]}"
"postgres","optimized","steady",3,17,6,"update","22.09","0.12","135.84","17.21","1986.43","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 63]}"
"postgres","optimized","steady",3,17,7,"update","24.18","0.08","124.09","15.57","1986.52","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 66]}"
"postgres","optimized","steady",3,17,8,"update","23.96","0.08","125.21","15.98","1986.19","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 69]}"
"postgres","optimized","steady",3,17,9,"update","23.01","0.08","130.35","19.66","1986.41","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 72]}"
"postgres","optimized","steady",3,17,10,"update","22.18","0.08","135.27","17.16","1986.36","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 75]}"
"postgres","optimized","warmup",3,18,1,"update","75.20","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,2,"update","75.74","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,3,"update","73.25","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,4,"update","72.23","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,5,"update","75.14","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,6,"update","74.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,7,"update","72.89","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,8,"update","71.95","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,9,"update","72.60","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,10,"update","75.09","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,18,1,"update","23.43","0.08","128.02","16.64","1986.36","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [51, 4]}"
"postgres","optimized","steady",3,18,2,"update","22.66","0.12","132.38","16.85","1986.27","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [54, 1]}"
"postgres","optimized","steady",3,18,3,"update","22.84","0.10","131.33","16.84","1986.44","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [57, 2]}"
"postgres","optimized","steady",3,18,4,"update","24.18","0.08","124.06","15.94","1986.59","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [60, 4]}"
"postgres","optimized","steady",3,18,5,"update","22.66","0.10","132.38","16.89","1986.43","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [63, 1]}"
"postgres","optimized","steady",3,18,6,"update","22.37","0.10","134.12","16.66","1986.54","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [66, 4]}"
"postgres","optimized","steady",3,18,7,"update","23.41","0.10","128.16","16.49","1986.58","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [69, 2]}"
"postgres","optimized","steady",3,18,8,"update","24.02","0.10","124.90","17.72","1986.28","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [72, 1]}"
"postgres","optimized","steady",3,18,9,"update","22.41","0.09","133.86","16.96","1986.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [75, 1]}"
"postgres","optimized","steady",3,18,10,"update","25.51","0.10","117.59","15.15","1986.50","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [78, 1]}"
"postgres","optimized","warmup",3,19,1,"update","77.99","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,2,"update","73.40","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,3,"update","75.46","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,4,"update","74.43","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,5,"update","75.00","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,6,"update","75.53","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,7,"update","75.36","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,8,"update","75.02","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,9,"update","75.40","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,10,"update","75.28","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,19,1,"update","23.46","0.10","127.89","16.60","1986.25","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [51, 4]}"
"postgres","optimized","steady",3,19,2,"update","25.19","0.09","119.11","15.05","1986.32","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [54, 4]}"
"postgres","optimized","steady",3,19,3,"update","24.13","0.09","124.32","16.06","1986.47","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [57, 5]}"
"postgres","optimized","steady",3,19,4,"update","22.79","0.09","131.66","16.84","1986.29","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [60, 4]}"
"postgres","optimized","steady",3,19,5,"update","23.82","0.09","125.94","16.07","1986.49","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [63, 5]}"
"postgres","optimized","steady",3,19,6,"update","25.21","0.09","119.01","15.32","1986.77","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [66, 4]}"
"postgres","optimized","steady",3,19,7,"update","22.91","0.09","130.93","16.44","1986.28","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [69, 5]}"
"postgres","optimized","steady",3,19,8,"update","22.30","0.09","134.51","16.67","1986.17","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [72, 5]}"
"postgres","optimized","steady",3,19,9,"update","24.65","0.09","121.70","15.71","1986.35","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [75, 5]}"
"postgres","optimized","steady",3,19,10,"update","22.02","0.09","136.27","16.96","1986.40","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [78, 5]}"
"postgres","optimized","warmup",3,20,1,"update","72.99","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,2,"update","75.36","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,3,"update","73.18","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,4,"update","75.76","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,5,"update","73.80","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,6,"update","73.29","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,7,"update","74.73","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,8,"update","75.38","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,9,"update","73.96","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,10,"update","75.58","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,20,1,"update","23.33","0.12","128.61","16.76","1986.56","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [51, ""uwieloch@example.org.tmp""]}"
"postgres","optimized","steady",3,20,2,"update","23.70","0.11","126.59","16.53","1986.33","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [54, ""drubhelene@example.net.tmp""]}"
"postgres","optimized","steady",3,20,3,"update","22.91","0.12","130.97","17.04","1986.48","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [57, ""hans-heinrich60@example.net.tmp""]}"
"postgres","optimized","steady",3,20,4,"update","23.85","0.12","125.78","16.48","1986.65","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [60, ""marlensuessebier@example.com.tmp""]}"
"postgres","optimized","steady",3,20,5,"update","23.10","0.11","129.86","16.95","1986.49","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [63, ""klaus-dieter30@example.org.tmp""]}"
"postgres","optimized","steady",3,20,6,"update","22.49","0.15","133.37","17.37","1986.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [66, ""putzgero@example.net.tmp""]}"
"postgres","optimized","steady",3,20,7,"update","22.47","0.12","133.51","17.25","1986.60","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [69, ""vjuettner@example.net.tmp""]}"
"postgres","optimized","steady",3,20,8,"update","22.39","0.11","133.97","17.23","1986.45","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [72, ""dariuswagenknecht@example.org.tmp""]}"
"postgres","optimized","steady",3,20,9,"update","25.52","0.11","117.56","15.18","1986.59","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""rtrupp@example.net.tmp""]}"
"postgres","optimized","steady",3,20,10,"update","24.26","0.12","123.67","15.90","1986.83","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [78, ""gilberthoefig@example.org.tmp""]}"
"postgres","optimized","warmup",3,21,1,"delete","75.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,2,"delete","75.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,3,"delete","74.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,4,"delete","75.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,5,"delete","74.22","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,6,"delete","75.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,7,"delete","75.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,8,"delete","75.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,9,"delete","72.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,10,"delete","75.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,21,1,"delete","22.79","0.04","131.66","17.10","1986.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,21,2,"delete","23.13","0.04","129.71","16.86","1986.72","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,21,3,"delete","23.67","0.04","126.77","16.17","1986.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,21,4,"delete","23.06","0.05","130.08","16.87","1986.79","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,21,5,"delete","22.52","0.04","133.23","17.03","1986.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,21,6,"delete","25.09","0.04","119.59","15.46","1986.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,21,7,"delete","24.42","0.04","122.83","15.76","1986.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,21,8,"delete","25.09","0.04","119.57","15.05","1986.56","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,21,9,"delete","23.43","0.04","128.03","16.15","1986.63","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,21,10,"delete","23.73","0.05","126.40","16.38","1986.81","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,22,1,"delete","72.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,2,"delete","75.00","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,3,"delete","74.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,4,"delete","75.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,5,"delete","75.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,6,"delete","73.99","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,7,"delete","74.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,8,"delete","72.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,9,"delete","75.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,10,"delete","73.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,22,1,"delete","22.99","0.07","130.50","16.57","1986.66","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,22,2,"delete","23.69","0.07","126.62","16.34","1986.27","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,22,3,"delete","22.29","0.07","134.57","16.98","1986.64","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,22,4,"delete","23.83","0.08","125.91","15.70","1986.83","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,22,5,"delete","22.29","0.07","134.62","17.02","1986.74","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,22,6,"delete","23.53","0.07","127.50","16.25","1986.64","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,22,7,"delete","22.38","0.15","134.04","16.98","1986.48","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,22,8,"delete","22.14","0.07","135.49","17.13","1986.95","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,22,9,"delete","22.89","0.07","131.08","16.73","1986.65","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,22,10,"delete","25.11","0.07","119.49","17.25","1986.85","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,23,1,"delete","75.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,2,"delete","75.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,3,"delete","75.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,4,"delete","72.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,5,"delete","87.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,6,"delete","72.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,7,"delete","75.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,8,"delete","75.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,9,"delete","75.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,10,"delete","72.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,23,1,"delete","22.03","0.06","136.17","17.45","1986.89","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,23,2,"delete","24.01","0.04","124.95","15.94","1986.82","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,23,3,"delete","25.08","0.04","119.64","15.13","1986.82","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,23,4,"delete","25.20","0.04","119.04","15.15","1986.59","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,23,5,"delete","22.75","0.05","131.86","17.03","1986.70","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,23,6,"delete","23.52","0.04","127.55","16.76","1986.66","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,23,7,"delete","23.28","0.04","128.85","16.61","1986.62","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,23,8,"delete","22.80","0.04","131.57","16.79","1986.84","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,23,9,"delete","22.55","0.04","133.02","18.89","1986.69","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,23,10,"delete","24.21","0.04","123.92","16.20","1986.44","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,24,1,"delete","75.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,2,"delete","75.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,3,"delete","74.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,4,"delete","73.21","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,5,"delete","75.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,6,"delete","75.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,7,"delete","74.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,8,"delete","73.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,9,"delete","75.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,10,"delete","74.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,24,1,"delete","22.53","0.04","133.18","18.67","1986.36","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,24,2,"delete","22.22","0.04","135.01","16.96","1986.68","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,24,3,"delete","23.91","0.05","125.45","16.04","1987.19","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,24,4,"delete","23.91","0.04","125.45","16.37","1986.71","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,24,5,"delete","22.36","0.04","134.15","16.78","1986.88","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,24,6,"delete","24.32","0.04","123.33","15.60","1986.75","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,24,7,"delete","22.17","0.05","135.30","16.73","1986.78","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,24,8,"delete","24.04","0.04","124.77","16.01","1987.47","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,24,9,"delete","23.13","0.04","129.70","16.59","1986.80","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,24,10,"delete","22.67","0.04","132.34","16.64","1986.93","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",5,1,1,"simple","134.43","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,2,"simple","136.36","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,3,"simple","146.35","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,4,"simple","138.33","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,5,"simple","134.52","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,6,"simple","136.91","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,7,"simple","129.08","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,8,"simple","145.60","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,9,"simple","137.46","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,10,"simple","144.62","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,1,1,"simple","97.32","2.23","51.38","9.49","1986.71","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,2,"simple","97.23","2.25","51.42","9.49","1986.92","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,3,"simple","74.70","2.18","66.93","12.19","1986.96","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,4,"simple","81.20","2.36","61.58","11.63","1986.82","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,5,"simple","91.84","2.22","54.45","9.84","1986.97","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,6,"simple","87.35","2.25","57.24","10.87","1986.82","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,7,"simple","79.78","2.22","62.67","12.83","1986.84","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,8,"simple","88.13","2.23","56.73","10.54","1986.82","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,9,"simple","76.17","2.26","65.64","11.83","1986.72","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,1,10,"simple","102.13","2.22","48.96","9.39","1986.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",5,2,1,"simple","96.87","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,2,"simple","96.11","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,3,"simple","92.83","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,4,"simple","95.74","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,5,"simple","92.48","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,6,"simple","92.93","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,7,"simple","96.03","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,8,"simple","95.54","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,9,"simple","96.71","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,10,"simple","91.63","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,2,1,"simple","43.09","0.07","116.03","10.97","1986.99","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,2,"simple","46.20","0.07","108.21","10.26","1986.82","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,3,"simple","45.93","0.07","108.86","10.69","1986.91","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,4,"simple","42.67","0.07","117.17","11.29","1987.06","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,5,"simple","42.48","0.07","117.70","11.21","1986.80","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,6,"simple","41.63","0.07","120.09","11.19","1986.56","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,7,"simple","41.83","0.07","119.54","11.21","1986.95","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,8,"simple","45.20","0.07","110.62","10.78","1987.05","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,9,"simple","43.08","0.07","116.06","11.32","1986.59","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,10,"simple","46.17","0.07","108.29","10.33","1986.82","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",5,3,1,"simple","93.86","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,2,"simple","91.22","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,3,"simple","115.51","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,4,"simple","97.42","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,5,"simple","98.65","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,6,"simple","91.26","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,7,"simple","97.91","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,8,"simple","97.03","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,9,"simple","92.81","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,10,"simple","91.93","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,3,1,"simple","43.72","0.19","114.36","11.34","1987.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,2,"simple","41.64","0.19","120.06","12.02","1986.73","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,3,"simple","41.55","0.23","120.35","12.05","1986.59","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,4,"simple","44.63","0.19","112.03","11.25","1986.99","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,5,"simple","42.85","0.19","116.68","11.60","1986.63","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,6,"simple","43.75","0.21","114.30","11.29","1986.63","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,7,"simple","46.78","0.20","106.88","10.87","1986.63","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,8,"simple","42.39","0.19","117.96","11.88","1986.84","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,9,"simple","46.05","0.23","108.57","11.21","1986.83","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,10,"simple","46.55","0.19","107.40","10.70","1986.83","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 58, ""Kühnertplatz 5"", ""Heiligenstadt"", ""65619"", ""Deutschland"", true]}"
"postgres","optimized","warmup",5,4,1,"medium","98.42","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,2,"medium","100.44","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,3,"medium","101.33","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,4,"medium","101.05","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,5,"medium","102.29","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,6,"medium","99.43","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,7,"medium","98.89","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,8,"medium","103.22","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,9,"medium","100.54","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,10,"medium","101.53","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,4,1,"medium","52.35","0.47","95.51","11.01","1986.83","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,2,"medium","49.10","0.47","101.84","12.56","1986.75","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,3,"medium","47.47","0.46","105.32","11.97","1987.01","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,4,"medium","47.48","0.46","105.30","12.05","1987.05","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,5,"medium","48.89","0.46","102.27","11.66","1986.63","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,6,"medium","47.39","0.45","105.52","12.05","1986.97","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,7,"medium","47.22","0.45","105.89","11.90","1987.16","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,8,"medium","47.63","0.47","104.99","12.75","1986.56","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,9,"medium","61.23","0.45","81.66","9.20","1986.96","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",5,4,10,"medium","47.06","0.48","106.25","11.79","1986.53","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",5,5,1,"medium","134.50","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,2,"medium","130.00","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,3,"medium","133.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,4,"medium","130.98","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,5,"medium","136.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,6,"medium","146.53","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,7,"medium","133.00","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,8,"medium","134.42","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,9,"medium","136.49","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,10,"medium","151.23","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,5,1,"medium","78.79","17.85","63.46","27.17","1985.00","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,2,"medium","87.05","17.44","57.44","25.25","1985.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,3,"medium","75.48","17.66","66.24","27.70","1985.46","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,4,"medium","83.50","17.18","59.88","25.77","1985.18","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,5,"medium","76.36","17.23","65.48","27.29","1985.40","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,6,"medium","80.83","17.24","61.85","26.79","1985.33","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,7,"medium","79.65","17.54","62.78","26.94","1985.22","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,8,"medium","75.01","17.09","66.66","27.83","1985.50","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,9,"medium","75.35","17.48","66.35","27.68","1985.29","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",5,5,10,"medium","74.02","17.40","67.55","28.04","1985.40","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","warmup",5,6,1,"medium","93.74","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,2,"medium","93.29","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,3,"medium","95.84","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,4,"medium","91.93","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,5,"medium","94.73","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,6,"medium","95.27","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,7,"medium","96.97","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,8,"medium","95.93","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,9,"medium","96.53","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,10,"medium","95.80","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,6,1,"medium","46.68","0.08","107.11","10.37","1985.33","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,2,"medium","42.93","0.07","116.47","11.16","1985.42","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,3,"medium","44.90","0.07","111.36","11.15","1985.52","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,4,"medium","47.14","0.07","106.07","10.20","1985.33","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,5,"medium","41.10","0.07","121.65","11.75","1985.37","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,6,"medium","41.11","0.07","121.64","11.72","1985.41","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,7,"medium","47.33","0.08","105.65","10.67","1985.27","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,8,"medium","55.25","0.07","90.50","10.00","1652.90","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,9,"medium","43.67","0.08","114.48","11.25","1654.96","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","steady",5,6,10,"medium","42.14","0.07","118.66","11.45","1654.78","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [105, 407, 1400431, 2, ""2025-07-12 08:59:52""]}"
"postgres","optimized","warmup",5,7,1,"complex","92.01","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,2,"complex","100.40","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,3,"complex","101.02","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,4,"complex","95.58","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,5,"complex","99.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,6,"complex","99.36","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,7,"complex","96.76","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,8,"complex","94.86","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,9,"complex","98.75","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,10,"complex","100.12","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,7,1,"complex","45.34","0.80","110.28","12.15","1654.92","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,2,"complex","43.43","0.78","115.12","12.43","1654.89","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,3,"complex","46.62","0.80","107.25","11.72","1655.17","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,4,"complex","42.19","0.80","118.52","12.79","1654.97","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,5,"complex","46.01","0.79","108.67","11.85","1655.33","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,6,"complex","42.82","0.79","116.76","12.91","1654.94","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,7,"complex","44.62","0.80","112.06","12.40","1655.12","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,8,"complex","43.85","0.80","114.03","12.15","1654.92","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,9,"complex","47.02","0.79","106.34","11.49","1655.14","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",5,7,10,"complex","46.70","0.82","107.07","11.63","1654.87","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","warmup",5,8,1,"complex","104.23","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,2,"complex","100.27","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,3,"complex","93.95","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,4,"complex","95.45","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,5,"complex","103.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,6,"complex","95.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,7,"complex","99.28","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,8,"complex","93.98","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,9,"complex","103.49","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,10,"complex","101.15","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,8,1,"complex","49.10","0.93","101.84","13.05","1655.14","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,2,"complex","53.00","0.86","94.34","11.96","1655.14","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,3,"complex","47.34","0.84","105.63","13.47","1654.95","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,4,"complex","52.77","0.86","94.74","12.64","1655.23","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,5,"complex","50.31","0.84","99.39","13.07","1654.92","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,6,"complex","45.01","0.84","111.08","14.38","1655.41","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,7,"complex","46.11","0.83","108.44","14.17","1655.59","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,8,"complex","49.37","0.86","101.28","12.88","1655.13","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,9,"complex","48.95","0.93","102.15","12.99","1655.38","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,10,"complex","49.15","0.85","101.73","13.24","1655.24","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 37, ""first"": [12248, ""Fitbit Versa 3 Health & Fitness Smartwatch with 6-months Premium Membership Included, Built-in GPS, Daily Readiness Score and up to 6+ Days Battery"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",5,9,1,"complex","97.68","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,2,"complex","100.17","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,3,"complex","98.06","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,4,"complex","96.66","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,5,"complex","94.97","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,6,"complex","94.89","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,7,"complex","94.44","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,8,"complex","97.20","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,9,"complex","95.38","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,10,"complex","96.88","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,9,1,"complex","44.43","0.58","112.54","11.98","1655.53","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,2,"complex","47.28","0.58","105.75","11.31","1655.17","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,3,"complex","41.86","0.58","119.45","12.50","1655.50","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,4,"complex","42.28","0.58","118.26","12.73","1655.31","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,5,"complex","55.30","0.58","90.42","10.08","1655.68","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,6,"complex","43.63","0.58","114.60","12.02","1655.44","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,7,"complex","45.41","0.58","110.11","11.75","1655.15","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,8,"complex","41.24","0.58","121.24","12.58","1655.20","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,9,"complex","43.76","0.58","114.27","12.17","1655.24","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,10,"complex","43.66","0.58","114.52","12.07","1655.47","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 286, ""first"": [1, 20]}"
"postgres","optimized","warmup",5,10,1,"very_complex","98.01","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,2,"very_complex","98.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,3,"very_complex","99.86","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,4,"very_complex","98.33","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,5,"very_complex","99.03","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,6,"very_complex","98.31","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,7,"very_complex","102.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,8,"very_complex","98.19","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,9,"very_complex","101.40","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,10,"very_complex","100.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,10,1,"very_complex","43.71","2.14","114.40","13.69","1655.22","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,2,"very_complex","44.64","1.73","112.00","13.15","1655.92","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,3,"very_complex","43.57","1.72","114.77","13.55","1656.29","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,4,"very_complex","42.73","1.68","117.01","14.91","1656.35","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,5,"very_complex","43.74","1.74","114.32","13.55","1656.94","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,6,"very_complex","49.13","1.73","101.77","12.54","1656.95","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,7,"very_complex","48.33","1.80","103.45","12.67","1657.05","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,8,"very_complex","49.71","1.74","100.58","12.05","1657.54","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,9,"very_complex","46.09","1.74","108.47","13.01","1657.47","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,10,10,"very_complex","49.12","1.71","101.79","12.19","1657.65","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",5,11,1,"very_complex","98.94","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,2,"very_complex","101.11","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,3,"very_complex","101.15","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,4,"very_complex","100.91","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,5,"very_complex","96.29","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,6,"very_complex","104.29","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,7,"very_complex","99.86","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,8,"very_complex","99.37","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,9,"very_complex","106.36","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,10,"very_complex","102.78","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,11,1,"very_complex","47.60","4.64","105.04","14.45","1657.61","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,2,"very_complex","51.18","4.62","97.70","13.13","1657.61","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,3,"very_complex","46.38","4.55","107.80","14.35","1657.51","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,4,"very_complex","46.67","4.56","107.12","14.45","1657.62","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,5,"very_complex","50.48","4.53","99.06","13.24","1657.25","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,6,"very_complex","55.40","4.57","90.24","13.13","1657.38","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,7,"very_complex","45.82","4.50","109.13","14.68","1657.53","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,8,"very_complex","45.04","4.61","111.01","14.63","1657.54","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,9,"very_complex","45.26","4.56","110.48","14.71","1657.83","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",5,11,10,"very_complex","45.00","4.56","111.11","14.71","1657.63","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","warmup",5,12,1,"very_complex","102.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,2,"very_complex","95.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,3,"very_complex","103.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,4,"very_complex","94.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,5,"very_complex","98.54","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,6,"very_complex","93.51","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,7,"very_complex","99.25","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,8,"very_complex","92.37","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,9,"very_complex","101.93","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,10,"very_complex","93.15","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,12,1,"very_complex","42.89","1.74","116.57","13.87","1657.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,2,"very_complex","47.07","1.71","106.22","13.11","1657.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,3,"very_complex","47.78","1.72","104.64","12.68","1657.91","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,4,"very_complex","49.38","1.71","101.26","12.08","1657.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,5,"very_complex","43.93","1.77","113.82","13.48","1657.75","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,6,"very_complex","43.85","1.70","114.02","13.62","1657.66","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,7,"very_complex","46.37","1.76","107.83","12.94","1657.47","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,8,"very_complex","44.25","1.72","112.98","13.55","1657.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,9,"very_complex","47.75","1.75","104.71","12.51","1657.80","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",5,12,10,"very_complex","45.50","1.73","109.89","13.19","1657.66","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",5,13,1,"create","98.23","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,2,"create","97.72","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,3,"create","97.85","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,4,"create","94.67","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,5,"create","92.12","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,6,"create","96.63","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,7,"create","92.73","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,8,"create","96.78","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,9,"create","113.18","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,10,"create","97.26","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,13,1,"create","43.35","0.11","115.34","11.75","1657.92","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1502]}"
"postgres","optimized","steady",5,13,2,"create","44.15","0.10","113.25","11.46","1657.99","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1508]}"
"postgres","optimized","steady",5,13,3,"create","46.74","0.12","106.97","10.83","1657.71","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1514]}"
"postgres","optimized","steady",5,13,4,"create","43.39","0.12","115.25","11.72","1657.95","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1520]}"
"postgres","optimized","steady",5,13,5,"create","44.96","0.15","111.20","11.33","1657.66","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1526]}"
"postgres","optimized","steady",5,13,6,"create","47.29","0.18","105.73","10.59","1657.79","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1532]}"
"postgres","optimized","steady",5,13,7,"create","42.46","0.10","117.77","11.80","1657.94","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1538]}"
"postgres","optimized","steady",5,13,8,"create","41.61","0.10","120.15","11.96","1657.96","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1544]}"
"postgres","optimized","steady",5,13,9,"create","58.71","0.10","85.17","8.60","1657.76","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1550]}"
"postgres","optimized","steady",5,13,10,"create","44.70","0.10","111.86","12.58","1657.45","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1556]}"
"postgres","optimized","warmup",5,14,1,"create","97.27","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,2,"create","96.63","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,3,"create","98.64","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,4,"create","96.35","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,5,"create","99.47","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,6,"create","96.41","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,7,"create","94.95","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,8,"create","96.25","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,9,"create","99.27","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,10,"create","96.70","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,14,1,"create","48.40","0.12","103.31","10.29","1658.20","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2160]}"
"postgres","optimized","steady",5,14,2,"create","42.46","0.10","117.76","11.69","1658.06","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2166]}"
"postgres","optimized","steady",5,14,3,"create","42.44","0.10","117.80","11.72","1658.32","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2172]}"
"postgres","optimized","steady",5,14,4,"create","41.44","0.10","120.67","12.10","1658.13","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2178]}"
"postgres","optimized","steady",5,14,5,"create","45.26","0.10","110.48","11.18","1658.38","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2184]}"
"postgres","optimized","steady",5,14,6,"create","41.65","0.13","120.06","11.86","1658.43","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2190]}"
"postgres","optimized","steady",5,14,7,"create","41.29","0.11","121.09","12.17","1658.29","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2196]}"
"postgres","optimized","steady",5,14,8,"create","41.25","0.20","121.21","12.08","1658.38","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2202]}"
"postgres","optimized","steady",5,14,9,"create","41.56","0.14","120.31","11.94","1658.39","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2208]}"
"postgres","optimized","steady",5,14,10,"create","43.08","0.10","116.07","11.93","1658.50","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2214]}"
"postgres","optimized","warmup",5,15,1,"create","97.14","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,2,"create","94.04","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,3,"create","96.73","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,4,"create","97.40","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,5,"create","97.86","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,6,"create","108.29","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,7,"create","97.91","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,8,"create","99.57","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,9,"create","95.03","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,10,"create","97.81","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,15,1,"create","45.00","0.14","111.11","11.43","1658.14","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1639]}"
"postgres","optimized","steady",5,15,2,"create","46.56","0.12","107.39","11.01","1658.55","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1645]}"
"postgres","optimized","steady",5,15,3,"create","46.57","0.12","107.36","11.56","1658.26","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1651]}"
"postgres","optimized","steady",5,15,4,"create","48.80","0.12","102.46","10.53","1658.27","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1657]}"
"postgres","optimized","steady",5,15,5,"create","52.78","0.12","94.72","10.00","1658.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1663]}"
"postgres","optimized","steady",5,15,6,"create","46.52","0.11","107.49","11.26","1658.56","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1669]}"
"postgres","optimized","steady",5,15,7,"create","47.24","0.12","105.84","10.86","1658.37","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1675]}"
"postgres","optimized","steady",5,15,8,"create","44.03","0.11","113.57","11.74","1658.67","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1681]}"
"postgres","optimized","steady",5,15,9,"create","43.10","0.13","116.01","11.98","1658.44","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1687]}"
"postgres","optimized","steady",5,15,10,"create","42.97","0.12","116.36","11.90","1658.60","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1693]}"
"postgres","optimized","warmup",5,16,1,"create","93.10","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,2,"create","97.38","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,3,"create","97.23","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,4,"create","96.32","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,5,"create","97.71","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,6,"create","96.59","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,7,"create","99.20","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,8,"create","97.61","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,9,"create","98.16","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,10,"create","96.71","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,16,1,"create","42.34","0.12","118.09","11.86","1658.46","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10594]}"
"postgres","optimized","steady",5,16,2,"create","41.39","0.12","120.82","12.22","1658.60","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10600]}"
"postgres","optimized","steady",5,16,3,"create","45.02","0.12","111.06","11.33","1658.63","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10606]}"
"postgres","optimized","steady",5,16,4,"create","42.65","0.13","117.22","12.12","1658.74","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10612]}"
"postgres","optimized","steady",5,16,5,"create","48.15","0.12","103.85","11.14","1658.26","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10618]}"
"postgres","optimized","steady",5,16,6,"create","44.40","0.12","112.62","11.72","1658.85","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10624]}"
"postgres","optimized","steady",5,16,7,"create","46.71","0.12","107.04","10.96","1658.38","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10630]}"
"postgres","optimized","steady",5,16,8,"create","41.61","0.12","120.18","12.14","1658.72","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10636]}"
"postgres","optimized","steady",5,16,9,"create","42.23","0.12","118.39","12.01","1658.65","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10642]}"
"postgres","optimized","steady",5,16,10,"create","41.82","0.14","119.55","12.34","1658.71","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10648]}"
"postgres","optimized","warmup",5,17,1,"update","96.79","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,2,"update","96.34","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,3,"update","96.71","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,4,"update","96.13","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,5,"update","97.55","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,6,"update","90.82","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,7,"update","91.53","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,8,"update","95.27","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,9,"update","97.54","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,10,"update","96.86","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,17,1,"update","44.67","0.08","111.93","11.19","1658.72","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 128]}"
"postgres","optimized","steady",5,17,2,"update","46.73","0.09","107.00","10.38","1658.32","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 133]}"
"postgres","optimized","steady",5,17,3,"update","41.81","0.08","119.60","11.82","1658.65","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 138]}"
"postgres","optimized","steady",5,17,4,"update","45.56","0.08","109.75","11.04","1658.69","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 143]}"
"postgres","optimized","steady",5,17,5,"update","45.98","0.08","108.75","10.56","1658.34","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 148]}"
"postgres","optimized","steady",5,17,6,"update","45.57","0.08","109.73","10.75","1658.75","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 153]}"
"postgres","optimized","steady",5,17,7,"update","46.59","0.08","107.31","10.69","1658.64","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 158]}"
"postgres","optimized","steady",5,17,8,"update","45.69","0.08","109.44","10.84","1658.41","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 163]}"
"postgres","optimized","steady",5,17,9,"update","42.31","0.08","118.17","11.51","1658.71","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 168]}"
"postgres","optimized","steady",5,17,10,"update","47.42","0.08","105.44","10.66","1658.29","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 173]}"
"postgres","optimized","warmup",5,18,1,"update","98.55","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,2,"update","94.09","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,3,"update","94.79","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,4,"update","96.31","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,5,"update","92.36","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,6,"update","96.32","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,7,"update","97.24","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,8,"update","97.49","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,9,"update","97.25","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,10,"update","93.98","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,18,1,"update","42.31","0.07","118.18","11.44","1658.78","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,2,"update","45.46","0.07","109.99","10.82","1658.84","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,3,"update","41.56","0.07","120.32","11.73","1658.73","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,4,"update","41.35","0.07","120.93","11.86","1658.46","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,5,"update","46.41","0.07","107.74","10.34","1658.74","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,6,"update","42.22","0.07","118.42","11.45","1659.05","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,7,"update","42.49","0.07","117.68","11.42","1658.99","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,8,"update","45.15","0.07","110.74","10.97","1658.66","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,9,"update","46.23","0.07","108.14","10.50","1658.92","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,10,"update","41.95","0.08","119.18","11.88","1658.94","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","warmup",5,19,1,"update","96.28","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,2,"update","95.90","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,3,"update","96.74","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,4,"update","95.80","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,5,"update","97.98","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,6,"update","96.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,7,"update","97.86","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,8,"update","96.48","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,9,"update","97.38","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,10,"update","96.33","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,19,1,"update","40.89","0.12","122.28","11.72","1658.75","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [131, 5]}"
"postgres","optimized","steady",5,19,2,"update","42.01","0.09","119.03","11.56","1658.72","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [136, 4]}"
"postgres","optimized","steady",5,19,3,"update","46.30","0.16","107.99","10.93","1658.91","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [141, 5]}"
"postgres","optimized","steady",5,19,4,"update","47.28","0.08","105.74","10.54","1659.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [146, 5]}"
"postgres","optimized","steady",5,19,5,"update","44.63","0.09","112.02","11.26","1658.80","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [151, 5]}"
"postgres","optimized","steady",5,19,6,"update","43.93","0.09","113.82","11.20","1658.82","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [156, 4]}"
"postgres","optimized","steady",5,19,7,"update","46.24","0.09","108.13","10.56","1659.06","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [84, 7]}"
"postgres","optimized","steady",5,19,8,"update","44.27","0.09","112.94","11.17","1658.63","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [89, 8]}"
"postgres","optimized","steady",5,19,9,"update","47.95","0.09","104.28","10.39","1658.71","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [94, 7]}"
"postgres","optimized","steady",5,19,10,"update","45.38","0.09","110.19","10.93","1658.77","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [99, 7]}"
"postgres","optimized","warmup",5,20,1,"update","92.83","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,2,"update","97.30","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,3,"update","94.73","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,4,"update","95.54","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,5,"update","99.15","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,6,"update","97.39","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,7,"update","97.98","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,8,"update","97.08","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,9,"update","98.51","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,10,"update","93.47","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,20,1,"update","43.65","0.11","114.54","11.81","1659.50","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [43, ""karl-ludwigschweitzer@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,2,"update","46.97","0.11","106.46","10.57","1659.64","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [48, ""iwan07@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,3,"update","44.52","0.12","112.31","11.39","1659.64","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [54, ""drubhelene@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,4,"update","47.65","0.14","104.93","10.40","1659.59","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [59, ""ttrommler@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,5,"update","43.11","0.11","115.98","11.75","1660.10","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [65, ""lidwina77@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,6,"update","43.54","0.12","114.83","11.66","1659.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [70, ""schenkalina@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,7,"update","47.38","0.12","105.52","11.57","1659.52","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""rtrupp@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,8,"update","43.66","0.11","114.51","11.64","1659.51","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [81, ""markus37@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,9,"update","44.68","0.11","111.91","11.71","1659.46","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [86, ""cindybender@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,10,"update","45.53","0.15","109.81","11.36","1659.27","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [92, ""ehaenel@example.net.tmp.tmp""]}"
"postgres","optimized","warmup",5,21,1,"delete","99.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,2,"delete","98.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,3,"delete","101.33","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,4,"delete","96.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,5,"delete","97.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,6,"delete","96.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,7,"delete","96.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,8,"delete","90.45","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,9,"delete","96.74","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,10,"delete","96.13","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,21,1,"delete","42.88","0.04","116.59","11.22","1660.26","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,21,2,"delete","47.79","0.04","104.63","10.49","1659.78","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,21,3,"delete","42.36","0.05","118.05","11.56","1660.18","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,21,4,"delete","42.69","0.04","117.12","11.39","1659.73","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,21,5,"delete","45.09","0.04","110.88","10.82","1659.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,21,6,"delete","41.72","0.04","119.83","11.74","1659.88","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,21,7,"delete","40.72","0.04","122.78","11.82","1660.11","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,21,8,"delete","43.16","0.04","115.85","11.52","1659.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,21,9,"delete","50.05","0.04","99.89","10.35","1659.74","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,21,10,"delete","45.67","0.04","109.48","10.73","1659.99","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,22,1,"delete","97.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,2,"delete","94.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,3,"delete","121.00","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,4,"delete","96.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,5,"delete","95.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,6,"delete","92.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,7,"delete","98.23","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,8,"delete","98.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,9,"delete","96.17","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,10,"delete","96.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,22,1,"delete","45.50","0.06","109.90","11.06","1660.03","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,22,2,"delete","49.01","0.07","102.03","10.40","1660.18","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,22,3,"delete","43.53","0.06","114.85","11.40","1659.67","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,22,4,"delete","44.93","0.06","111.29","12.59","1659.68","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,22,5,"delete","44.92","0.06","111.30","11.14","1659.85","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,22,6,"delete","42.61","0.07","117.35","11.59","1659.74","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,22,7,"delete","43.80","0.06","114.15","11.52","1659.64","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,22,8,"delete","43.48","0.06","115.00","11.44","1659.80","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,22,9,"delete","41.60","0.06","120.21","11.83","1660.16","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,22,10,"delete","41.34","0.06","120.96","11.69","1660.10","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,23,1,"delete","97.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,2,"delete","94.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,3,"delete","96.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,4,"delete","92.13","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,5,"delete","96.55","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,6,"delete","91.45","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,7,"delete","97.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,8,"delete","90.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,9,"delete","96.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,10,"delete","92.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,23,1,"delete","41.48","0.04","120.55","11.80","1659.84","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,23,2,"delete","47.50","0.04","105.27","10.38","1659.78","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,23,3,"delete","41.06","0.04","121.78","12.88","1660.05","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,23,4,"delete","42.74","0.04","116.99","11.51","1660.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,23,5,"delete","41.05","0.04","121.81","12.03","1659.86","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,23,6,"delete","42.41","0.04","117.88","11.40","1659.98","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,23,7,"delete","46.88","0.04","106.67","10.36","1660.20","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,23,8,"delete","42.06","0.04","118.89","11.75","1660.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,23,9,"delete","44.37","0.04","112.70","11.01","1659.94","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,23,10,"delete","42.40","0.04","117.91","14.24","1659.79","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,24,1,"delete","97.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,2,"delete","92.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,3,"delete","98.22","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,4,"delete","94.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,5,"delete","96.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,6,"delete","96.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,7,"delete","97.51","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,8,"delete","97.23","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,9,"delete","98.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,10,"delete","96.68","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,24,1,"delete","47.22","0.04","105.90","10.35","1659.96","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,24,2,"delete","45.79","0.04","109.18","11.80","1659.91","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,24,3,"delete","44.60","0.04","112.11","11.24","1660.13","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,24,4,"delete","47.20","0.04","105.92","10.39","1660.04","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,24,5,"delete","43.04","0.04","116.18","11.61","1659.95","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,24,6,"delete","43.63","0.04","114.61","11.27","1660.28","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,24,7,"delete","44.20","0.04","113.11","10.91","1659.89","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,24,8,"delete","45.25","0.04","110.51","11.15","1659.88","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,24,9,"delete","42.80","0.04","116.83","11.49","1659.92","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,24,10,"delete","41.98","0.04","119.09","11.85","1660.13","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",10,1,1,"simple","200.55","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,2,"simple","205.64","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,3,"simple","235.38","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,4,"simple","222.80","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,5,"simple","214.02","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,6,"simple","204.16","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,7,"simple","227.17","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,8,"simple","216.10","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,9,"simple","214.97","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,10,"simple","215.36","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,1,1,"simple","167.92","2.23","59.55","10.02","1660.00","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,2,"simple","194.88","2.22","51.31","8.34","1660.17","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,3,"simple","162.90","2.21","61.39","10.11","1659.99","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,4,"simple","151.18","2.22","66.15","11.88","1660.62","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,5,"simple","149.55","2.24","66.87","11.65","1660.23","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,6,"simple","149.66","2.29","66.82","11.17","1660.07","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,7,"simple","167.40","2.24","59.74","9.79","1660.18","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,8,"simple","186.51","2.22","53.62","8.79","1660.27","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,9,"simple","180.63","2.21","55.36","9.73","1660.40","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,1,10,"simple","197.39","2.33","50.66","8.20","1660.16","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",10,2,1,"simple","142.36","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,2,"simple","138.26","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,3,"simple","131.69","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,4,"simple","138.81","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,5,"simple","137.94","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,6,"simple","131.99","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,7,"simple","140.65","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,8,"simple","137.10","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,9,"simple","138.41","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,10,"simple","138.86","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,2,1,"simple","85.77","0.07","116.60","7.87","1655.55","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,2,"simple","83.49","0.07","119.77","8.30","1655.72","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,3,"simple","88.53","0.08","112.96","7.62","1651.23","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,4,"simple","99.19","0.07","100.82","8.32","1649.70","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,5,"simple","81.53","0.07","122.65","8.34","1651.65","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,6,"simple","85.34","0.07","117.18","7.94","1651.54","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,7,"simple","89.37","0.07","111.89","7.53","1651.54","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,8,"simple","94.03","0.07","106.35","7.34","1651.62","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,9,"simple","89.47","0.08","111.77","7.46","1651.79","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,10,"simple","88.29","0.08","113.26","7.64","1651.62","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",10,3,1,"simple","146.38","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,2,"simple","150.24","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,3,"simple","153.19","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,4,"simple","150.15","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,5,"simple","164.47","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,6,"simple","164.34","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,7,"simple","138.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,8,"simple","138.43","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,9,"simple","142.34","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,10,"simple","150.05","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,3,1,"simple","89.36","0.23","111.91","8.67","1652.14","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,2,"simple","90.58","0.22","110.40","8.79","1652.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,3,"simple","94.32","0.21","106.02","8.77","1651.91","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,4,"simple","94.13","0.21","106.23","8.25","1652.06","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,5,"simple","93.38","0.21","107.08","8.51","1652.06","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,6,"simple","91.73","0.22","109.01","8.52","1652.18","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,7,"simple","94.25","0.22","106.10","8.56","1652.02","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,8,"simple","92.84","0.21","107.72","8.46","1652.61","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,9,"simple","98.09","0.21","101.95","8.28","1651.94","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,10,"simple","109.58","0.21","91.26","7.10","1651.90","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 139, ""Gumprichplatz 95"", ""Havelberg"", ""75976"", ""Deutschland"", true]}"
"postgres","optimized","warmup",10,4,1,"medium","156.39","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,2,"medium","149.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,3,"medium","155.90","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,4,"medium","151.45","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,5,"medium","159.83","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,6,"medium","164.46","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,7,"medium","157.65","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,8,"medium","152.16","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,9,"medium","155.76","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,10,"medium","148.17","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,4,1,"medium","102.11","0.50","97.93","8.99","1652.41","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,2,"medium","106.52","0.45","93.88","8.17","1652.28","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,3,"medium","103.93","0.45","96.22","8.60","1652.46","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,4,"medium","105.08","0.48","95.17","8.53","1652.40","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,5,"medium","108.56","0.48","92.11","8.76","1652.49","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,6,"medium","105.99","0.45","94.35","8.43","1652.57","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,7,"medium","104.06","0.47","96.10","8.79","1652.33","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,8,"medium","115.43","0.45","86.63","7.95","1652.34","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,9,"medium","109.60","0.45","91.24","8.43","1652.27","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","steady",10,4,10,"medium","105.02","0.45","95.22","8.75","1652.59","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 18, ""2023-09-06 17:30:55"", ""2024-08-15 02:55:45""]}"
"postgres","optimized","warmup",10,5,1,"medium","186.84","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,2,"medium","209.91","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,3,"medium","191.54","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,4,"medium","200.86","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,5,"medium","203.15","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,6,"medium","204.40","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,7,"medium","204.17","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,8,"medium","213.80","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,9,"medium","191.02","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,10,"medium","222.79","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,5,1,"medium","144.53","17.32","69.19","30.07","1655.39","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,2,"medium","158.34","17.67","63.15","27.64","1655.39","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,3,"medium","151.14","17.77","66.16","28.55","1655.82","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,4,"medium","148.45","17.27","67.36","29.46","1655.68","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,5,"medium","148.32","17.61","67.42","29.10","1655.65","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,6,"medium","131.47","17.11","76.06","32.41","1655.77","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,7,"medium","134.54","17.22","74.33","31.57","1655.77","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,8,"medium","162.44","16.78","61.56","29.50","1655.74","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,9,"medium","145.31","17.21","68.82","30.19","1655.75","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","steady",10,5,10,"medium","142.42","17.46","70.22","29.88","1655.78","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [67708, ""U-POL - Plastic Bumper Filler - 250ml"", ""14.44"", 50, ""2018-11-29 03:08:58"", ""2023-12-26 06:38:09"", 3]}"
"postgres","optimized","warmup",10,6,1,"medium","149.71","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,2,"medium","138.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,3,"medium","141.14","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,4,"medium","129.14","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,5,"medium","139.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,6,"medium","138.29","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,7,"medium","138.26","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,8,"medium","132.60","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,9,"medium","140.71","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,10,"medium","134.36","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,6,1,"medium","83.16","0.07","120.25","8.35","1651.93","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,2,"medium","81.23","0.06","123.10","8.47","1652.46","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,3,"medium","84.39","0.06","118.50","9.63","1649.68","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,4,"medium","85.56","0.06","116.87","8.79","1651.73","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,5,"medium","79.82","0.06","125.29","8.57","1651.55","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,6,"medium","84.94","0.06","117.73","8.39","1651.75","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,7,"medium","87.13","0.07","114.77","8.05","1652.36","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,8,"medium","85.20","0.06","117.38","8.17","1652.78","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,9,"medium","87.17","0.08","114.72","8.14","1652.79","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","steady",10,6,10,"medium","84.05","0.06","118.98","8.52","1653.18","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 91, ""first"": [218, 793, 1337133, 2, ""2025-07-10 05:18:50""]}"
"postgres","optimized","warmup",10,7,1,"complex","155.58","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,2,"complex","151.76","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,3,"complex","152.63","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,4,"complex","149.30","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,5,"complex","158.70","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,6,"complex","149.31","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,7,"complex","155.12","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,8,"complex","155.32","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,9,"complex","155.07","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,10,"complex","152.90","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,7,1,"complex","105.61","0.82","94.69","8.16","1654.00","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,2,"complex","102.17","0.79","97.88","8.42","1654.17","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,3,"complex","97.35","0.79","102.72","8.82","1654.45","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,4,"complex","90.33","0.78","110.70","9.50","1654.27","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,5,"complex","98.79","0.80","101.23","9.04","1654.25","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,6,"complex","90.99","0.78","109.90","9.47","1654.36","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,7,"complex","100.20","0.79","99.80","8.55","1654.20","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,8,"complex","99.27","0.78","100.74","9.10","1654.01","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,9,"complex","89.29","0.78","111.99","9.56","1654.27","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","steady",10,7,10,"complex","94.78","0.81","105.50","9.08","1654.23","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-03-30 16:52:29"", ""84.15""]}"
"postgres","optimized","warmup",10,8,1,"complex","152.22","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,2,"complex","150.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,3,"complex","164.30","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,4,"complex","154.67","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,5,"complex","157.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,6,"complex","153.01","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,7,"complex","145.20","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,8,"complex","151.16","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,9,"complex","157.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,10,"complex","139.38","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,8,1,"complex","94.79","0.45","105.49","10.19","1655.26","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,2,"complex","92.88","0.44","107.67","10.38","1654.98","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,3,"complex","101.44","0.48","98.58","10.13","1655.03","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,4,"complex","102.00","0.46","98.04","9.90","1655.31","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,5,"complex","105.79","0.47","94.53","9.08","1655.03","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,6,"complex","100.05","0.47","99.95","10.05","1655.11","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,7,"complex","97.39","0.44","102.68","10.43","1654.95","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,8,"complex","98.70","0.46","101.31","10.18","1655.03","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,9,"complex","107.82","0.50","92.75","9.31","1654.82","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,10,"complex","94.64","0.45","105.66","10.63","1655.01","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 19, ""first"": [83829, ""Action Camera Neck Holder for Insta 360 Gopro, Universal Sport Camera Smartphone Mount Anti-shake Quick Release Bracket Body Cam Holder Stand for Tiktok YouTube Vlog Living Streaming Selfie Video"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",10,9,1,"complex","158.41","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,2,"complex","154.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,3,"complex","144.67","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,4,"complex","153.14","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,5,"complex","141.14","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,6,"complex","148.86","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,7,"complex","154.31","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,8,"complex","150.88","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,9,"complex","169.07","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,10,"complex","151.52","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,9,1,"complex","101.59","0.65","98.44","8.42","1655.26","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,2,"complex","104.73","0.63","95.48","8.03","1655.31","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,3,"complex","95.15","0.64","105.10","9.12","1655.13","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,4,"complex","91.72","0.62","109.03","9.76","1655.06","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,5,"complex","104.85","0.63","95.38","8.12","1655.30","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,6,"complex","106.56","0.62","93.84","7.98","1655.31","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,7,"complex","96.73","0.62","103.38","8.80","1655.24","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,8,"complex","96.95","0.61","103.14","8.72","1655.01","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,9,"complex","93.51","0.62","106.94","8.99","1655.46","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,10,"complex","91.92","0.61","108.79","9.33","1655.60","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 287, ""first"": [1, 20]}"
"postgres","optimized","warmup",10,10,1,"very_complex","163.65","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,2,"very_complex","157.62","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,3,"very_complex","154.61","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,4,"very_complex","141.84","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,5,"very_complex","160.74","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,6,"very_complex","142.16","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,7,"very_complex","159.32","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,8,"very_complex","151.58","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,9,"very_complex","143.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,10,"very_complex","157.74","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,10,1,"very_complex","95.69","2.01","104.51","10.62","1656.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,2,"very_complex","95.50","1.70","104.71","10.48","1656.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,3,"very_complex","102.83","1.73","97.24","10.19","1656.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,4,"very_complex","93.45","1.73","107.00","10.58","1656.27","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,5,"very_complex","97.19","1.71","102.89","10.34","1656.28","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,6,"very_complex","93.72","1.74","106.70","10.56","1656.59","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,7,"very_complex","95.77","1.70","104.42","10.37","1656.49","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,8,"very_complex","101.56","1.75","98.46","9.67","1656.54","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,9,"very_complex","97.02","1.73","103.07","10.22","1656.60","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,10,10,"very_complex","106.63","1.69","93.79","9.23","1656.23","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",10,11,1,"very_complex","153.93","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,2,"very_complex","154.09","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,3,"very_complex","151.81","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,4,"very_complex","160.15","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,5,"very_complex","145.24","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,6,"very_complex","144.83","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,7,"very_complex","155.29","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,8,"very_complex","154.55","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,9,"very_complex","177.98","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,10,"very_complex","149.91","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,11,1,"very_complex","111.85","4.86","89.41","10.61","1656.53","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,2,"very_complex","112.52","4.89","88.87","10.37","1656.72","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,3,"very_complex","111.38","4.61","89.78","10.25","1656.60","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,4,"very_complex","107.95","5.11","92.63","10.61","1656.55","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,5,"very_complex","105.86","4.83","94.47","10.76","1656.79","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,6,"very_complex","106.62","4.94","93.80","10.65","1656.38","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,7,"very_complex","102.76","4.84","97.32","11.71","1656.67","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,8,"very_complex","113.88","4.91","87.81","10.00","1656.84","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,9,"very_complex","100.56","4.59","99.44","11.18","1656.62","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","steady",10,11,10,"very_complex","92.55","4.88","108.05","12.15","1656.97","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [89, 1237047, 1]}"
"postgres","optimized","warmup",10,12,1,"very_complex","157.63","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,2,"very_complex","151.98","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,3,"very_complex","156.99","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,4,"very_complex","165.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,5,"very_complex","154.03","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,6,"very_complex","161.15","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,7,"very_complex","156.20","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,8,"very_complex","151.11","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,9,"very_complex","156.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,10,"very_complex","150.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,12,1,"very_complex","101.63","1.70","98.40","9.95","1656.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,2,"very_complex","104.78","1.70","95.44","9.24","1656.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,3,"very_complex","92.26","1.83","108.38","10.64","1656.46","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,4,"very_complex","91.29","1.77","109.54","10.71","1656.66","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,5,"very_complex","113.45","1.71","88.14","8.77","1656.57","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,6,"very_complex","96.54","1.72","103.58","10.35","1656.40","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,7,"very_complex","94.63","1.72","105.68","10.63","1656.67","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,8,"very_complex","92.48","1.72","108.13","10.64","1656.31","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,9,"very_complex","89.85","1.69","111.30","10.95","1656.42","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","steady",10,12,10,"very_complex","98.43","1.71","101.59","10.31","1656.44","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 11, ""first"": [332242, 1]}"
"postgres","optimized","warmup",10,13,1,"create","151.21","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,2,"create","148.48","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,3,"create","152.17","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,4,"create","150.22","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,5,"create","145.60","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,6,"create","139.09","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,7,"create","141.72","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,8,"create","151.19","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,9,"create","138.77","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,10,"create","151.66","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,13,1,"create","98.05","0.12","101.99","8.08","1656.96","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1662]}"
"postgres","optimized","steady",10,13,2,"create","96.29","0.12","103.85","8.27","1656.65","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1673]}"
"postgres","optimized","steady",10,13,3,"create","95.17","0.11","105.08","8.46","1656.77","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1684]}"
"postgres","optimized","steady",10,13,4,"create","98.22","0.20","101.82","8.14","1656.60","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1695]}"
"postgres","optimized","steady",10,13,5,"create","93.71","0.10","106.71","8.51","1656.78","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1706]}"
"postgres","optimized","steady",10,13,6,"create","96.58","0.11","103.54","8.80","1656.86","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1717]}"
"postgres","optimized","steady",10,13,7,"create","99.90","0.12","100.10","7.85","1656.89","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1728]}"
"postgres","optimized","steady",10,13,8,"create","95.05","0.11","105.20","8.43","1656.97","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1739]}"
"postgres","optimized","steady",10,13,9,"create","93.60","0.12","106.84","8.30","1656.63","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1750]}"
"postgres","optimized","steady",10,13,10,"create","100.79","0.11","99.21","8.10","1656.52","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1761]}"
"postgres","optimized","warmup",10,14,1,"create","155.19","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,2,"create","143.86","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,3,"create","152.76","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,4,"create","145.54","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,5,"create","150.36","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,6,"create","149.36","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,7,"create","147.14","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,8,"create","150.54","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,9,"create","151.51","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,10,"create","151.27","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,14,1,"create","94.08","0.14","106.29","8.25","1656.73","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2320]}"
"postgres","optimized","steady",10,14,2,"create","132.69","0.18","75.36","6.24","1657.18","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2331]}"
"postgres","optimized","steady",10,14,3,"create","92.00","0.19","108.69","8.77","1656.92","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2342]}"
"postgres","optimized","steady",10,14,4,"create","89.42","0.11","111.83","8.81","1657.15","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2353]}"
"postgres","optimized","steady",10,14,5,"create","88.51","0.11","112.99","8.99","1656.92","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2364]}"
"postgres","optimized","steady",10,14,6,"create","100.00","0.14","100.00","7.68","1657.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2375]}"
"postgres","optimized","steady",10,14,7,"create","88.02","0.10","113.61","9.11","1657.24","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2386]}"
"postgres","optimized","steady",10,14,8,"create","91.10","0.11","109.77","8.70","1657.10","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2397]}"
"postgres","optimized","steady",10,14,9,"create","95.01","0.11","105.25","8.78","1657.15","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2408]}"
"postgres","optimized","steady",10,14,10,"create","96.19","0.10","103.96","8.41","1657.28","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2419]}"
"postgres","optimized","warmup",10,15,1,"create","142.77","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,2,"create","151.90","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,3,"create","149.68","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,4,"create","150.42","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,5,"create","141.16","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,6,"create","150.96","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,7,"create","150.42","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,8,"create","149.50","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,9,"create","144.51","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,10,"create","154.07","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,15,1,"create","95.69","0.11","104.50","9.07","1657.39","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1799]}"
"postgres","optimized","steady",10,15,2,"create","117.10","0.12","85.40","7.06","1657.75","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1810]}"
"postgres","optimized","steady",10,15,3,"create","96.87","0.12","103.23","8.62","1657.16","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1821]}"
"postgres","optimized","steady",10,15,4,"create","100.54","0.12","99.46","8.01","1657.39","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1832]}"
"postgres","optimized","steady",10,15,5,"create","95.67","0.12","104.53","8.59","1657.37","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1843]}"
"postgres","optimized","steady",10,15,6,"create","102.46","0.12","97.60","7.82","1657.17","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1854]}"
"postgres","optimized","steady",10,15,7,"create","98.11","0.11","101.92","9.03","1657.58","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1865]}"
"postgres","optimized","steady",10,15,8,"create","102.03","0.12","98.01","7.93","1657.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1876]}"
"postgres","optimized","steady",10,15,9,"create","101.50","0.12","98.52","7.83","1657.38","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1887]}"
"postgres","optimized","steady",10,15,10,"create","91.18","0.13","109.67","8.90","1657.33","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1898]}"
"postgres","optimized","warmup",10,16,1,"create","155.25","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,2,"create","141.63","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,3,"create","164.93","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,4,"create","153.40","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,5,"create","153.73","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,6,"create","144.29","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,7,"create","147.14","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,8,"create","164.82","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,9,"create","141.63","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,10,"create","148.78","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,16,1,"create","99.66","0.14","100.34","8.92","1657.55","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10754]}"
"postgres","optimized","steady",10,16,2,"create","104.91","0.12","95.32","7.83","1657.66","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10765]}"
"postgres","optimized","steady",10,16,3,"create","92.04","0.12","108.64","8.91","1657.32","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10776]}"
"postgres","optimized","steady",10,16,4,"create","98.28","0.12","101.75","8.35","1657.75","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10787]}"
"postgres","optimized","steady",10,16,5,"create","90.31","0.12","110.73","9.37","1657.59","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10798]}"
"postgres","optimized","steady",10,16,6,"create","94.15","0.12","106.21","8.59","1657.60","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10809]}"
"postgres","optimized","steady",10,16,7,"create","93.01","0.12","107.52","8.73","1657.77","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10820]}"
"postgres","optimized","steady",10,16,8,"create","91.47","0.23","109.32","8.67","1657.65","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10831]}"
"postgres","optimized","steady",10,16,9,"create","102.35","0.12","97.70","8.29","1657.67","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10842]}"
"postgres","optimized","steady",10,16,10,"create","104.54","0.14","95.65","8.13","1657.70","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10853]}"
"postgres","optimized","warmup",10,17,1,"update","152.34","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,2,"update","149.06","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,3,"update","154.89","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,4,"update","142.61","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,5,"update","151.59","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,6,"update","148.23","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,7,"update","150.87","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,8,"update","142.85","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,9,"update","149.75","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,10,"update","148.59","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,17,1,"update","92.93","0.08","107.61","8.15","1657.82","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 278]}"
"postgres","optimized","steady",10,17,2,"update","95.23","0.08","105.01","7.93","1657.56","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 288]}"
"postgres","optimized","steady",10,17,3,"update","91.47","0.08","109.33","8.11","1657.90","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 298]}"
"postgres","optimized","steady",10,17,4,"update","92.97","0.08","107.57","8.73","1657.67","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 308]}"
"postgres","optimized","steady",10,17,5,"update","92.92","0.11","107.62","8.13","1657.66","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 318]}"
"postgres","optimized","steady",10,17,6,"update","92.97","0.09","107.56","8.38","1657.97","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 328]}"
"postgres","optimized","steady",10,17,7,"update","102.99","0.08","97.10","7.35","1657.62","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 338]}"
"postgres","optimized","steady",10,17,8,"update","96.96","0.08","103.14","8.02","1658.08","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 348]}"
"postgres","optimized","steady",10,17,9,"update","93.58","0.08","106.86","8.22","1657.71","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 358]}"
"postgres","optimized","steady",10,17,10,"update","95.38","0.08","104.84","8.73","1657.75","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 368]}"
"postgres","optimized","warmup",10,18,1,"update","175.23","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,2,"update","145.81","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,3,"update","152.05","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,4,"update","174.25","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,5,"update","152.49","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,6,"update","146.79","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,7,"update","147.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,8,"update","148.33","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,9,"update","152.85","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,10,"update","145.78","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,18,1,"update","102.94","0.10","97.14","7.84","1657.96","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [190, 3]}"
"postgres","optimized","steady",10,18,2,"update","102.12","0.10","97.92","7.62","1658.06","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,3,"update","92.69","0.10","107.89","8.22","1658.12","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,4,"update","91.75","0.07","109.00","8.14","1657.94","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,5,"update","91.63","0.07","109.13","8.38","1657.70","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,6,"update","99.77","0.07","100.23","7.64","1658.10","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,7,"update","115.00","0.07","86.96","6.75","1657.71","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,8,"update","96.45","0.07","103.68","8.27","1657.85","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,9,"update","89.39","0.09","111.87","8.38","1658.06","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","steady",10,18,10,"update","88.37","0.07","113.16","8.54","1657.85","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [200, 1]}"
"postgres","optimized","warmup",10,19,1,"update","151.64","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,2,"update","148.64","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,3,"update","150.05","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,4,"update","150.54","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,5,"update","151.10","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,6,"update","149.20","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,7,"update","152.97","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,8,"update","150.96","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,9,"update","150.14","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,10,"update","137.57","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,19,1,"update","94.44","0.12","105.88","8.03","1657.91","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1806, 8]}"
"postgres","optimized","steady",10,19,2,"update","91.99","0.12","108.71","8.14","1657.90","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1833, 8]}"
"postgres","optimized","steady",10,19,3,"update","87.55","0.08","114.22","8.63","1657.75","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1861, 8]}"
"postgres","optimized","steady",10,19,4,"update","96.70","0.11","103.41","7.77","1657.89","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1889, 8]}"
"postgres","optimized","steady",10,19,5,"update","98.13","0.08","101.90","7.67","1658.14","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1699, 11]}"
"postgres","optimized","steady",10,19,6,"update","95.07","0.10","105.19","7.79","1658.00","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1737, 11]}"
"postgres","optimized","steady",10,19,7,"update","89.18","0.08","112.13","8.46","1658.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1771, 11]}"
"postgres","optimized","steady",10,19,8,"update","91.74","0.08","109.00","8.25","1657.75","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1806, 11]}"
"postgres","optimized","steady",10,19,9,"update","92.27","0.08","108.38","8.19","1657.85","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1833, 11]}"
"postgres","optimized","steady",10,19,10,"update","92.23","0.08","108.42","8.34","1657.84","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1861, 11]}"
"postgres","optimized","warmup",10,20,1,"update","155.31","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,2,"update","149.68","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,3,"update","154.97","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,4,"update","142.09","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,5,"update","154.12","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,6,"update","141.36","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,7,"update","145.31","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,8,"update","151.00","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,9,"update","143.06","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,10,"update","147.07","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,20,1,"update","103.98","0.15","96.17","7.70","1658.71","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [112, ""fiebigbelinda@example.net.tmp""]}"
"postgres","optimized","steady",10,20,2,"update","98.43","0.11","101.60","8.13","1659.17","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [122, ""peter52@example.net.tmp""]}"
"postgres","optimized","steady",10,20,3,"update","100.97","0.11","99.04","7.72","1658.92","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [132, ""hkraushaar@example.com.tmp""]}"
"postgres","optimized","steady",10,20,4,"update","102.81","0.12","97.27","7.72","1658.76","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [142, ""mechtildpreiss@example.org.tmp""]}"
"postgres","optimized","steady",10,20,5,"update","95.73","0.11","104.46","8.24","1658.95","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""cloeffler@example.com.tmp""]}"
"postgres","optimized","steady",10,20,6,"update","91.90","0.13","108.82","8.80","1658.98","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [162, ""zschueler@example.net.tmp""]}"
"postgres","optimized","steady",10,20,7,"update","102.19","0.12","97.86","7.63","1658.56","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [172, ""corneliusreuter@example.com.tmp""]}"
"postgres","optimized","steady",10,20,8,"update","94.00","0.11","106.38","8.40","1659.25","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [182, ""herthastey@example.com.tmp""]}"
"postgres","optimized","steady",10,20,9,"update","89.34","0.11","111.93","8.77","1659.03","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [102, ""odaschulz@example.net.tmp.tmp""]}"
"postgres","optimized","steady",10,20,10,"update","95.63","0.11","104.57","8.38","1658.60","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [113, ""schweitzermilka@example.org.tmp.tmp""]}"
"postgres","optimized","warmup",10,21,1,"delete","150.58","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,2,"delete","137.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,3,"delete","152.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,4,"delete","148.50","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,5,"delete","150.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,6,"delete","138.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,7,"delete","153.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,8,"delete","148.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,9,"delete","143.51","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,10,"delete","150.68","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,21,1,"delete","90.00","0.04","111.12","8.28","1659.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,21,2,"delete","88.65","0.04","112.80","8.38","1659.35","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,21,3,"delete","90.29","0.04","110.75","8.81","1659.55","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,21,4,"delete","99.85","0.04","100.15","7.40","1659.35","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,21,5,"delete","94.33","0.04","106.01","8.31","1659.29","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,21,6,"delete","96.36","0.04","103.78","7.96","1659.58","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,21,7,"delete","96.64","0.04","103.48","7.98","1659.49","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,21,8,"delete","93.91","0.04","106.49","8.38","1659.19","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,21,9,"delete","101.11","0.07","98.90","7.51","1659.60","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,21,10,"delete","97.60","0.04","102.46","8.07","1659.78","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,22,1,"delete","152.56","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,2,"delete","154.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,3,"delete","142.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,4,"delete","150.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,5,"delete","143.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,6,"delete","150.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,7,"delete","153.56","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,8,"delete","146.11","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,9,"delete","151.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,10,"delete","137.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,22,1,"delete","87.22","0.03","114.66","8.40","1658.25","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,2,"delete","88.89","0.03","112.50","7.78","1657.38","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,3,"delete","90.98","0.03","109.92","7.68","1657.16","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,4,"delete","83.65","0.03","119.54","8.31","1657.36","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,5,"delete","90.10","0.03","110.99","7.64","1657.06","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,6,"delete","83.58","0.03","119.64","8.71","1657.40","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,7,"delete","82.72","0.03","120.89","8.56","1657.14","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,8,"delete","84.22","0.03","118.74","8.12","1657.12","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,9,"delete","80.65","0.03","123.99","8.62","1657.20","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,10,"delete","83.79","0.03","119.34","8.40","1657.28","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","warmup",10,23,1,"delete","150.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,2,"delete","149.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,3,"delete","150.21","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,4,"delete","149.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,5,"delete","155.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,6,"delete","150.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,7,"delete","162.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,8,"delete","141.17","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,9,"delete","152.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,10,"delete","150.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,23,1,"delete","96.86","0.07","103.24","7.66","1657.37","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,23,2,"delete","90.51","0.04","110.48","8.32","1657.43","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,23,3,"delete","89.71","0.04","111.47","8.40","1657.13","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,23,4,"delete","92.04","0.04","108.65","8.08","1657.35","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,23,5,"delete","95.91","0.04","104.26","7.85","1657.12","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,23,6,"delete","103.86","0.04","96.28","7.30","1657.31","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,23,7,"delete","96.75","0.04","103.36","7.95","1657.21","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,23,8,"delete","92.64","0.04","107.95","8.21","1657.41","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,23,9,"delete","89.50","0.04","111.73","8.59","1657.31","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,23,10,"delete","90.32","0.04","110.72","8.37","1657.67","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,24,1,"delete","154.11","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,2,"delete","150.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,3,"delete","151.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,4,"delete","142.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,5,"delete","152.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,6,"delete","150.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,7,"delete","152.40","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,8,"delete","146.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,9,"delete","154.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,10,"delete","139.72","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,24,1,"delete","97.19","0.04","102.89","8.13","1657.40","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,24,2,"delete","101.93","0.04","98.10","7.37","1657.35","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,24,3,"delete","103.45","0.04","96.67","7.37","1657.56","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,24,4,"delete","102.16","0.04","97.89","7.54","1657.36","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,24,5,"delete","98.64","0.04","101.38","7.73","1657.23","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,24,6,"delete","98.95","0.04","101.06","7.69","1657.46","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,24,7,"delete","102.55","0.05","97.51","7.38","1657.54","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,24,8,"delete","101.12","0.04","98.90","7.64","1657.14","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,24,9,"delete","102.74","0.04","97.33","7.41","1657.42","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,24,10,"delete","98.33","0.04","101.70","7.91","1657.71","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [371]}"
