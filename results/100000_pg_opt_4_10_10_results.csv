"db","mode","phase","concurrency","query_no","repeat","complexity","duration_ms","server_ms","qps","avg_cpu","avg_mem","disk_mb","statement","result"
"postgres","optimized","warmup",1,1,1,"simple","161.10","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,2,"simple","143.61","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,3,"simple","149.17","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,4,"simple","143.35","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,5,"simple","140.71","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,6,"simple","141.48","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,7,"simple","140.14","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,8,"simple","140.06","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,9,"simple","141.02","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,10,"simple","141.57","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,1,1,"simple","92.23","10.96","10.84","6.51","9281.76","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,2,"simple","94.47","10.92","10.59","10.36","9282.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,3,"simple","90.23","10.91","11.08","6.54","9282.26","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,4,"simple","90.81","10.92","11.01","6.53","9282.23","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,5,"simple","93.95","10.99","10.64","6.61","9281.89","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,6,"simple","92.32","10.93","10.83","6.63","9282.11","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,7,"simple","92.74","11.04","10.78","6.62","9281.94","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,8,"simple","93.60","10.99","10.68","6.41","9282.17","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,9,"simple","92.12","11.06","10.86","6.49","9282.28","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,1,10,"simple","95.88","11.04","10.43","6.48","9282.23","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",1,2,1,"simple","51.26","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,2,"simple","51.14","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,3,"simple","51.18","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,4,"simple","51.12","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,5,"simple","51.48","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,6,"simple","50.97","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,7,"simple","51.53","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,8,"simple","51.33","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,9,"simple","51.04","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,10,"simple","51.41","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,2,1,"simple","0.96","0.07","1039.61","280.88","9282.53","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,2,"simple","0.91","0.07","1097.69","291.72","9282.51","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,3,"simple","0.93","0.07","1072.04","295.80","9282.65","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,4,"simple","0.94","0.07","1066.55","288.98","9282.50","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,5,"simple","0.96","0.07","1041.23","283.40","9282.24","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,6,"simple","0.95","0.07","1049.87","280.42","9282.33","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,7,"simple","0.93","0.07","1073.08","293.69","9282.34","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,8,"simple","0.92","0.10","1088.85","293.07","9282.32","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,9,"simple","0.92","0.07","1084.36","279.94","9282.18","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,10,"simple","0.91","0.07","1104.61","288.09","9282.41","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",1,3,1,"simple","52.36","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,2,"simple","52.16","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,3,"simple","52.07","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,4,"simple","52.15","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,5,"simple","52.16","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,6,"simple","51.94","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,7,"simple","52.15","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,8,"simple","51.94","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,9,"simple","51.73","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,10,"simple","51.99","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,3,1,"simple","1.71","0.19","585.03","182.53","9282.44","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,2,"simple","1.72","0.21","579.91","156.07","9282.43","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,3,"simple","1.72","0.19","580.01","156.54","9282.71","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,4,"simple","1.69","0.19","593.37","158.93","9282.44","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,5,"simple","1.67","0.21","597.94","163.45","9282.61","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,6,"simple","1.76","0.19","567.63","153.33","9282.21","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,7,"simple","1.77","0.19","564.14","153.82","9282.81","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,8,"simple","1.70","0.20","587.72","158.57","9282.51","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,9,"simple","1.73","0.20","578.00","156.31","9282.62","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,10,"simple","1.78","0.21","561.77","150.91","9282.65","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Telse-Zahn-Weg 0"", ""Koblenz"", ""35769"", ""Deutschland"", true]}"
"postgres","optimized","warmup",1,4,1,"medium","55.18","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,2,"medium","53.73","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,3,"medium","53.47","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,4,"medium","53.45","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,5,"medium","53.44","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,6,"medium","53.42","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,7,"medium","53.78","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,8,"medium","53.49","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,9,"medium","53.70","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,10,"medium","53.55","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,4,1,"medium","3.25","0.47","307.98","86.33","9282.66","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,2,"medium","3.41","0.45","293.19","84.79","9282.57","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,3,"medium","3.23","0.49","309.37","84.61","9282.68","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,4,"medium","3.34","0.46","299.36","82.47","9282.78","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,5,"medium","3.18","0.45","314.89","89.14","9282.70","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,6,"medium","3.22","0.45","310.18","85.41","9283.16","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,7,"medium","3.38","0.46","296.25","82.30","9282.89","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,8,"medium","3.27","0.48","305.46","86.19","9282.60","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,9,"medium","3.37","0.47","297.05","80.68","9282.78","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",1,4,10,"medium","3.35","0.47","298.94","84.23","9282.97","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 47, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",1,5,1,"medium","109.26","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,2,"medium","92.25","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,3,"medium","94.93","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,4,"medium","96.18","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,5,"medium","95.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,6,"medium","91.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,7,"medium","92.61","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,8,"medium","90.67","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,9,"medium","95.95","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,10,"medium","90.97","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,5,1,"medium","41.39","46.28","24.16","18.33","9295.73","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,2,"medium","46.81","42.42","21.36","17.22","9295.97","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,3,"medium","43.28","41.50","23.10","17.69","9295.59","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,4,"medium","44.16","41.12","22.64","17.53","9295.88","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,5,"medium","44.12","42.67","22.67","18.40","9295.60","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,6,"medium","41.29","41.65","24.22","18.12","9295.66","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,7,"medium","45.84","41.35","21.82","17.33","9295.60","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,8,"medium","32.27","32.86","30.98","21.10","9306.81","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,9,"medium","41.89","41.29","23.87","17.99","9296.45","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",1,5,10,"medium","44.53","43.68","22.46","17.59","9295.59","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","warmup",1,6,1,"medium","55.68","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,2,"medium","54.93","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,3,"medium","54.76","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,4,"medium","54.72","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,5,"medium","54.69","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,6,"medium","54.70","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,7,"medium","54.69","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,8,"medium","54.93","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,9,"medium","54.61","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,10,"medium","54.95","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,6,1,"medium","4.49","4.54","222.68","67.00","9306.21","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,2,"medium","4.59","4.53","217.77","64.86","9305.90","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,3,"medium","4.48","4.55","223.25","64.95","9306.01","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,4,"medium","4.43","4.51","225.65","67.16","9306.12","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,5,"medium","4.51","4.54","221.65","66.42","9305.99","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,6,"medium","4.49","4.50","222.93","75.72","9305.96","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,7,"medium","4.41","4.57","226.88","67.35","9305.97","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,8,"medium","4.46","4.46","224.33","66.77","9306.03","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,9,"medium","4.42","4.43","226.29","65.77","9306.31","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",1,6,10,"medium","4.53","4.54","220.74","64.67","9306.27","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","warmup",1,7,1,"complex","56.57","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,2,"complex","52.68","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,3,"complex","52.28","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,4,"complex","52.38","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,5,"complex","52.36","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,6,"complex","52.28","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,7,"complex","52.67","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,8,"complex","52.41","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,9,"complex","52.63","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,10,"complex","52.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,7,1,"complex","2.19","0.78","457.00","127.72","9306.20","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,2,"complex","2.19","0.79","456.43","122.67","9306.15","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,3,"complex","2.19","0.79","455.73","126.94","9306.32","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,4,"complex","2.15","0.77","464.60","128.23","9306.23","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,5,"complex","2.17","0.78","460.72","125.95","9306.37","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,6,"complex","2.17","0.78","460.87","125.65","9306.23","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,7,"complex","2.10","0.83","475.38","130.65","9306.28","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,8,"complex","2.16","0.77","462.60","126.52","9306.36","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,9,"complex","2.38","0.77","419.41","114.16","9306.35","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",1,7,10,"complex","2.17","0.77","460.96","127.74","9306.40","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","warmup",1,8,1,"complex","132.29","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,2,"complex","129.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,3,"complex","128.65","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,4,"complex","127.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,5,"complex","128.52","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,6,"complex","128.78","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,7,"complex","128.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,8,"complex","128.22","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,9,"complex","127.22","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,10,"complex","128.29","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,8,1,"complex","77.57","94.09","12.89","41.76","9308.06","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,2,"complex","78.04","94.47","12.81","41.57","9308.10","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,3,"complex","76.62","93.45","13.05","41.72","9307.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,4,"complex","76.90","93.47","13.00","41.46","9307.75","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,5,"complex","76.81","94.82","13.02","41.70","9307.90","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,6,"complex","76.64","92.12","13.05","41.78","9307.48","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,7,"complex","77.18","93.21","12.96","41.80","9307.97","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,8,"complex","78.71","93.67","12.71","41.51","9307.85","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,9,"complex","78.56","94.75","12.73","41.85","9307.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,10,"complex","78.23","92.42","12.78","41.58","9307.65","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",1,9,1,"complex","52.76","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,2,"complex","51.91","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,3,"complex","51.99","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,4,"complex","51.98","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,5,"complex","51.64","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,6,"complex","51.85","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,7,"complex","51.80","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,8,"complex","51.87","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,9,"complex","52.00","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,10,"complex","51.54","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,9,1,"complex","1.53","0.51","651.47","178.77","9307.78","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,2,"complex","1.51","0.52","662.78","177.81","9307.82","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,3,"complex","1.47","0.51","678.43","182.59","9308.14","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,4,"complex","1.52","0.51","656.73","176.30","9308.06","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,5,"complex","1.49","0.50","670.24","185.04","9308.04","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,6,"complex","1.49","0.51","672.72","183.47","9307.71","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,7,"complex","1.50","0.50","667.33","183.26","9307.73","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,8,"complex","1.54","0.50","647.67","176.67","9307.91","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,9,"complex","1.55","0.50","644.12","175.58","9307.68","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","steady",1,9,10,"complex","1.49","0.50","669.12","184.93","9308.09","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [7, 1]}"
"postgres","optimized","warmup",1,10,1,"very_complex","287.19","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,2,"very_complex","256.34","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,3,"very_complex","267.69","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,4,"very_complex","281.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,5,"very_complex","263.27","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,6,"very_complex","267.53","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,7,"very_complex","275.95","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,8,"very_complex","269.69","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,9,"very_complex","264.72","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,10,"very_complex","275.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,10,1,"very_complex","203.60","259.14","4.91","9.63","9307.15","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,2,"very_complex","221.38","245.51","4.52","9.52","9302.94","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,3,"very_complex","209.47","249.29","4.77","9.58","9303.01","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,4,"very_complex","207.85","268.28","4.81","9.58","9302.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,5,"very_complex","212.57","246.74","4.70","9.54","9302.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,6,"very_complex","226.83","251.65","4.41","9.47","9303.10","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,7,"very_complex","222.26","250.25","4.50","9.53","9303.06","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,8,"very_complex","223.49","247.70","4.47","9.67","9302.89","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,9,"very_complex","225.60","243.67","4.43","9.50","9302.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,10,10,"very_complex","208.12","254.04","4.80","9.61","9302.96","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",1,11,1,"very_complex","479.96","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,2,"very_complex","487.27","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,3,"very_complex","484.68","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,4,"very_complex","504.07","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,5,"very_complex","496.64","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,6,"very_complex","483.02","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,7,"very_complex","495.10","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,8,"very_complex","498.34","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,9,"very_complex","491.27","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,10,"very_complex","492.82","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,11,1,"very_complex","438.52","529.08","2.28","8.93","9302.01","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,2,"very_complex","440.75","523.57","2.27","8.92","9302.22","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,3,"very_complex","458.70","533.78","2.18","8.91","9301.88","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,4,"very_complex","445.60","529.63","2.24","8.93","9301.70","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,5,"very_complex","436.04","535.59","2.29","8.94","9301.58","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,6,"very_complex","432.85","531.96","2.31","8.93","9301.94","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,7,"very_complex","431.51","535.61","2.32","8.94","9301.99","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,8,"very_complex","438.97","537.49","2.28","8.93","9302.18","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,9,"very_complex","437.66","530.38","2.28","8.94","9301.87","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",1,11,10,"very_complex","429.71","531.71","2.33","8.94","9302.14","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","warmup",1,12,1,"very_complex","274.69","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,2,"very_complex","270.61","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,3,"very_complex","269.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,4,"very_complex","270.83","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,5,"very_complex","271.33","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,6,"very_complex","268.00","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,7,"very_complex","272.52","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,8,"very_complex","267.83","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,9,"very_complex","271.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,10,"very_complex","269.07","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,12,1,"very_complex","214.15","245.84","4.67","9.54","9298.75","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,2,"very_complex","212.23","244.72","4.71","9.56","9302.82","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,3,"very_complex","211.72","260.48","4.72","9.60","9302.79","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,4,"very_complex","222.06","262.45","4.50","9.51","9302.90","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,5,"very_complex","220.21","265.18","4.54","9.52","9303.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,6,"very_complex","222.29","252.99","4.50","9.52","9302.74","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,7,"very_complex","223.85","259.27","4.47","9.50","9302.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,8,"very_complex","226.27","250.96","4.42","9.52","9302.87","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,9,"very_complex","223.24","250.64","4.48","9.52","9302.88","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",1,12,10,"very_complex","210.45","255.15","4.75","9.54","9302.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",1,13,1,"create","55.16","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,2,"create","54.24","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,3,"create","54.06","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,4,"create","54.37","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,5,"create","54.30","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,6,"create","54.40","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,7,"create","54.27","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,8,"create","54.00","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,9,"create","51.98","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,10,"create","51.69","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,13,1,"create","1.71","0.17","586.41","156.26","9307.13","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134961]}"
"postgres","optimized","steady",1,13,2,"create","1.84","0.10","542.51","144.37","9307.22","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134963]}"
"postgres","optimized","steady",1,13,3,"create","1.78","0.11","562.97","149.74","9306.79","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134965]}"
"postgres","optimized","steady",1,13,4,"create","1.60","0.10","623.17","165.39","9307.11","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134967]}"
"postgres","optimized","steady",1,13,5,"create","1.64","0.11","610.13","167.67","9306.87","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134969]}"
"postgres","optimized","steady",1,13,6,"create","1.60","0.10","626.61","169.03","9307.04","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134971]}"
"postgres","optimized","steady",1,13,7,"create","1.76","0.11","568.57","156.73","9306.83","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134973]}"
"postgres","optimized","steady",1,13,8,"create","1.54","0.14","649.77","174.73","9306.96","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134975]}"
"postgres","optimized","steady",1,13,9,"create","1.61","0.11","620.35","165.20","9307.25","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134977]}"
"postgres","optimized","steady",1,13,10,"create","1.66","0.10","603.21","160.75","9306.72","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [134979]}"
"postgres","optimized","warmup",1,14,1,"create","52.17","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,2,"create","51.98","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,3,"create","52.30","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,4,"create","52.00","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,5,"create","52.19","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,6,"create","52.21","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,7,"create","52.15","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,8,"create","52.07","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,9,"create","51.80","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,10,"create","51.80","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,14,1,"create","1.58","0.11","633.91","167.33","9306.94","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200412]}"
"postgres","optimized","steady",1,14,2,"create","1.69","0.10","592.49","155.87","9307.30","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200414]}"
"postgres","optimized","steady",1,14,3,"create","1.68","0.12","595.63","155.43","9307.21","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200416]}"
"postgres","optimized","steady",1,14,4,"create","1.59","0.10","627.31","166.00","9307.21","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200418]}"
"postgres","optimized","steady",1,14,5,"create","1.69","0.12","591.26","157.25","9307.18","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200420]}"
"postgres","optimized","steady",1,14,6,"create","1.52","0.10","657.68","176.45","9306.96","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200422]}"
"postgres","optimized","steady",1,14,7,"create","1.64","0.10","609.57","164.96","9307.00","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200424]}"
"postgres","optimized","steady",1,14,8,"create","1.67","0.10","597.51","158.34","9306.89","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200426]}"
"postgres","optimized","steady",1,14,9,"create","1.71","0.10","584.56","155.39","9306.80","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200428]}"
"postgres","optimized","steady",1,14,10,"create","1.76","0.22","568.25","155.12","9307.07","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200430]}"
"postgres","optimized","warmup",1,15,1,"create","52.60","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,2,"create","52.00","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,3,"create","52.05","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,4,"create","52.23","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,5,"create","52.18","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,6,"create","51.79","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,7,"create","51.90","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,8,"create","52.09","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,9,"create","51.99","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,10,"create","52.10","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,15,1,"create","1.66","0.13","600.64","183.89","9307.18","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149587]}"
"postgres","optimized","steady",1,15,2,"create","1.71","0.12","585.62","164.20","9307.40","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149589]}"
"postgres","optimized","steady",1,15,3,"create","1.70","0.15","588.62","162.16","9307.28","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149591]}"
"postgres","optimized","steady",1,15,4,"create","1.74","0.12","574.02","154.59","9307.32","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149593]}"
"postgres","optimized","steady",1,15,5,"create","1.72","0.17","582.51","159.68","9307.44","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149595]}"
"postgres","optimized","steady",1,15,6,"create","1.80","0.12","555.28","151.48","9307.09","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149597]}"
"postgres","optimized","steady",1,15,7,"create","1.71","0.27","583.43","160.49","9307.30","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149599]}"
"postgres","optimized","steady",1,15,8,"create","1.87","0.12","536.11","144.61","9307.35","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149601]}"
"postgres","optimized","steady",1,15,9,"create","1.67","0.12","598.16","165.90","9307.42","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149603]}"
"postgres","optimized","steady",1,15,10,"create","1.62","0.15","618.05","166.20","9307.01","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149605]}"
"postgres","optimized","warmup",1,16,1,"create","52.58","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,2,"create","52.04","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,3,"create","51.82","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,4,"create","51.75","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,5,"create","51.93","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,6,"create","51.95","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,7,"create","51.92","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,8,"create","52.11","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,9,"create","52.00","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,10,"create","52.08","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,16,1,"create","1.74","0.12","573.43","156.08","9307.21","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050194]}"
"postgres","optimized","steady",1,16,2,"create","1.82","0.13","550.63","153.53","9307.30","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050196]}"
"postgres","optimized","steady",1,16,3,"create","1.86","0.14","538.76","147.50","9307.33","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050198]}"
"postgres","optimized","steady",1,16,4,"create","1.78","0.14","560.88","152.01","9307.48","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050200]}"
"postgres","optimized","steady",1,16,5,"create","1.64","0.15","611.51","171.71","9307.39","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050202]}"
"postgres","optimized","steady",1,16,6,"create","1.59","0.12","629.09","175.83","9307.57","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050204]}"
"postgres","optimized","steady",1,16,7,"create","1.54","0.14","648.30","178.43","9307.41","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050206]}"
"postgres","optimized","steady",1,16,8,"create","1.67","0.12","599.59","170.98","9307.64","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050208]}"
"postgres","optimized","steady",1,16,9,"create","1.64","0.12","609.01","168.69","9307.67","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050210]}"
"postgres","optimized","steady",1,16,10,"create","1.71","0.13","585.99","161.75","9307.21","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050212]}"
"postgres","optimized","warmup",1,17,1,"update","55.09","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,2,"update","52.17","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,3,"update","51.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,4,"update","51.92","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,5,"update","51.95","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,6,"update","51.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,7,"update","52.09","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,8,"update","51.86","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,9,"update","52.07","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,10,"update","51.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,17,1,"update","1.50","0.08","665.91","182.60","9307.16","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [11, 81]}"
"postgres","optimized","steady",1,17,2,"update","1.59","0.08","629.60","171.77","9307.40","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [12, 18]}"
"postgres","optimized","steady",1,17,3,"update","1.59","0.08","629.49","176.83","9307.28","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [13, 91]}"
"postgres","optimized","steady",1,17,4,"update","1.52","0.08","656.30","183.98","9307.36","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [14, 54]}"
"postgres","optimized","steady",1,17,5,"update","3.63","0.08","275.23","77.15","9307.26","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [15, 86]}"
"postgres","optimized","steady",1,17,6,"update","1.64","0.08","609.27","160.66","9307.42","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [16, 29]}"
"postgres","optimized","steady",1,17,7,"update","1.57","0.08","638.04","169.53","9307.72","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [17, 34]}"
"postgres","optimized","steady",1,17,8,"update","1.35","0.08","739.70","203.04","9307.62","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [18, 74]}"
"postgres","optimized","steady",1,17,9,"update","1.67","0.08","599.09","163.89","9307.34","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [19, 15]}"
"postgres","optimized","steady",1,17,10,"update","1.47","0.11","680.04","181.71","9307.31","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [20, 49]}"
"postgres","optimized","warmup",1,18,1,"update","51.90","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,2,"update","52.10","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,3,"update","54.00","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,4,"update","52.19","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,5,"update","52.08","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,6,"update","51.84","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,7,"update","52.04","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,8,"update","51.95","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,9,"update","51.80","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,10,"update","51.82","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,18,1,"update","1.73","0.10","577.90","155.64","9307.50","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [11, 1]}"
"postgres","optimized","steady",1,18,2,"update","1.66","0.13","601.87","164.14","9307.52","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [12, 3]}"
"postgres","optimized","steady",1,18,3,"update","1.73","0.13","576.40","157.21","9307.78","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [13, 3]}"
"postgres","optimized","steady",1,18,4,"update","1.60","0.12","626.29","170.40","9307.53","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [14, 1]}"
"postgres","optimized","steady",1,18,5,"update","1.67","0.10","597.80","161.13","9307.87","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [15, 4]}"
"postgres","optimized","steady",1,18,6,"update","1.78","0.11","561.86","152.70","9308.06","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [16, 3]}"
"postgres","optimized","steady",1,18,7,"update","1.59","0.12","629.29","198.45","9307.71","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [17, 1]}"
"postgres","optimized","steady",1,18,8,"update","1.63","0.08","614.21","167.50","9308.40","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [18, 3]}"
"postgres","optimized","steady",1,18,9,"update","1.68","0.10","596.41","159.02","9308.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [19, 1]}"
"postgres","optimized","steady",1,18,10,"update","1.68","0.10","595.81","164.01","9307.67","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [20, 1]}"
"postgres","optimized","warmup",1,19,1,"update","51.83","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,2,"update","51.92","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,3,"update","51.67","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,4,"update","52.02","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,5,"update","51.94","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,6,"update","52.10","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,7,"update","51.81","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,8,"update","51.75","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,9,"update","52.17","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,10,"update","52.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,19,1,"update","1.74","0.17","575.47","155.18","9307.79","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [11, 5]}"
"postgres","optimized","steady",1,19,2,"update","1.62","0.11","616.03","166.82","9307.67","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [12, 5]}"
"postgres","optimized","steady",1,19,3,"update","1.69","0.10","592.49","158.43","9307.81","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [13, 5]}"
"postgres","optimized","steady",1,19,4,"update","1.43","0.10","699.74","193.12","9308.07","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [14, 4]}"
"postgres","optimized","steady",1,19,5,"update","1.65","0.13","606.54","162.13","9307.79","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [15, 5]}"
"postgres","optimized","steady",1,19,6,"update","1.51","0.12","662.43","181.05","9307.85","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [16, 5]}"
"postgres","optimized","steady",1,19,7,"update","1.58","0.10","633.83","169.14","9308.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [17, 4]}"
"postgres","optimized","steady",1,19,8,"update","1.69","0.11","592.17","157.28","9307.94","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [18, 5]}"
"postgres","optimized","steady",1,19,9,"update","1.67","0.17","599.13","160.64","9307.86","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [19, 4]}"
"postgres","optimized","steady",1,19,10,"update","1.65","0.15","604.45","164.06","9308.20","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [20, 4]}"
"postgres","optimized","warmup",1,20,1,"update","52.19","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,2,"update","52.27","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,3,"update","52.03","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,4,"update","51.87","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,5,"update","52.25","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,6,"update","52.37","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,7,"update","51.76","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,8,"update","52.13","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,9,"update","52.03","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,10,"update","51.90","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,20,1,"update","1.70","0.20","587.58","161.31","9308.59","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [11, ""hhaenel@example.net.tmp""]}"
"postgres","optimized","steady",1,20,2,"update","1.66","0.18","603.32","162.54","9308.58","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [12, ""foersternikolaus@example.com.tmp""]}"
"postgres","optimized","steady",1,20,3,"update","1.66","0.22","603.65","165.79","9308.33","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [13, ""ester52@example.com.tmp""]}"
"postgres","optimized","steady",1,20,4,"update","1.71","0.15","585.17","162.20","9308.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [14, ""kochrobert@example.org.tmp""]}"
"postgres","optimized","steady",1,20,5,"update","1.77","0.14","565.77","159.46","9308.20","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [15, ""volker31@example.com.tmp""]}"
"postgres","optimized","steady",1,20,6,"update","1.68","0.13","596.62","165.55","9308.26","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [16, ""rhuhn@example.org.tmp""]}"
"postgres","optimized","steady",1,20,7,"update","1.68","0.22","596.69","170.67","9308.56","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [17, ""handefranz@example.net.tmp""]}"
"postgres","optimized","steady",1,20,8,"update","1.68","0.19","595.59","161.57","9308.36","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [18, ""fliegnerfrieder@example.com.tmp""]}"
"postgres","optimized","steady",1,20,9,"update","1.72","0.13","580.89","160.12","9308.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [19, ""meral73@example.net.tmp""]}"
"postgres","optimized","steady",1,20,10,"update","1.72","0.25","580.82","159.33","9308.45","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [20, ""hans-rudolfkuehnert@example.com.tmp""]}"
"postgres","optimized","warmup",1,21,1,"delete","52.59","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,2,"delete","52.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,3,"delete","51.81","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,4,"delete","51.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,5,"delete","52.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,6,"delete","52.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,7,"delete","51.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,8,"delete","51.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,9,"delete","52.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,10,"delete","51.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,21,1,"delete","1.66","0.05","602.92","161.59","9309.64","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,21,2,"delete","1.67","0.04","600.28","160.98","9309.70","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,21,3,"delete","1.64","0.04","611.32","168.27","9309.38","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,21,4,"delete","1.52","0.04","657.51","177.75","9309.42","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,21,5,"delete","3.93","0.08","254.58","68.89","9309.54","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,21,6,"delete","1.65","0.04","607.79","164.63","9309.39","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,21,7,"delete","1.84","0.04","543.54","147.47","9309.52","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,21,8,"delete","1.64","0.06","609.87","165.63","9309.38","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,21,9,"delete","1.69","0.04","593.12","158.78","9309.39","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,21,10,"delete","1.70","0.04","588.24","156.89","9309.85","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,22,1,"delete","54.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,2,"delete","52.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,3,"delete","52.06","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,4,"delete","52.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,5,"delete","51.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,6,"delete","51.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,7,"delete","51.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,8,"delete","52.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,9,"delete","52.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,10,"delete","52.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,22,1,"delete","1.68","0.04","593.82","159.78","9309.77","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,22,2,"delete","1.69","0.04","590.63","158.27","9309.85","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,22,3,"delete","2.14","0.04","468.03","128.98","9309.38","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,22,4,"delete","2.12","0.04","471.10","125.94","9309.38","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,22,5,"delete","2.30","0.04","434.24","114.21","9309.65","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,22,6,"delete","1.54","0.04","648.59","175.71","9309.54","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,22,7,"delete","2.15","0.04","464.53","125.57","9309.22","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,22,8,"delete","2.10","0.04","475.35","127.31","9309.54","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,22,9,"delete","1.62","0.04","615.38","164.49","9309.57","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,22,10,"delete","1.99","0.04","503.27","135.34","9309.37","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,23,1,"delete","51.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,2,"delete","51.95","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,3,"delete","51.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,4,"delete","52.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,5,"delete","51.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,6,"delete","51.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,7,"delete","52.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,8,"delete","52.06","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,9,"delete","52.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,10,"delete","52.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,23,1,"delete","2.02","0.04","494.39","152.16","9309.58","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,23,2,"delete","2.06","0.04","486.48","130.67","9309.80","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,23,3,"delete","1.60","0.04","626.72","166.14","9309.45","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,23,4,"delete","2.27","0.04","441.21","118.09","9309.45","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,23,5,"delete","1.82","0.04","548.58","146.69","9309.70","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,23,6,"delete","2.11","0.04","472.95","125.81","9309.60","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,23,7,"delete","2.12","0.05","472.46","129.84","9309.23","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,23,8,"delete","2.22","0.04","449.78","122.97","9309.31","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,23,9,"delete","1.85","0.04","541.71","142.80","9309.57","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,23,10,"delete","2.05","0.04","487.26","129.87","9309.74","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,24,1,"delete","52.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,2,"delete","52.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,3,"delete","52.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,4,"delete","52.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,5,"delete","51.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,6,"delete","52.12","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,7,"delete","51.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,8,"delete","52.43","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,9,"delete","51.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,10,"delete","52.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,24,1,"delete","2.09","0.04","479.46","129.68","9309.66","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,24,2,"delete","2.20","0.04","455.50","131.92","9309.46","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,24,3,"delete","1.79","0.04","557.60","169.35","9309.73","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,24,4,"delete","1.62","0.04","616.29","164.67","9309.51","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,24,5,"delete","2.10","0.04","475.56","129.39","9309.92","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,24,6,"delete","1.65","0.04","607.75","170.16","9309.78","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,24,7,"delete","2.21","0.04","453.06","126.42","9309.54","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,24,8,"delete","1.98","0.04","506.05","142.30","9309.75","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,24,9,"delete","2.08","0.04","479.96","132.08","9309.88","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,24,10,"delete","2.33","0.04","429.24","118.64","9309.69","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",3,1,1,"simple","264.79","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,2,"simple","264.71","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,3,"simple","265.60","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,4,"simple","263.96","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,5,"simple","259.05","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,6,"simple","261.15","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,7,"simple","262.15","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,8,"simple","257.63","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,9,"simple","258.91","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,10,"simple","261.52","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,1,1,"simple","206.36","10.99","14.54","7.80","9283.99","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,2,"simple","210.05","10.94","14.28","7.96","9284.46","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,3,"simple","235.29","10.96","12.75","6.74","9284.30","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,4,"simple","210.33","11.03","14.26","7.89","9284.22","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,5,"simple","211.75","10.98","14.17","8.10","9284.32","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,6,"simple","204.06","11.04","14.70","7.71","9284.29","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,7,"simple","205.89","11.06","14.57","7.87","9284.39","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,8,"simple","204.09","10.99","14.70","7.66","9284.31","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,9,"simple","207.33","10.96","14.47","7.86","9284.26","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,1,10,"simple","211.46","10.94","14.19","7.94","9284.13","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",3,2,1,"simple","96.89","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,2,"simple","73.75","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,3,"simple","73.55","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,4,"simple","73.50","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,5,"simple","73.55","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,6,"simple","73.33","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,7,"simple","73.48","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,8,"simple","73.70","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,9,"simple","73.20","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,10,"simple","72.55","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,2,1,"simple","23.47","0.07","127.84","15.27","9284.00","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,2,"simple","23.06","0.08","130.07","16.14","9284.28","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,3,"simple","23.37","0.07","128.38","15.67","9284.37","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,4,"simple","23.07","0.07","130.03","15.68","9284.09","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,5,"simple","23.45","0.07","127.91","15.38","9284.57","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,6,"simple","22.88","0.07","131.14","15.85","9284.31","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,7,"simple","23.16","0.07","129.56","15.40","9284.23","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,8,"simple","22.79","0.07","131.61","15.60","9284.25","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,9,"simple","23.10","0.07","129.87","15.44","9284.32","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,10,"simple","22.31","0.07","134.44","16.50","9284.21","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",3,3,1,"simple","75.34","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,2,"simple","75.66","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,3,"simple","74.28","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,4,"simple","74.97","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,5,"simple","84.73","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,6,"simple","72.32","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,7,"simple","75.58","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,8,"simple","73.77","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,9,"simple","75.78","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,10,"simple","74.62","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,3,1,"simple","24.09","0.19","124.55","15.80","9284.27","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,2,"simple","24.88","0.21","120.59","14.96","9284.38","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,3,"simple","24.30","0.21","123.46","15.44","9283.94","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,4,"simple","43.35","0.19","69.21","8.73","9284.51","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,5,"simple","24.89","0.19","120.51","15.54","9284.31","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,6,"simple","24.78","0.19","121.05","15.10","9284.71","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,7,"simple","24.28","0.20","123.54","15.29","9284.06","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,8,"simple","23.82","0.19","125.94","16.13","9284.48","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,9,"simple","24.29","0.19","123.49","15.39","9284.17","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,10,"simple","23.69","0.19","126.63","16.02","9284.17","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 16, ""Giuseppe-Beier-Platz 529"", ""Neuss"", ""79453"", ""Deutschland"", false]}"
"postgres","optimized","warmup",3,4,1,"medium","77.13","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,2,"medium","76.71","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,3,"medium","76.42","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,4,"medium","76.44","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,5,"medium","77.52","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,6,"medium","76.74","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,7,"medium","77.00","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,8,"medium","77.40","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,9,"medium","76.62","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,10,"medium","77.14","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,4,1,"medium","26.01","0.49","115.33","15.84","9284.46","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,2,"medium","27.01","0.45","111.06","15.67","9284.74","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,3,"medium","26.26","0.45","114.26","15.81","9284.46","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,4,"medium","27.28","0.46","109.97","15.68","9285.14","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,5,"medium","26.77","0.45","112.09","16.18","9284.55","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,6,"medium","27.22","0.46","110.21","17.02","9284.69","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,7,"medium","27.16","0.48","110.46","16.20","9284.80","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,8,"medium","26.33","0.48","113.92","15.98","9284.41","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,9,"medium","26.23","0.47","114.37","15.96","9284.75","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",3,4,10,"medium","26.96","0.48","111.27","15.63","9284.67","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",3,5,1,"medium","123.37","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,2,"medium","123.27","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,3,"medium","120.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,4,"medium","124.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,5,"medium","123.99","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,6,"medium","122.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,7,"medium","125.94","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,8,"medium","123.66","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,9,"medium","120.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,10,"medium","122.32","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,5,1,"medium","70.44","41.20","42.59","29.80","9297.37","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,2,"medium","68.86","41.40","43.57","29.78","9297.54","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,3,"medium","72.21","41.31","41.55","30.10","9297.52","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,4,"medium","72.38","41.17","41.45","29.87","9297.34","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,5,"medium","68.18","41.40","44.00","29.99","9297.82","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,6,"medium","72.26","41.88","41.52","30.19","9297.50","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,7,"medium","71.32","41.92","42.06","30.12","9297.58","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,8,"medium","69.16","41.73","43.38","29.46","9297.79","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,9,"medium","74.84","41.51","40.09","28.00","9297.72","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",3,5,10,"medium","71.39","41.72","42.02","30.04","9297.75","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","warmup",3,6,1,"medium","77.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,2,"medium","77.68","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,3,"medium","77.16","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,4,"medium","78.13","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,5,"medium","77.34","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,6,"medium","77.88","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,7,"medium","76.75","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,8,"medium","77.85","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,9,"medium","77.56","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,10,"medium","77.54","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,6,1,"medium","26.86","4.54","111.71","16.93","9308.12","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,2,"medium","27.66","4.53","108.44","16.89","9307.86","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,3,"medium","26.83","4.47","111.80","17.16","9308.02","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,4,"medium","39.13","4.56","76.67","11.75","9308.09","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,5,"medium","27.15","4.53","110.51","17.10","9308.12","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,6,"medium","27.35","4.51","109.71","16.61","9308.05","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,7,"medium","27.05","4.52","110.89","17.03","9307.90","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,8,"medium","27.63","4.56","108.59","16.71","9307.98","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,9,"medium","27.06","4.50","110.88","16.94","9308.10","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",3,6,10,"medium","27.36","4.54","109.64","16.80","9307.79","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","warmup",3,7,1,"complex","75.54","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,2,"complex","75.23","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,3,"complex","75.71","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,4,"complex","75.76","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,5,"complex","75.79","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,6,"complex","75.56","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,7,"complex","75.61","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,8,"complex","75.16","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,9,"complex","75.84","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,10,"complex","76.27","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,7,1,"complex","24.94","0.79","120.31","16.12","9307.91","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,2,"complex","25.77","0.78","116.41","15.83","9308.05","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,3,"complex","24.76","0.79","121.17","16.24","9307.90","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,4,"complex","25.06","0.77","119.71","15.67","9308.08","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,5,"complex","25.00","0.80","120.01","15.94","9307.88","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,6,"complex","25.33","0.80","118.43","16.11","9308.01","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,7,"complex","25.08","0.77","119.60","15.78","9308.17","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,8,"complex","25.10","0.76","119.51","15.62","9308.03","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,9,"complex","25.09","0.80","119.55","15.81","9307.98","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",3,7,10,"complex","25.42","0.78","118.02","15.95","9307.98","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","warmup",3,8,1,"complex","192.90","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,2,"complex","193.81","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,3,"complex","183.09","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,4,"complex","187.26","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,5,"complex","176.33","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,6,"complex","191.50","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,7,"complex","194.39","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,8,"complex","199.08","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,9,"complex","188.80","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,10,"complex","195.67","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,8,1,"complex","147.70","97.71","20.31","75.66","9287.87","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,2,"complex","143.15","98.06","20.96","76.24","9289.05","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,3,"complex","147.54","96.90","20.33","73.39","9289.10","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,4,"complex","144.77","96.21","20.72","75.08","9289.36","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,5,"complex","132.48","98.03","22.65","82.65","9289.25","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,6,"complex","161.24","96.36","18.61","67.58","9289.33","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,7,"complex","144.37","98.62","20.78","74.41","9289.34","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,8,"complex","136.81","94.37","21.93","74.87","9289.21","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,9,"complex","142.06","95.39","21.12","72.07","9289.20","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,10,"complex","143.75","95.87","20.87","71.71","9289.17","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",3,9,1,"complex","74.98","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,2,"complex","76.82","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,3,"complex","74.88","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,4,"complex","74.97","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,5,"complex","75.16","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,6,"complex","75.08","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,7,"complex","74.88","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,8,"complex","74.83","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,9,"complex","74.79","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,10,"complex","74.74","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,9,1,"complex","24.09","0.53","124.55","16.33","9289.29","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,2,"complex","26.00","0.53","115.38","15.82","9289.47","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,3,"complex","24.60","0.51","121.97","15.96","9289.21","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,4,"complex","24.30","0.52","123.45","15.96","9289.34","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,5,"complex","24.28","0.51","123.56","16.07","9289.30","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,6,"complex","25.16","0.54","119.23","15.72","9289.25","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,7,"complex","24.11","0.51","124.44","16.12","9289.73","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,8,"complex","24.54","0.51","122.27","15.84","9289.57","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,9,"complex","23.98","0.55","125.12","16.17","9289.23","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,10,"complex","24.29","0.51","123.52","15.87","9289.13","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","warmup",3,10,1,"very_complex","337.12","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,2,"very_complex","320.62","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,3,"very_complex","336.64","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,4,"very_complex","326.52","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,5,"very_complex","317.40","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,6,"very_complex","343.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,7,"very_complex","319.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,8,"very_complex","319.61","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,9,"very_complex","345.62","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,10,"very_complex","320.32","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,10,1,"very_complex","266.46","242.93","11.26","23.54","9309.02","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,2,"very_complex","271.83","247.66","11.04","23.63","9308.80","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,3,"very_complex","288.50","242.55","10.40","23.76","9309.16","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,4,"very_complex","277.87","244.87","10.80","24.10","9309.26","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,5,"very_complex","279.94","247.93","10.72","24.06","9309.07","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,6,"very_complex","280.59","243.34","10.69","24.02","9308.88","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,7,"very_complex","280.53","240.11","10.69","24.11","9309.27","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,8,"very_complex","268.26","243.52","11.18","23.36","9309.39","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,9,"very_complex","282.88","243.33","10.61","23.76","9309.06","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,10,10,"very_complex","281.10","254.41","10.67","24.01","9309.11","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",3,11,1,"very_complex","550.71","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,2,"very_complex","568.76","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,3,"very_complex","556.36","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,4,"very_complex","536.58","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,5,"very_complex","551.22","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,6,"very_complex","537.69","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,7,"very_complex","553.50","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,8,"very_complex","536.61","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,9,"very_complex","567.57","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,10,"very_complex","534.41","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,11,1,"very_complex","521.89","550.69","5.75","24.58","9303.90","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,2,"very_complex","511.38","555.72","5.87","24.73","9303.76","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,3,"very_complex","509.29","555.76","5.89","24.64","9303.85","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,4,"very_complex","508.35","560.71","5.90","24.94","9304.30","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,5,"very_complex","511.43","559.32","5.87","24.90","9303.94","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,6,"very_complex","497.88","535.18","6.03","24.77","9304.18","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,7,"very_complex","495.78","540.47","6.05","24.84","9303.84","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,8,"very_complex","509.39","524.63","5.89","25.18","9303.95","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,9,"very_complex","497.43","525.35","6.03","24.62","9308.31","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",3,11,10,"very_complex","510.55","529.42","5.88","24.39","9308.37","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","warmup",3,12,1,"very_complex","328.36","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,2,"very_complex","342.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,3,"very_complex","325.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,4,"very_complex","323.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,5,"very_complex","324.54","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,6,"very_complex","320.37","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,7,"very_complex","328.16","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,8,"very_complex","316.14","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,9,"very_complex","320.09","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,10,"very_complex","335.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,12,1,"very_complex","267.81","241.97","11.20","23.73","9305.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,2,"very_complex","275.99","247.09","10.87","23.78","9301.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,3,"very_complex","283.40","244.78","10.59","23.85","9301.90","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,4,"very_complex","273.74","245.79","10.96","23.91","9302.24","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,5,"very_complex","279.09","266.66","10.75","23.57","9301.69","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,6,"very_complex","290.43","246.23","10.33","23.27","9301.66","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,7,"very_complex","276.78","248.17","10.84","23.74","9302.01","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,8,"very_complex","274.25","247.67","10.94","24.15","9302.30","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,9,"very_complex","270.63","253.10","11.09","23.47","9301.87","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",3,12,10,"very_complex","278.37","250.06","10.78","23.74","9302.11","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",3,13,1,"create","74.58","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,2,"create","74.35","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,3,"create","74.63","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,4,"create","75.49","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,5,"create","74.45","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,6,"create","74.92","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,7,"create","76.48","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,8,"create","74.31","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,9,"create","75.08","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,10,"create","73.83","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,13,1,"create","23.94","0.12","125.34","15.60","9305.81","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135011]}"
"postgres","optimized","steady",3,13,2,"create","24.46","0.11","122.67","15.38","9305.91","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135015]}"
"postgres","optimized","steady",3,13,3,"create","24.74","0.13","121.26","15.49","9306.07","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135019]}"
"postgres","optimized","steady",3,13,4,"create","24.18","0.11","124.07","15.28","9306.16","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135023]}"
"postgres","optimized","steady",3,13,5,"create","24.09","0.12","124.55","15.81","9305.84","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135027]}"
"postgres","optimized","steady",3,13,6,"create","25.14","0.11","119.34","15.19","9306.19","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135031]}"
"postgres","optimized","steady",3,13,7,"create","23.80","0.11","126.03","15.51","9305.90","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135035]}"
"postgres","optimized","steady",3,13,8,"create","25.82","0.10","116.20","14.66","9305.94","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135039]}"
"postgres","optimized","steady",3,13,9,"create","23.90","0.17","125.54","15.33","9305.91","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135043]}"
"postgres","optimized","steady",3,13,10,"create","24.24","0.11","123.75","15.32","9306.13","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135047]}"
"postgres","optimized","warmup",3,14,1,"create","74.62","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,2,"create","74.58","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,3,"create","74.31","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,4,"create","76.80","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,5,"create","75.65","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,6,"create","75.75","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,7,"create","74.37","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,8,"create","74.28","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,9,"create","75.08","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,10,"create","74.25","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,14,1,"create","25.41","0.11","118.06","15.78","9306.21","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200462]}"
"postgres","optimized","steady",3,14,2,"create","25.53","0.10","117.51","15.12","9306.22","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200466]}"
"postgres","optimized","steady",3,14,3,"create","24.88","0.10","120.59","15.37","9306.09","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200470]}"
"postgres","optimized","steady",3,14,4,"create","25.16","0.10","119.24","15.47","9306.08","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200474]}"
"postgres","optimized","steady",3,14,5,"create","25.06","0.12","119.73","15.50","9306.48","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200478]}"
"postgres","optimized","steady",3,14,6,"create","24.78","0.18","121.06","15.47","9306.32","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200482]}"
"postgres","optimized","steady",3,14,7,"create","43.24","0.10","69.38","9.08","9306.30","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200486]}"
"postgres","optimized","steady",3,14,8,"create","24.59","0.10","121.99","15.77","9306.00","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200490]}"
"postgres","optimized","steady",3,14,9,"create","25.02","0.10","119.92","15.38","9306.26","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200494]}"
"postgres","optimized","steady",3,14,10,"create","23.93","0.12","125.35","15.71","9306.48","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200498]}"
"postgres","optimized","warmup",3,15,1,"create","75.25","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,2,"create","74.46","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,3,"create","75.78","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,4,"create","75.32","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,5,"create","75.31","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,6,"create","76.30","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,7,"create","75.13","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,8,"create","74.92","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,9,"create","74.81","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,10,"create","73.73","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,15,1,"create","24.55","0.13","122.22","15.55","9306.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149637]}"
"postgres","optimized","steady",3,15,2,"create","24.36","0.13","123.16","15.62","9306.27","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149641]}"
"postgres","optimized","steady",3,15,3,"create","24.29","0.16","123.51","15.50","9306.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149645]}"
"postgres","optimized","steady",3,15,4,"create","24.57","0.13","122.09","15.34","9306.37","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149649]}"
"postgres","optimized","steady",3,15,5,"create","24.13","0.12","124.33","15.71","9306.46","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149653]}"
"postgres","optimized","steady",3,15,6,"create","24.80","0.14","120.98","15.28","9306.64","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149657]}"
"postgres","optimized","steady",3,15,7,"create","24.14","0.12","124.30","15.75","9306.32","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149661]}"
"postgres","optimized","steady",3,15,8,"create","24.53","0.12","122.32","15.41","9306.20","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149665]}"
"postgres","optimized","steady",3,15,9,"create","24.21","0.13","123.91","15.57","9306.48","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149669]}"
"postgres","optimized","steady",3,15,10,"create","24.73","0.14","121.30","17.01","9306.40","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149673]}"
"postgres","optimized","warmup",3,16,1,"create","75.06","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,2,"create","74.87","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,3,"create","74.72","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,4,"create","75.34","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,5,"create","75.64","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,6,"create","74.75","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,7,"create","74.65","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,8,"create","74.95","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,9,"create","74.75","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,10,"create","74.93","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,16,1,"create","24.47","0.12","122.59","15.80","9306.50","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050244]}"
"postgres","optimized","steady",3,16,2,"create","24.55","0.12","122.21","15.40","9306.54","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050248]}"
"postgres","optimized","steady",3,16,3,"create","25.05","0.12","119.78","15.88","9306.49","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050252]}"
"postgres","optimized","steady",3,16,4,"create","24.33","0.15","123.30","15.61","9306.47","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050256]}"
"postgres","optimized","steady",3,16,5,"create","24.65","0.12","121.73","15.34","9306.47","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050260]}"
"postgres","optimized","steady",3,16,6,"create","24.17","0.27","124.12","16.02","9306.49","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050264]}"
"postgres","optimized","steady",3,16,7,"create","24.60","0.12","121.93","15.39","9306.71","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050268]}"
"postgres","optimized","steady",3,16,8,"create","24.06","0.12","124.69","15.89","9306.71","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050272]}"
"postgres","optimized","steady",3,16,9,"create","25.05","0.13","119.74","15.11","9306.45","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050276]}"
"postgres","optimized","steady",3,16,10,"create","24.35","0.12","123.21","15.63","9306.44","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050280]}"
"postgres","optimized","warmup",3,17,1,"update","75.09","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,2,"update","74.43","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,3,"update","74.67","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,4,"update","74.23","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,5,"update","74.67","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,6,"update","74.25","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,7,"update","72.07","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,8,"update","74.22","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,9,"update","74.26","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,10,"update","74.47","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,17,1,"update","24.03","0.08","124.82","15.36","9306.42","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 15]}"
"postgres","optimized","steady",3,17,2,"update","23.97","0.08","125.17","15.10","9306.65","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 18]}"
"postgres","optimized","steady",3,17,3,"update","23.47","0.08","127.84","15.71","9306.64","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 21]}"
"postgres","optimized","steady",3,17,4,"update","24.17","0.08","124.10","15.31","9306.42","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 24]}"
"postgres","optimized","steady",3,17,5,"update","23.56","0.08","127.36","15.36","9306.69","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 27]}"
"postgres","optimized","steady",3,17,6,"update","23.95","0.11","125.26","15.22","9306.46","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 30]}"
"postgres","optimized","steady",3,17,7,"update","23.55","0.08","127.36","15.83","9306.92","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 33]}"
"postgres","optimized","steady",3,17,8,"update","23.99","0.08","125.03","15.18","9306.85","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 36]}"
"postgres","optimized","steady",3,17,9,"update","23.46","0.08","127.89","15.48","9306.63","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 39]}"
"postgres","optimized","steady",3,17,10,"update","23.89","0.08","125.56","15.27","9306.35","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 42]}"
"postgres","optimized","warmup",3,18,1,"update","74.54","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,2,"update","74.83","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,3,"update","73.99","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,4,"update","74.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,5,"update","74.41","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,6,"update","74.28","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,7,"update","74.31","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,8,"update","75.49","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,9,"update","74.01","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,10,"update","71.87","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,18,1,"update","24.46","0.08","122.67","15.76","9306.96","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [51, 4]}"
"postgres","optimized","steady",3,18,2,"update","25.03","0.16","119.87","15.32","9307.23","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [54, 1]}"
"postgres","optimized","steady",3,18,3,"update","24.35","0.09","123.18","15.72","9307.18","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [57, 4]}"
"postgres","optimized","steady",3,18,4,"update","24.92","0.11","120.39","15.38","9307.11","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [60, 1]}"
"postgres","optimized","steady",3,18,5,"update","24.44","0.11","122.74","15.80","9307.23","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [63, 2]}"
"postgres","optimized","steady",3,18,6,"update","24.22","0.11","123.87","16.11","9307.16","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [66, 2]}"
"postgres","optimized","steady",3,18,7,"update","24.82","0.15","120.89","15.20","9307.25","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [69, 1]}"
"postgres","optimized","steady",3,18,8,"update","23.32","0.13","128.64","16.76","9307.13","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [72, 1]}"
"postgres","optimized","steady",3,18,9,"update","24.18","0.14","124.09","15.61","9307.42","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [75, 2]}"
"postgres","optimized","steady",3,18,10,"update","24.40","0.08","122.93","15.06","9307.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [78, 2]}"
"postgres","optimized","warmup",3,19,1,"update","74.21","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,2,"update","74.30","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,3,"update","74.19","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,4,"update","74.28","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,5,"update","74.09","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,6,"update","74.36","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,7,"update","74.04","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,8,"update","74.58","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,9,"update","73.91","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,10,"update","74.06","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,19,1,"update","23.49","0.17","127.71","15.34","9307.42","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [51, 5]}"
"postgres","optimized","steady",3,19,2,"update","23.85","0.12","125.77","15.13","9307.64","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [54, 5]}"
"postgres","optimized","steady",3,19,3,"update","23.61","0.10","127.06","15.43","9307.92","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [57, 5]}"
"postgres","optimized","steady",3,19,4,"update","24.43","0.11","122.79","15.29","9307.57","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [60, 4]}"
"postgres","optimized","steady",3,19,5,"update","23.69","0.10","126.63","15.30","9307.48","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [63, 4]}"
"postgres","optimized","steady",3,19,6,"update","24.20","0.15","123.97","14.98","9307.57","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [66, 4]}"
"postgres","optimized","steady",3,19,7,"update","23.85","0.14","125.80","15.34","9307.54","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [69, 4]}"
"postgres","optimized","steady",3,19,8,"update","24.09","0.11","124.52","15.13","9307.60","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [72, 4]}"
"postgres","optimized","steady",3,19,9,"update","23.71","0.10","126.54","15.47","9307.55","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [75, 4]}"
"postgres","optimized","steady",3,19,10,"update","24.16","0.11","124.18","15.03","9307.88","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [78, 4]}"
"postgres","optimized","warmup",3,20,1,"update","77.57","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,2,"update","75.57","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,3,"update","74.62","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,4,"update","75.19","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,5,"update","74.72","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,6,"update","74.69","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,7,"update","74.65","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,8,"update","74.86","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,9,"update","75.19","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,10,"update","73.93","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,20,1,"update","24.31","0.14","123.39","15.45","9308.31","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [51, ""nergercharlotte@example.net.tmp""]}"
"postgres","optimized","steady",3,20,2,"update","24.82","0.18","120.85","15.31","9308.49","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [54, ""margarethe53@example.com.tmp""]}"
"postgres","optimized","steady",3,20,3,"update","24.33","0.21","123.30","15.52","9308.39","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [57, ""baptistschottin@example.com.tmp""]}"
"postgres","optimized","steady",3,20,4,"update","24.42","0.14","122.87","15.22","9308.58","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [60, ""henri82@example.com.tmp""]}"
"postgres","optimized","steady",3,20,5,"update","24.59","0.15","121.99","15.31","9308.55","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [63, ""lfritsch@example.com.tmp""]}"
"postgres","optimized","steady",3,20,6,"update","24.67","0.20","121.60","15.04","9308.61","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [66, ""undine19@example.com.tmp""]}"
"postgres","optimized","steady",3,20,7,"update","25.62","0.19","117.12","14.65","9308.34","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [69, ""karl-heinzspiess@example.org.tmp""]}"
"postgres","optimized","steady",3,20,8,"update","24.58","0.16","122.04","15.18","9309.09","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [72, ""tring@example.com.tmp""]}"
"postgres","optimized","steady",3,20,9,"update","24.35","0.20","123.18","15.12","9308.95","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""uhoevel@example.com.tmp""]}"
"postgres","optimized","steady",3,20,10,"update","24.68","0.26","121.55","14.96","9308.92","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [78, ""sophie49@example.net.tmp""]}"
"postgres","optimized","warmup",3,21,1,"delete","74.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,2,"delete","74.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,3,"delete","77.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,4,"delete","75.23","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,5,"delete","73.58","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,6,"delete","74.40","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,7,"delete","74.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,8,"delete","74.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,9,"delete","75.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,10,"delete","75.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,21,1,"delete","23.69","0.05","126.64","15.42","9308.69","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,21,2,"delete","24.02","0.04","124.92","15.20","9308.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,21,3,"delete","43.99","0.07","68.19","8.90","9308.92","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,21,4,"delete","24.17","0.04","124.13","15.00","9308.73","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,21,5,"delete","21.44","0.04","139.90","17.50","9308.80","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,21,6,"delete","24.08","0.04","124.59","15.21","9308.91","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,21,7,"delete","37.29","0.04","80.44","9.77","9308.57","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,21,8,"delete","24.14","0.04","124.29","15.13","9308.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,21,9,"delete","23.91","0.04","125.46","15.25","9308.60","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,21,10,"delete","23.30","0.07","128.77","16.36","9309.20","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,22,1,"delete","74.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,2,"delete","74.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,3,"delete","74.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,4,"delete","77.22","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,5,"delete","75.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,6,"delete","74.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,7,"delete","74.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,8,"delete","74.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,9,"delete","75.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,10,"delete","74.50","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,22,1,"delete","24.67","0.04","121.62","15.14","9309.04","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,22,2,"delete","23.94","0.04","125.30","15.52","9308.94","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,22,3,"delete","24.86","0.04","120.67","15.40","9309.05","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,22,4,"delete","24.35","0.04","123.20","15.21","9309.06","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,22,5,"delete","23.16","0.04","129.54","16.06","9308.75","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,22,6,"delete","24.40","0.04","122.97","15.60","9309.16","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,22,7,"delete","25.03","0.05","119.84","15.28","9308.74","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,22,8,"delete","23.96","0.04","125.23","15.66","9309.07","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,22,9,"delete","24.32","0.04","123.34","15.29","9308.88","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,22,10,"delete","23.96","0.04","125.19","15.29","9309.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,23,1,"delete","74.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,2,"delete","74.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,3,"delete","74.21","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,4,"delete","74.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,5,"delete","74.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,6,"delete","74.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,7,"delete","74.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,8,"delete","74.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,9,"delete","72.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,10,"delete","73.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,23,1,"delete","23.81","0.04","126.02","15.10","9308.95","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,23,2,"delete","25.77","0.04","116.41","14.55","9309.01","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,23,3,"delete","23.69","0.04","126.62","15.15","9308.84","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,23,4,"delete","24.20","0.07","123.97","14.93","9308.78","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,23,5,"delete","24.06","0.04","124.67","15.18","9309.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,23,6,"delete","24.00","0.04","124.98","15.25","9309.32","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,23,7,"delete","24.40","0.04","122.93","15.18","9309.18","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,23,8,"delete","23.94","0.04","125.30","15.01","9308.78","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,23,9,"delete","23.69","0.04","126.65","15.28","9308.87","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,23,10,"delete","24.00","0.04","125.00","15.30","9308.83","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,24,1,"delete","74.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,2,"delete","74.34","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,3,"delete","75.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,4,"delete","74.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,5,"delete","74.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,6,"delete","73.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,7,"delete","74.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,8,"delete","74.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,9,"delete","72.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,10,"delete","75.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,24,1,"delete","23.83","0.04","125.87","15.31","9309.05","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,24,2,"delete","24.09","0.04","124.55","15.11","9309.01","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,24,3,"delete","23.51","0.05","127.61","15.28","9308.80","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,24,4,"delete","24.08","0.07","124.59","15.20","9309.29","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,24,5,"delete","24.07","0.04","124.64","15.73","9309.10","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,24,6,"delete","23.88","0.04","125.64","15.15","9309.00","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,24,7,"delete","23.56","0.04","127.34","16.93","9309.11","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,24,8,"delete","24.13","0.04","124.34","15.32","9309.12","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,24,9,"delete","24.67","0.04","121.63","14.91","9309.12","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,24,10,"delete","24.51","0.04","122.39","15.17","9309.16","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",5,1,1,"simple","392.37","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,2,"simple","432.19","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,3,"simple","377.86","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,4,"simple","395.03","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,5,"simple","378.35","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,6,"simple","394.06","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,7,"simple","386.31","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,8,"simple","379.27","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,9,"simple","386.17","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,10,"simple","380.15","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,1,1,"simple","328.61","11.21","15.22","8.31","9287.41","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,2,"simple","333.09","11.19","15.01","9.40","9287.55","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,3,"simple","332.24","10.99","15.05","8.60","9287.64","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,4,"simple","330.04","11.38","15.15","8.84","9287.61","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,5,"simple","326.81","11.23","15.30","9.12","9287.41","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,6,"simple","328.39","10.96","15.23","8.41","9287.78","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,7,"simple","318.56","10.97","15.70","8.27","9287.63","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,8,"simple","331.98","11.02","15.06","8.76","9287.88","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,9,"simple","328.67","10.80","15.21","8.86","9287.73","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,1,10,"simple","326.10","10.80","15.33","8.27","9287.60","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",5,2,1,"simple","94.86","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,2,"simple","94.68","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,3,"simple","96.71","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,4,"simple","94.70","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,5,"simple","95.50","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,6,"simple","95.21","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,7,"simple","95.39","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,8,"simple","106.67","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,9,"simple","95.63","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,10,"simple","95.47","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,2,1,"simple","44.82","0.07","111.55","10.10","9287.95","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,2,"simple","44.71","0.07","111.83","10.28","9287.73","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,3,"simple","44.16","0.07","113.23","10.19","9287.21","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,4,"simple","42.86","0.07","116.66","11.05","9287.69","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,5,"simple","44.17","0.11","113.20","10.17","9287.87","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,6,"simple","43.31","0.07","115.45","10.21","9287.87","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,7,"simple","44.38","0.07","112.65","10.16","9287.45","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,8,"simple","43.34","0.07","115.37","10.23","9287.81","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,9,"simple","44.34","0.07","112.77","10.15","9287.71","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,10,"simple","44.28","0.07","112.93","10.35","9287.79","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",5,3,1,"simple","95.31","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,2,"simple","95.05","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,3,"simple","95.08","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,4,"simple","103.05","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,5,"simple","95.75","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,6,"simple","95.33","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,7,"simple","96.29","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,8,"simple","107.13","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,9,"simple","96.75","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,10,"simple","95.20","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,3,1,"simple","44.25","0.19","112.99","10.60","9287.77","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,2,"simple","45.97","0.20","108.77","10.23","9287.86","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,3,"simple","44.45","0.19","112.49","10.62","9287.77","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,4,"simple","45.07","0.19","110.94","10.47","9287.74","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,5,"simple","44.66","0.20","111.96","10.54","9287.35","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,6,"simple","44.89","0.19","111.39","10.46","9288.02","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,7,"simple","44.28","0.20","112.93","10.50","9287.75","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,8,"simple","45.23","0.20","110.54","10.48","9287.92","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,9,"simple","45.51","0.19","109.87","10.42","9287.73","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,10,"simple","44.80","0.19","111.60","10.43","9287.69","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 65, ""Inken-Ruppert-Gasse 4/9"", ""Guben"", ""48940"", ""Deutschland"", true]}"
"postgres","optimized","warmup",5,4,1,"medium","97.84","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,2,"medium","98.09","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,3,"medium","99.88","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,4,"medium","100.09","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,5,"medium","100.38","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,6,"medium","109.05","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,7,"medium","99.71","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,8,"medium","98.01","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,9,"medium","97.35","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,10,"medium","98.17","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,4,1,"medium","46.48","0.47","107.57","11.26","9287.84","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,2,"medium","47.32","0.47","105.66","11.14","9287.86","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,3,"medium","47.29","0.47","105.72","11.47","9287.95","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,4,"medium","47.69","0.45","104.84","11.10","9288.15","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,5,"medium","48.93","0.45","102.19","10.88","9287.85","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,6,"medium","49.82","0.47","100.35","10.63","9287.68","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,7,"medium","47.04","0.45","106.29","11.28","9287.83","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,8,"medium","47.04","0.48","106.29","11.15","9288.08","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,9,"medium","46.38","0.48","107.80","11.33","9287.96","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",5,4,10,"medium","47.88","0.45","104.43","11.62","9287.99","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",5,5,1,"medium","144.18","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,2,"medium","150.02","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,3,"medium","147.51","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,4,"medium","151.69","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,5,"medium","145.77","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,6,"medium","145.79","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,7,"medium","150.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,8,"medium","147.81","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,9,"medium","143.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,10,"medium","150.77","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,5,1,"medium","97.73","41.45","51.16","35.24","9300.81","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,2,"medium","93.16","41.28","53.67","37.77","9300.70","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,3,"medium","94.70","41.29","52.80","35.99","9300.59","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,4,"medium","92.54","41.55","54.03","38.05","9300.67","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,5,"medium","97.35","43.38","51.36","36.68","9300.62","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,6,"medium","96.71","41.90","51.70","37.60","9300.83","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,7,"medium","94.03","41.94","53.17","36.11","9300.80","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,8,"medium","95.73","41.96","52.23","37.30","9301.03","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,9,"medium","115.20","41.50","43.40","30.04","9300.66","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",5,5,10,"medium","93.49","41.91","53.48","38.21","9300.63","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","warmup",5,6,1,"medium","100.02","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,2,"medium","99.78","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,3,"medium","98.92","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,4,"medium","99.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,5,"medium","99.72","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,6,"medium","100.10","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,7,"medium","100.02","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,8,"medium","98.42","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,9,"medium","97.65","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,10,"medium","102.52","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,6,1,"medium","51.70","4.56","96.72","11.98","9311.16","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,2,"medium","52.37","4.46","95.48","11.84","9311.26","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,3,"medium","47.41","4.51","105.46","13.27","9311.40","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,4,"medium","47.95","4.55","104.27","12.83","9310.96","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,5,"medium","45.56","4.53","109.74","13.81","9311.20","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,6,"medium","48.41","4.47","103.27","12.69","9311.20","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,7,"medium","48.51","4.54","103.06","13.09","9311.32","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,8,"medium","52.06","4.51","96.05","12.79","9310.89","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,9,"medium","47.69","4.50","104.84","13.12","9310.77","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",5,6,10,"medium","48.15","4.54","103.85","12.81","9311.33","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","warmup",5,7,1,"complex","95.69","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,2,"complex","98.64","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,3,"complex","96.63","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,4,"complex","96.74","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,5,"complex","96.29","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,6,"complex","96.32","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,7,"complex","96.77","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,8,"complex","96.48","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,9,"complex","96.09","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,10,"complex","96.17","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,7,1,"complex","45.89","0.79","108.95","11.21","9311.00","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,2,"complex","45.72","0.77","109.36","11.33","9311.45","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,3,"complex","48.19","0.79","103.77","10.64","9311.14","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,4,"complex","44.92","0.78","111.30","11.99","9311.43","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,5,"complex","46.02","0.77","108.64","11.14","9311.57","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,6,"complex","45.14","0.78","110.78","11.29","9311.19","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,7,"complex","47.88","0.80","104.44","11.61","9311.21","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,8,"complex","46.78","0.81","106.88","11.37","9310.96","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,9,"complex","42.81","0.78","116.79","12.54","9311.27","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",5,7,10,"complex","45.29","0.79","110.39","11.38","9311.14","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","warmup",5,8,1,"complex","460.16","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,2,"complex","451.32","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,3,"complex","467.43","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,4,"complex","448.16","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,5,"complex","437.90","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,6,"complex","453.96","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,7,"complex","461.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,8,"complex","463.75","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,9,"complex","449.54","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,10,"complex","430.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,8,1,"complex","396.29","96.64","12.62","43.19","9292.22","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,2,"complex","392.08","95.42","12.75","41.17","9292.44","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,3,"complex","403.47","96.19","12.39","40.35","9292.28","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,4,"complex","399.79","97.98","12.51","40.43","9291.39","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,5,"complex","407.40","96.48","12.27","42.86","9291.94","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,6,"complex","403.92","97.89","12.38","41.62","9292.14","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,7,"complex","395.92","95.90","12.63","41.86","9292.21","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,8,"complex","411.32","95.52","12.16","44.07","9292.20","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,9,"complex","404.04","99.24","12.37","42.71","9291.48","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,10,"complex","401.60","96.80","12.45","41.87","9291.77","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",5,9,1,"complex","101.67","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,2,"complex","98.13","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,3,"complex","96.96","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,4,"complex","94.47","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,5,"complex","98.49","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,6,"complex","99.61","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,7,"complex","96.94","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,8,"complex","96.32","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,9,"complex","96.71","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,10,"complex","97.13","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,9,1,"complex","46.05","0.54","108.58","11.32","9292.40","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,2,"complex","46.53","0.56","107.45","11.20","9292.57","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,3,"complex","46.21","0.55","108.20","12.35","9292.11","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,4,"complex","46.63","0.56","107.22","11.07","9292.03","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,5,"complex","47.22","0.53","105.88","11.07","9292.34","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,6,"complex","44.62","0.56","112.06","11.08","9292.16","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,7,"complex","46.59","0.56","107.32","11.19","9292.12","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,8,"complex","44.68","0.53","111.90","11.21","9292.19","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,9,"complex","45.34","0.56","110.28","11.01","9292.28","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,10,"complex","44.58","0.56","112.16","11.25","9292.22","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","warmup",5,10,1,"very_complex","375.01","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,2,"very_complex","358.59","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,3,"very_complex","353.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,4,"very_complex","366.68","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,5,"very_complex","368.98","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,6,"very_complex","351.63","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,7,"very_complex","365.79","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,8,"very_complex","348.89","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,9,"very_complex","374.32","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,10,"very_complex","342.12","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,10,1,"very_complex","320.84","245.28","15.58","36.53","9311.53","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,2,"very_complex","312.17","244.33","16.02","36.99","9311.91","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,3,"very_complex","315.54","240.35","15.85","34.63","9311.89","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,4,"very_complex","322.22","248.28","15.52","36.43","9311.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,5,"very_complex","317.41","241.50","15.75","36.48","9312.03","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,6,"very_complex","310.83","245.04","16.09","37.37","9311.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,7,"very_complex","315.27","243.42","15.86","37.13","9311.49","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,8,"very_complex","329.07","240.01","15.19","36.24","9311.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,9,"very_complex","328.06","241.08","15.24","36.65","9311.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,10,10,"very_complex","331.85","246.44","15.07","34.80","9311.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",5,11,1,"very_complex","588.42","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,2,"very_complex","599.64","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,3,"very_complex","589.58","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,4,"very_complex","598.01","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,5,"very_complex","581.31","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,6,"very_complex","587.66","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,7,"very_complex","588.59","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,8,"very_complex","594.61","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,9,"very_complex","584.68","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,10,"very_complex","598.54","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,11,1,"very_complex","558.06","556.95","8.96","39.19","9306.29","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,2,"very_complex","570.33","544.32","8.77","37.97","9306.68","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,3,"very_complex","552.54","541.75","9.05","38.98","9306.63","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,4,"very_complex","558.47","539.16","8.95","38.92","9306.67","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,5,"very_complex","562.81","529.43","8.88","38.71","9306.60","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,6,"very_complex","562.24","538.03","8.89","38.79","9306.53","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,7,"very_complex","544.73","552.30","9.18","39.39","9306.59","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,8,"very_complex","569.13","549.22","8.79","39.08","9306.66","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,9,"very_complex","555.75","557.89","9.00","39.40","9306.40","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",5,11,10,"very_complex","574.47","559.27","8.70","38.45","9306.77","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","warmup",5,12,1,"very_complex","377.44","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,2,"very_complex","353.42","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,3,"very_complex","354.13","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,4,"very_complex","354.93","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,5,"very_complex","364.72","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,6,"very_complex","352.18","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,7,"very_complex","361.79","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,8,"very_complex","350.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,9,"very_complex","346.98","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,10,"very_complex","371.96","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,12,1,"very_complex","306.29","244.44","16.32","36.28","9312.21","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,2,"very_complex","320.42","241.25","15.60","35.91","9311.94","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,3,"very_complex","315.60","238.99","15.84","36.26","9311.91","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,4,"very_complex","314.18","246.80","15.91","36.42","9311.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,5,"very_complex","331.90","242.28","15.06","34.65","9311.49","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,6,"very_complex","308.65","241.35","16.20","37.04","9312.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,7,"very_complex","334.19","245.04","14.96","34.65","9311.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,8,"very_complex","310.52","241.57","16.10","37.45","9311.71","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,9,"very_complex","319.95","238.38","15.63","36.02","9311.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",5,12,10,"very_complex","318.10","252.05","15.72","34.85","9311.77","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",5,13,1,"create","97.07","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,2,"create","95.60","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,3,"create","97.91","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,4,"create","94.39","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,5,"create","95.68","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,6,"create","94.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,7,"create","96.05","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,8,"create","93.23","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,9,"create","95.15","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,10,"create","112.56","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,13,1,"create","45.47","0.12","109.96","10.47","9311.79","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135101]}"
"postgres","optimized","steady",5,13,2,"create","45.42","0.11","110.09","10.50","9311.68","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135107]}"
"postgres","optimized","steady",5,13,3,"create","44.83","0.12","111.53","10.67","9311.76","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135113]}"
"postgres","optimized","steady",5,13,4,"create","45.87","0.11","109.00","10.32","9311.68","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135119]}"
"postgres","optimized","steady",5,13,5,"create","44.74","0.17","111.75","10.62","9312.30","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135125]}"
"postgres","optimized","steady",5,13,6,"create","45.54","0.14","109.80","10.45","9312.01","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135131]}"
"postgres","optimized","steady",5,13,7,"create","44.43","0.12","112.53","10.71","9311.83","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135137]}"
"postgres","optimized","steady",5,13,8,"create","45.06","0.12","110.96","10.55","9312.21","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135143]}"
"postgres","optimized","steady",5,13,9,"create","45.91","0.11","108.90","10.31","9311.97","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135149]}"
"postgres","optimized","steady",5,13,10,"create","45.04","0.11","111.01","10.64","9311.99","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135155]}"
"postgres","optimized","warmup",5,14,1,"create","95.76","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,2,"create","102.38","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,3,"create","97.55","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,4,"create","96.71","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,5,"create","95.32","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,6,"create","95.74","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,7,"create","95.86","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,8,"create","95.21","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,9,"create","96.60","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,10,"create","93.33","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,14,1,"create","45.79","0.10","109.19","10.63","9312.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200552]}"
"postgres","optimized","steady",5,14,2,"create","42.36","0.10","118.04","11.83","9312.05","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200558]}"
"postgres","optimized","steady",5,14,3,"create","54.03","0.23","92.53","8.74","9311.99","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200564]}"
"postgres","optimized","steady",5,14,4,"create","45.84","0.10","109.07","11.33","9312.29","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200570]}"
"postgres","optimized","steady",5,14,5,"create","46.08","0.10","108.50","10.56","9311.94","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200576]}"
"postgres","optimized","steady",5,14,6,"create","44.55","0.10","112.22","10.70","9312.00","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200582]}"
"postgres","optimized","steady",5,14,7,"create","45.64","0.12","109.56","10.53","9312.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200588]}"
"postgres","optimized","steady",5,14,8,"create","44.67","0.10","111.94","10.63","9312.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200594]}"
"postgres","optimized","steady",5,14,9,"create","45.47","0.10","109.95","10.52","9312.10","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200600]}"
"postgres","optimized","steady",5,14,10,"create","45.05","0.10","110.98","10.73","9312.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200606]}"
"postgres","optimized","warmup",5,15,1,"create","97.56","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,2,"create","97.38","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,3,"create","98.37","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,4,"create","97.84","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,5,"create","97.32","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,6,"create","96.71","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,7,"create","97.48","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,8,"create","97.08","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,9,"create","98.68","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,10,"create","96.39","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,15,1,"create","69.58","0.12","71.86","7.22","9312.15","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149727]}"
"postgres","optimized","steady",5,15,2,"create","46.53","0.12","107.46","10.71","9312.29","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149733]}"
"postgres","optimized","steady",5,15,3,"create","45.24","0.13","110.53","10.98","9312.08","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149739]}"
"postgres","optimized","steady",5,15,4,"create","46.84","0.14","106.74","10.75","9312.12","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149745]}"
"postgres","optimized","steady",5,15,5,"create","45.92","0.12","108.87","10.56","9312.16","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149751]}"
"postgres","optimized","steady",5,15,6,"create","45.33","0.15","110.29","10.66","9312.40","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149757]}"
"postgres","optimized","steady",5,15,7,"create","45.67","0.12","109.47","10.69","9312.21","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149763]}"
"postgres","optimized","steady",5,15,8,"create","45.43","0.14","110.06","10.64","9312.25","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149769]}"
"postgres","optimized","steady",5,15,9,"create","45.02","0.12","111.05","10.66","9312.58","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149775]}"
"postgres","optimized","steady",5,15,10,"create","45.57","0.12","109.72","10.87","9312.12","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149781]}"
"postgres","optimized","warmup",5,16,1,"create","96.06","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,2,"create","119.31","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,3,"create","96.73","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,4,"create","96.90","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,5,"create","97.81","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,6,"create","95.44","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,7,"create","95.51","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,8,"create","96.10","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,9,"create","95.18","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,10,"create","95.74","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,16,1,"create","64.22","0.12","77.86","7.94","9312.40","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050334]}"
"postgres","optimized","steady",5,16,2,"create","45.94","0.14","108.84","10.44","9312.40","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050340]}"
"postgres","optimized","steady",5,16,3,"create","45.38","0.12","110.17","10.80","9312.87","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050346]}"
"postgres","optimized","steady",5,16,4,"create","45.78","0.12","109.22","10.54","9312.27","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050352]}"
"postgres","optimized","steady",5,16,5,"create","45.44","0.12","110.04","10.62","9312.65","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050358]}"
"postgres","optimized","steady",5,16,6,"create","42.47","0.12","117.72","11.77","9312.69","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050364]}"
"postgres","optimized","steady",5,16,7,"create","45.83","0.12","109.09","10.95","9312.49","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050370]}"
"postgres","optimized","steady",5,16,8,"create","44.53","0.12","112.29","10.83","9312.27","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050376]}"
"postgres","optimized","steady",5,16,9,"create","46.72","0.12","107.02","10.44","9312.46","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050382]}"
"postgres","optimized","steady",5,16,10,"create","45.83","0.12","109.09","10.82","9312.53","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050388]}"
"postgres","optimized","warmup",5,17,1,"update","95.47","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,2,"update","95.32","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,3,"update","95.25","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,4,"update","95.67","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,5,"update","96.06","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,6,"update","92.34","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,7,"update","95.64","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,8,"update","95.23","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,9,"update","95.95","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,10,"update","93.06","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,17,1,"update","44.08","0.11","113.42","10.43","9312.35","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 95]}"
"postgres","optimized","steady",5,17,2,"update","41.21","0.08","121.32","11.50","9312.54","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 100]}"
"postgres","optimized","steady",5,17,3,"update","44.29","0.08","112.88","10.48","9312.51","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 105]}"
"postgres","optimized","steady",5,17,4,"update","47.33","0.08","105.63","9.67","9312.72","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 110]}"
"postgres","optimized","steady",5,17,5,"update","43.97","0.08","113.71","10.34","9312.52","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 115]}"
"postgres","optimized","steady",5,17,6,"update","44.54","0.11","112.25","10.38","9312.73","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 120]}"
"postgres","optimized","steady",5,17,7,"update","44.57","0.09","112.18","10.44","9312.76","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 125]}"
"postgres","optimized","steady",5,17,8,"update","44.71","0.08","111.82","10.31","9312.52","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 130]}"
"postgres","optimized","steady",5,17,9,"update","44.32","0.08","112.81","10.36","9312.82","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 135]}"
"postgres","optimized","steady",5,17,10,"update","47.24","0.08","105.84","9.65","9312.23","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 140]}"
"postgres","optimized","warmup",5,18,1,"update","95.32","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,2,"update","95.37","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,3,"update","95.12","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,4,"update","93.32","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,5,"update","95.81","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,6,"update","94.91","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,7,"update","95.91","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,8,"update","94.92","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,9,"update","96.20","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,10,"update","95.26","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,18,1,"update","44.52","0.10","112.30","10.64","9313.06","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [131, 1]}"
"postgres","optimized","steady",5,18,2,"update","44.29","0.12","112.89","10.56","9313.26","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [136, 1]}"
"postgres","optimized","steady",5,18,3,"update","45.00","0.11","111.12","10.35","9313.10","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [141, 1]}"
"postgres","optimized","steady",5,18,4,"update","44.70","0.11","111.86","10.54","9313.56","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [146, 2]}"
"postgres","optimized","steady",5,18,5,"update","46.14","0.13","108.36","10.18","9313.82","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [151, 4]}"
"postgres","optimized","steady",5,18,6,"update","44.58","0.11","112.16","10.55","9313.48","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [156, 4]}"
"postgres","optimized","steady",5,18,7,"update","45.20","0.10","110.63","10.39","9313.67","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [83, 1]}"
"postgres","optimized","steady",5,18,8,"update","44.36","0.08","112.71","10.60","9313.86","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [87, 1]}"
"postgres","optimized","steady",5,18,9,"update","46.74","0.10","106.97","10.39","9313.61","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [91, 1]}"
"postgres","optimized","steady",5,18,10,"update","46.40","0.08","107.76","10.46","9313.52","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [94, 3]}"
"postgres","optimized","warmup",5,19,1,"update","97.82","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,2,"update","96.98","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,3,"update","96.48","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,4,"update","99.47","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,5,"update","92.86","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,6,"update","96.02","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,7,"update","96.38","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,8,"update","97.16","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,9,"update","97.13","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,10,"update","95.62","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,19,1,"update","46.16","0.11","108.32","10.35","9314.01","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [131, 5]}"
"postgres","optimized","steady",5,19,2,"update","45.70","0.15","109.41","11.06","9313.90","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [136, 5]}"
"postgres","optimized","steady",5,19,3,"update","45.80","0.13","109.17","10.23","9313.81","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [141, 4]}"
"postgres","optimized","steady",5,19,4,"update","44.67","0.10","111.93","10.36","9314.19","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [146, 4]}"
"postgres","optimized","steady",5,19,5,"update","45.00","0.11","111.12","10.23","9314.29","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [151, 5]}"
"postgres","optimized","steady",5,19,6,"update","44.19","0.11","113.15","10.42","9314.01","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [156, 4]}"
"postgres","optimized","steady",5,19,7,"update","66.98","0.10","74.65","6.93","9314.05","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [84, 8]}"
"postgres","optimized","steady",5,19,8,"update","43.99","0.09","113.65","10.48","9314.06","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [89, 7]}"
"postgres","optimized","steady",5,19,9,"update","45.01","0.10","111.10","10.43","9313.90","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [94, 8]}"
"postgres","optimized","steady",5,19,10,"update","44.32","0.10","112.82","10.50","9314.36","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [99, 8]}"
"postgres","optimized","warmup",5,20,1,"update","97.02","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,2,"update","96.87","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,3,"update","97.94","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,4,"update","95.81","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,5,"update","96.97","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,6,"update","95.21","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,7,"update","95.49","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,8,"update","95.38","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,9,"update","96.68","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,10,"update","94.71","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,20,1,"update","44.72","0.15","111.82","10.80","9315.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [42, ""textorullrich@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,2,"update","45.31","0.18","110.36","10.38","9315.53","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [47, ""ekramer@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,3,"update","42.94","0.17","116.44","11.75","9315.17","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [53, ""rosealeksander@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,4,"update","47.84","0.15","104.51","9.96","9315.45","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [58, ""pruschkegilbert@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,5,"update","46.26","0.15","108.10","10.68","9315.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [64, ""annelies07@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,6,"update","46.91","0.17","106.59","10.23","9315.72","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [70, ""hesercilli@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,7,"update","44.86","0.15","111.46","10.58","9315.85","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""uhoevel@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,8,"update","45.30","0.11","110.38","10.47","9315.87","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [80, ""jjuettner@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,9,"update","44.83","0.11","111.53","10.75","9315.65","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [86, ""mpaertzelt@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,10,"update","45.62","0.13","109.59","10.66","9316.09","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [91, ""zofiaklingelhoefer@example.org.tmp.tmp""]}"
"postgres","optimized","warmup",5,21,1,"delete","96.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,2,"delete","95.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,3,"delete","95.55","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,4,"delete","95.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,5,"delete","94.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,6,"delete","95.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,7,"delete","95.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,8,"delete","96.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,9,"delete","95.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,10,"delete","94.99","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,21,1,"delete","43.60","0.04","114.68","11.10","9317.06","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,21,2,"delete","44.25","0.04","113.00","10.31","9316.54","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,21,3,"delete","45.29","0.04","110.41","10.14","9316.74","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,21,4,"delete","47.14","0.04","106.06","10.43","9316.86","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,21,5,"delete","44.80","0.04","111.60","10.32","9317.04","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,21,6,"delete","45.28","0.04","110.42","10.32","9316.99","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,21,7,"delete","44.65","0.04","111.98","10.34","9317.03","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,21,8,"delete","44.77","0.04","111.69","10.38","9316.83","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,21,9,"delete","44.76","0.04","111.71","10.40","9316.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,21,10,"delete","44.71","0.04","111.82","10.22","9316.76","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,22,1,"delete","96.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,2,"delete","95.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,3,"delete","92.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,4,"delete","95.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,5,"delete","96.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,6,"delete","96.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,7,"delete","95.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,8,"delete","95.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,9,"delete","95.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,10,"delete","95.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,22,1,"delete","44.33","0.04","112.80","10.42","9316.80","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,22,2,"delete","45.42","0.04","110.09","10.28","9316.70","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,22,3,"delete","44.27","0.04","112.95","10.62","9317.13","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,22,4,"delete","44.67","0.04","111.93","10.39","9317.17","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,22,5,"delete","41.99","0.04","119.08","11.80","9316.80","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,22,6,"delete","46.83","0.04","106.76","10.44","9316.94","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,22,7,"delete","45.77","0.04","109.24","10.46","9317.18","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,22,8,"delete","46.28","0.04","108.04","10.33","9316.87","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,22,9,"delete","46.30","0.04","107.99","10.44","9316.98","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,22,10,"delete","46.06","0.04","108.56","10.23","9316.82","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,23,1,"delete","97.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,2,"delete","92.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,3,"delete","95.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,4,"delete","96.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,5,"delete","96.12","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,6,"delete","96.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,7,"delete","97.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,8,"delete","129.88","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,9,"delete","96.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,10,"delete","95.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,23,1,"delete","45.06","0.04","110.96","10.31","9317.07","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,23,2,"delete","45.22","0.04","110.57","10.37","9316.99","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,23,3,"delete","46.30","0.04","108.00","10.22","9317.05","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,23,4,"delete","44.11","0.04","113.36","10.44","9317.01","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,23,5,"delete","44.54","0.04","112.25","10.64","9316.94","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,23,6,"delete","44.99","0.04","111.13","10.42","9316.74","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,23,7,"delete","44.80","0.04","111.60","10.30","9317.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,23,8,"delete","44.90","0.04","111.35","10.85","9316.99","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,23,9,"delete","45.01","0.04","111.09","10.66","9317.04","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,23,10,"delete","44.49","0.04","112.38","10.54","9317.09","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,24,1,"delete","95.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,2,"delete","95.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,3,"delete","92.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,4,"delete","95.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,5,"delete","97.29","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,6,"delete","95.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,7,"delete","92.36","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,8,"delete","95.21","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,9,"delete","95.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,10,"delete","95.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,24,1,"delete","44.14","0.04","113.27","10.51","9316.93","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,24,2,"delete","45.08","0.04","110.91","10.28","9317.04","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,24,3,"delete","44.14","0.04","113.28","10.53","9316.88","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,24,4,"delete","42.40","0.04","117.92","11.60","9317.23","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,24,5,"delete","44.96","0.04","111.21","10.27","9316.71","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,24,6,"delete","44.97","0.04","111.18","10.27","9316.96","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,24,7,"delete","44.27","0.04","112.94","10.56","9316.99","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,24,8,"delete","44.89","0.07","111.38","10.19","9316.91","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,24,9,"delete","43.85","0.04","114.03","10.83","9317.53","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,24,10,"delete","45.00","0.04","111.10","10.34","9317.13","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",10,1,1,"simple","697.53","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,2,"simple","684.66","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,3,"simple","701.39","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,4,"simple","678.18","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,5,"simple","718.18","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,6,"simple","680.80","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,7,"simple","697.16","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,8,"simple","707.42","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,9,"simple","679.32","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,10,"simple","676.87","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,1,1,"simple","625.24","11.11","15.99","8.97","9291.63","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,2,"simple","638.33","10.99","15.67","8.68","9291.34","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,3,"simple","624.94","10.98","16.00","8.12","9291.49","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,4,"simple","614.30","11.16","16.28","8.37","9291.89","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,5,"simple","628.71","10.95","15.91","9.42","9291.82","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,6,"simple","623.38","11.02","16.04","9.04","9291.48","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,7,"simple","653.06","10.99","15.31","9.00","9291.52","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,8,"simple","659.28","11.03","15.17","8.81","9291.41","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,9,"simple","644.20","11.03","15.52","8.17","9291.61","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,1,10,"simple","638.52","11.03","15.66","9.29","9291.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",10,2,1,"simple","137.82","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,2,"simple","138.79","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,3,"simple","137.41","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,4,"simple","135.07","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,5,"simple","137.93","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,6,"simple","139.74","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,7,"simple","138.48","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,8,"simple","138.28","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,9,"simple","139.02","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,10,"simple","138.18","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,2,1,"simple","84.84","0.09","117.87","7.57","9291.55","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,2,"simple","82.38","0.10","121.40","7.97","9291.41","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,3,"simple","84.15","0.10","118.84","7.54","9291.32","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,4,"simple","86.00","0.07","116.28","7.34","9291.36","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,5,"simple","84.33","0.11","118.58","7.54","9291.33","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,6,"simple","85.32","0.07","117.21","7.50","9291.18","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,7,"simple","89.42","0.07","111.83","7.45","9291.52","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,8,"simple","86.06","0.07","116.20","7.32","9291.21","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,9,"simple","84.14","0.08","118.85","7.49","9291.03","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,10,"simple","86.71","0.07","115.32","7.41","9291.49","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",10,3,1,"simple","148.12","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,2,"simple","148.44","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,3,"simple","143.29","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,4,"simple","147.78","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,5,"simple","150.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,6,"simple","152.48","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,7,"simple","148.33","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,8,"simple","148.47","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,9,"simple","143.00","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,10,"simple","148.80","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,3,1,"simple","98.17","0.19","101.87","7.46","9291.48","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,2,"simple","86.94","0.19","115.02","8.70","9291.84","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,3,"simple","96.89","0.22","103.21","7.56","9291.52","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,4,"simple","97.40","0.19","102.67","7.49","9291.99","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,5,"simple","113.02","0.21","88.48","6.47","9291.44","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,6,"simple","96.11","0.22","104.04","7.67","9291.47","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,7,"simple","97.97","0.19","102.07","7.64","9291.38","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,8,"simple","95.72","0.19","104.47","7.74","9291.62","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,9,"simple","97.03","0.19","103.06","7.77","9291.51","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,10,"simple","96.91","0.19","103.18","7.59","9291.54","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 136, ""Alex-Zirme-Straße 01"", ""Lemgo"", ""89776"", ""Deutschland"", true]}"
"postgres","optimized","warmup",10,4,1,"medium","153.51","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,2,"medium","164.47","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,3,"medium","149.28","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,4,"medium","152.96","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,5,"medium","154.30","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,6,"medium","153.58","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,7,"medium","158.13","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,8,"medium","156.87","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,9,"medium","154.61","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,10,"medium","153.21","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,4,1,"medium","98.18","0.49","101.85","8.60","9291.66","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,2,"medium","104.01","0.49","96.14","8.16","9291.99","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,3,"medium","98.78","0.51","101.24","8.85","9291.61","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,4,"medium","102.20","0.49","97.84","8.35","9291.63","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,5,"medium","98.59","0.49","101.43","8.89","9291.80","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,6,"medium","99.82","0.48","100.18","8.65","9291.97","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,7,"medium","116.74","0.49","85.66","7.50","9291.69","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,8,"medium","100.55","0.49","99.45","8.61","9291.78","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,9,"medium","100.18","0.49","99.82","8.33","9291.58","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","steady",10,4,10,"medium","102.29","0.47","97.76","8.39","9291.80","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 48, ""2016-01-01 03:20:38"", ""2016-07-18 09:30:32""]}"
"postgres","optimized","warmup",10,5,1,"medium","218.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,2,"medium","212.95","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,3,"medium","209.96","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,4,"medium","214.75","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,5,"medium","226.56","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,6,"medium","209.29","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,7,"medium","215.48","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,8,"medium","204.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,9,"medium","220.93","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,10,"medium","203.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,5,1,"medium","151.53","42.20","65.99","45.39","9304.83","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,2,"medium","173.81","42.09","57.53","39.17","9304.63","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,3,"medium","168.34","42.01","59.40","41.26","9304.88","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,4,"medium","168.43","40.97","59.37","42.15","9304.52","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,5,"medium","167.42","42.74","59.73","41.83","9304.34","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,6,"medium","170.86","41.84","58.53","40.88","9304.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,7,"medium","171.70","42.36","58.24","40.22","9304.83","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,8,"medium","165.21","42.67","60.53","42.78","9304.69","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,9,"medium","157.58","42.48","63.46","44.56","9304.72","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","steady",10,5,10,"medium","160.96","41.87","62.13","43.28","9304.46","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [2218448, ""ZWMBYN Table Tennis Table Cover for Outdoor with Storage Bag, Black Waterproof and Dustproof Table Cover, Outdoor Dust Cover for Table Tennis Table, Patio Bench"", ""20.69"", 27, ""2021-04-29 17:27:38"", ""2022-11-15 21:06:58"", 2]}"
"postgres","optimized","warmup",10,6,1,"medium","152.71","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,2,"medium","155.76","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,3,"medium","158.11","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,4,"medium","149.52","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,5,"medium","158.67","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,6,"medium","155.07","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,7,"medium","158.31","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,8,"medium","149.71","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,9,"medium","151.85","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,10,"medium","151.39","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,6,1,"medium","101.85","4.46","98.18","10.02","9315.32","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,2,"medium","108.17","4.45","92.45","9.73","9315.07","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,3,"medium","93.39","4.57","107.08","11.09","9315.39","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,4,"medium","111.57","4.50","89.63","9.19","9315.21","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,5,"medium","102.69","4.48","97.38","10.04","9314.99","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,6,"medium","99.91","4.52","100.09","10.52","9315.07","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,7,"medium","105.87","4.54","94.46","9.75","9315.17","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,8,"medium","106.65","4.47","93.76","9.54","9315.45","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,9,"medium","101.92","4.53","98.12","10.10","9315.07","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","steady",10,6,10,"medium","103.19","4.46","96.91","9.94","9315.06","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [19026, 75944, 1004215, 1, ""2025-07-11 08:40:56""]}"
"postgres","optimized","warmup",10,7,1,"complex","171.14","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,2,"complex","149.72","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,3,"complex","148.54","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,4,"complex","149.33","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,5,"complex","151.34","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,6,"complex","149.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,7,"complex","152.82","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,8,"complex","148.72","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,9,"complex","148.47","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,10,"complex","153.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,7,1,"complex","99.97","0.81","100.03","8.31","9315.06","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,2,"complex","96.89","0.77","103.21","8.54","9315.10","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,3,"complex","104.81","0.82","95.41","8.11","9315.13","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,4,"complex","97.83","0.83","102.22","8.45","9315.37","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,5,"complex","96.81","0.83","103.29","8.59","9315.20","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,6,"complex","101.74","0.81","98.29","9.00","9315.00","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,7,"complex","100.70","0.78","99.30","8.31","9315.05","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,8,"complex","100.63","0.84","99.37","8.24","9315.22","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,9,"complex","99.13","0.82","100.87","8.47","9315.26","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","steady",10,7,10,"complex","100.74","0.81","99.26","8.34","9315.19","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-02-28 00:08:12"", ""24.95""]}"
"postgres","optimized","warmup",10,8,1,"complex","573.65","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,2,"complex","496.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,3,"complex","610.69","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,4,"complex","596.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,5,"complex","585.75","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,6,"complex","624.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,7,"complex","587.36","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,8,"complex","574.73","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,9,"complex","586.20","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,10,"complex","514.46","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,8,1,"complex","533.88","96.77","18.73","62.25","9295.79","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,2,"complex","454.32","95.12","22.01","76.66","9296.43","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,3,"complex","605.61","97.69","16.51","56.98","9296.27","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,4,"complex","486.20","95.72","20.57","70.81","9296.05","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,5,"complex","538.77","95.64","18.56","64.53","9296.03","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,6,"complex","568.59","97.78","17.59","63.44","9296.22","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,7,"complex","554.35","95.57","18.04","67.18","9296.21","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,8,"complex","544.71","99.81","18.36","64.54","9295.09","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,9,"complex","764.57","98.96","13.08","45.87","9294.86","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,10,"complex","781.28","97.14","12.80","45.69","9295.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 1000, ""first"": [27, ""Echo Flex – Voice control smart home devices with Alexa"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",10,9,1,"complex","149.72","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,2,"complex","150.10","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,3,"complex","146.39","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,4,"complex","149.44","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,5,"complex","150.93","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,6,"complex","148.22","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,7,"complex","145.68","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,8,"complex","148.74","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,9,"complex","150.32","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,10,"complex","146.99","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,9,1,"complex","101.41","0.58","98.61","7.96","9296.43","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,2,"complex","97.13","0.58","102.95","8.20","9296.58","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,3,"complex","98.92","0.58","101.09","8.74","9296.34","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,4,"complex","99.51","0.57","100.49","8.15","9296.49","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,5,"complex","99.96","0.56","100.04","8.04","9296.32","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,6,"complex","99.21","0.57","100.79","8.38","9296.04","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,7,"complex","99.57","0.58","100.44","8.01","9296.56","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,8,"complex","100.64","0.56","99.37","8.00","9296.31","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,9,"complex","98.39","0.57","101.63","8.22","9296.16","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,10,"complex","97.92","0.60","102.12","8.31","9296.14","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 20]}"
"postgres","optimized","warmup",10,10,1,"very_complex","449.03","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,2,"very_complex","452.30","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,3,"very_complex","427.41","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,4,"very_complex","424.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,5,"very_complex","448.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,6,"very_complex","449.41","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,7,"very_complex","438.35","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,8,"very_complex","430.17","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,9,"very_complex","506.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,10,"very_complex","422.30","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,10,1,"very_complex","396.53","248.16","25.22","62.94","9315.92","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,2,"very_complex","395.96","263.64","25.26","62.68","9315.56","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,3,"very_complex","403.57","244.59","24.78","61.39","9315.79","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,4,"very_complex","409.48","253.96","24.42","64.84","9315.58","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,5,"very_complex","410.73","249.38","24.35","64.27","9315.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,6,"very_complex","423.10","244.40","23.64","58.55","9315.90","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,7,"very_complex","377.87","242.23","26.46","62.12","9315.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,8,"very_complex","396.91","255.34","25.19","62.37","9315.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,9,"very_complex","389.69","244.81","25.66","64.08","9315.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,10,10,"very_complex","390.70","241.82","25.59","63.44","9315.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",10,11,1,"very_complex","691.15","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,2,"very_complex","719.64","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,3,"very_complex","663.76","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,4,"very_complex","699.42","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,5,"very_complex","685.60","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,6,"very_complex","678.02","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,7,"very_complex","683.93","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,8,"very_complex","670.16","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,9,"very_complex","680.11","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,10,"very_complex","722.95","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,11,1,"very_complex","661.09","569.96","15.13","69.37","9310.56","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,2,"very_complex","725.07","550.97","13.79","68.72","9310.79","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,3,"very_complex","673.05","549.76","14.86","69.36","9311.18","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,4,"very_complex","661.14","542.46","15.13","68.52","9315.30","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,5,"very_complex","719.00","557.12","13.91","68.39","9315.57","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,6,"very_complex","649.34","554.00","15.40","69.59","9315.22","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,7,"very_complex","647.87","527.08","15.44","69.50","9315.27","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,8,"very_complex","652.56","529.87","15.32","70.38","9315.11","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,9,"very_complex","643.53","535.29","15.54","70.53","9315.46","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","steady",10,11,10,"very_complex","661.70","532.45","15.11","72.27","9315.30","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [875097, 1098030, 2]}"
"postgres","optimized","warmup",10,12,1,"very_complex","439.07","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,2,"very_complex","422.96","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,3,"very_complex","432.26","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,4,"very_complex","431.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,5,"very_complex","470.43","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,6,"very_complex","435.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,7,"very_complex","430.75","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,8,"very_complex","449.32","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,9,"very_complex","428.01","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,10,"very_complex","431.19","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,12,1,"very_complex","420.06","241.67","23.81","62.90","9313.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,2,"very_complex","403.99","245.40","24.75","63.59","9308.60","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,3,"very_complex","398.67","246.23","25.08","61.64","9308.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,4,"very_complex","394.97","246.38","25.32","59.70","9308.95","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,5,"very_complex","377.58","260.12","26.48","62.65","9308.51","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,6,"very_complex","383.55","248.04","26.07","63.42","9308.75","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,7,"very_complex","402.17","246.96","24.86","60.49","9308.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,8,"very_complex","384.68","246.65","26.00","63.44","9308.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,9,"very_complex","398.13","251.00","25.12","62.59","9308.96","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","steady",10,12,10,"very_complex","395.83","250.06","25.26","61.47","9308.99","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 34, ""first"": [25947, 1]}"
"postgres","optimized","warmup",10,13,1,"create","151.56","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,2,"create","146.94","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,3,"create","146.92","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,4,"create","147.47","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,5,"create","147.19","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,6,"create","148.43","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,7,"create","149.74","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,8,"create","147.87","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,9,"create","146.50","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,10,"create","148.79","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,13,1,"create","96.68","0.12","103.44","7.65","9312.76","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135261]}"
"postgres","optimized","steady",10,13,2,"create","98.16","0.14","101.88","7.62","9312.77","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135272]}"
"postgres","optimized","steady",10,13,3,"create","96.28","0.17","103.87","8.14","9312.43","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135283]}"
"postgres","optimized","steady",10,13,4,"create","98.49","0.11","101.53","7.70","9312.98","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135294]}"
"postgres","optimized","steady",10,13,5,"create","98.79","0.11","101.23","7.57","9312.83","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135305]}"
"postgres","optimized","steady",10,13,6,"create","97.46","0.11","102.61","7.64","9312.96","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135316]}"
"postgres","optimized","steady",10,13,7,"create","99.36","0.10","100.64","7.52","9312.55","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135327]}"
"postgres","optimized","steady",10,13,8,"create","96.26","0.10","103.88","8.03","9312.93","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135338]}"
"postgres","optimized","steady",10,13,9,"create","98.85","0.11","101.16","7.46","9312.81","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135349]}"
"postgres","optimized","steady",10,13,10,"create","99.78","0.11","100.22","7.68","9312.66","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [135360]}"
"postgres","optimized","warmup",10,14,1,"create","153.58","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,2,"create","148.31","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,3,"create","149.19","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,4,"create","150.48","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,5,"create","150.37","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,6,"create","148.79","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,7,"create","168.92","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,8,"create","140.70","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,9,"create","149.68","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,10,"create","150.61","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,14,1,"create","101.40","0.10","98.62","7.68","9312.95","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200712]}"
"postgres","optimized","steady",10,14,2,"create","101.03","0.10","98.98","7.70","9313.05","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200723]}"
"postgres","optimized","steady",10,14,3,"create","101.18","0.12","98.84","7.81","9312.84","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200734]}"
"postgres","optimized","steady",10,14,4,"create","97.67","0.10","102.38","7.80","9313.00","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200745]}"
"postgres","optimized","steady",10,14,5,"create","99.25","0.18","100.76","7.70","9312.96","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200756]}"
"postgres","optimized","steady",10,14,6,"create","93.11","0.10","107.40","8.27","9313.02","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200767]}"
"postgres","optimized","steady",10,14,7,"create","98.70","0.10","101.31","8.06","9312.79","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200778]}"
"postgres","optimized","steady",10,14,8,"create","96.23","0.12","103.92","7.85","9312.95","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200789]}"
"postgres","optimized","steady",10,14,9,"create","97.55","0.10","102.51","7.84","9313.27","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200800]}"
"postgres","optimized","steady",10,14,10,"create","95.58","0.10","104.63","8.03","9312.99","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [200811]}"
"postgres","optimized","warmup",10,15,1,"create","153.49","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,2,"create","147.92","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,3,"create","145.48","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,4,"create","149.14","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,5,"create","148.80","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,6,"create","151.34","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,7,"create","147.34","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,8,"create","150.80","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,9,"create","147.99","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,10,"create","142.73","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,15,1,"create","99.84","0.12","100.16","7.70","9313.02","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149887]}"
"postgres","optimized","steady",10,15,2,"create","96.28","0.12","103.86","7.88","9313.10","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149898]}"
"postgres","optimized","steady",10,15,3,"create","97.78","0.12","102.27","7.77","9313.33","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149909]}"
"postgres","optimized","steady",10,15,4,"create","95.99","0.12","104.18","7.89","9313.33","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149920]}"
"postgres","optimized","steady",10,15,5,"create","95.90","0.12","104.27","8.27","9313.00","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149931]}"
"postgres","optimized","steady",10,15,6,"create","96.16","0.13","104.00","7.96","9312.96","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149942]}"
"postgres","optimized","steady",10,15,7,"create","101.50","0.17","98.52","8.06","9313.22","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149953]}"
"postgres","optimized","steady",10,15,8,"create","96.30","0.12","103.84","7.92","9313.52","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149964]}"
"postgres","optimized","steady",10,15,9,"create","98.56","0.12","101.46","7.70","9313.28","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149975]}"
"postgres","optimized","steady",10,15,10,"create","97.91","0.12","102.14","7.76","9313.45","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [149986]}"
"postgres","optimized","warmup",10,16,1,"create","153.05","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,2,"create","150.33","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,3,"create","146.72","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,4,"create","147.38","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,5,"create","148.84","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,6,"create","147.79","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,7,"create","142.37","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,8,"create","152.87","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,9,"create","148.61","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,10,"create","143.27","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,16,1,"create","96.38","0.13","103.76","8.01","9313.77","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050494]}"
"postgres","optimized","steady",10,16,2,"create","98.01","0.12","102.03","7.88","9313.81","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050505]}"
"postgres","optimized","steady",10,16,3,"create","97.21","0.13","102.87","7.90","9313.68","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050516]}"
"postgres","optimized","steady",10,16,4,"create","99.48","0.12","100.52","7.77","9313.43","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050527]}"
"postgres","optimized","steady",10,16,5,"create","95.75","0.14","104.44","8.23","9313.28","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050538]}"
"postgres","optimized","steady",10,16,6,"create","100.40","0.13","99.60","7.67","9313.39","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050549]}"
"postgres","optimized","steady",10,16,7,"create","98.54","0.12","101.48","8.20","9313.53","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050560]}"
"postgres","optimized","steady",10,16,8,"create","95.34","0.12","104.89","8.24","9313.59","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050571]}"
"postgres","optimized","steady",10,16,9,"create","96.76","0.12","103.35","8.03","9313.42","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050582]}"
"postgres","optimized","steady",10,16,10,"create","97.83","0.14","102.22","7.94","9313.45","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [1050593]}"
"postgres","optimized","warmup",10,17,1,"update","166.29","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,2,"update","143.34","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,3,"update","147.84","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,4,"update","146.52","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,5,"update","147.39","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,6,"update","146.60","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,7,"update","147.99","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,8,"update","143.89","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,9,"update","147.06","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,10,"update","147.22","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,17,1,"update","96.80","0.08","103.30","7.42","9313.42","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 245]}"
"postgres","optimized","steady",10,17,2,"update","96.76","0.12","103.35","7.56","9313.65","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 255]}"
"postgres","optimized","steady",10,17,3,"update","97.24","0.08","102.84","7.30","9313.69","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 265]}"
"postgres","optimized","steady",10,17,4,"update","99.20","0.08","100.81","7.49","9313.71","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 275]}"
"postgres","optimized","steady",10,17,5,"update","99.28","0.08","100.73","7.32","9313.70","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 285]}"
"postgres","optimized","steady",10,17,6,"update","97.33","0.08","102.74","7.87","9313.78","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 295]}"
"postgres","optimized","steady",10,17,7,"update","100.07","0.08","99.93","7.23","9313.69","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 305]}"
"postgres","optimized","steady",10,17,8,"update","120.37","0.09","83.08","6.12","9313.90","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 315]}"
"postgres","optimized","steady",10,17,9,"update","100.48","0.08","99.52","7.32","9313.58","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 325]}"
"postgres","optimized","steady",10,17,10,"update","100.75","0.09","99.26","7.31","9313.58","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 335]}"
"postgres","optimized","warmup",10,18,1,"update","149.46","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,2,"update","153.51","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,3,"update","150.69","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,4,"update","146.55","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,5,"update","144.59","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,6,"update","149.02","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,7,"update","144.52","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,8,"update","146.90","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,9,"update","147.82","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,10,"update","148.38","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,18,1,"update","97.26","0.16","102.82","7.57","9315.14","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [281, 2]}"
"postgres","optimized","steady",10,18,2,"update","119.79","0.13","83.48","6.19","9314.65","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [291, 2]}"
"postgres","optimized","steady",10,18,3,"update","98.39","0.13","101.64","7.52","9314.88","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [301, 3]}"
"postgres","optimized","steady",10,18,4,"update","98.82","0.14","101.20","7.44","9315.07","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [311, 4]}"
"postgres","optimized","steady",10,18,5,"update","95.84","0.12","104.34","8.00","9315.12","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [187, 1]}"
"postgres","optimized","steady",10,18,6,"update","97.22","0.10","102.86","7.84","9314.98","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [197, 2]}"
"postgres","optimized","steady",10,18,7,"update","96.41","0.08","103.72","7.55","9315.34","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [205, 1]}"
"postgres","optimized","steady",10,18,8,"update","97.47","0.08","102.59","7.47","9315.21","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [211, 1]}"
"postgres","optimized","steady",10,18,9,"update","113.26","0.08","88.29","6.41","9314.97","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [211, 1]}"
"postgres","optimized","steady",10,18,10,"update","99.34","0.09","100.67","7.36","9314.80","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [211, 1]}"
"postgres","optimized","warmup",10,19,1,"update","148.03","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,2,"update","149.98","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,3,"update","146.61","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,4,"update","147.31","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,5,"update","146.92","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,6,"update","146.53","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,7,"update","148.25","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,8,"update","147.57","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,9,"update","148.04","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,10,"update","147.58","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,19,1,"update","97.88","0.13","102.16","7.44","9315.81","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [281, 5]}"
"postgres","optimized","steady",10,19,2,"update","95.87","0.11","104.30","7.56","9315.65","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [291, 4]}"
"postgres","optimized","steady",10,19,3,"update","96.29","0.17","103.86","7.45","9315.69","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [301, 5]}"
"postgres","optimized","steady",10,19,4,"update","96.72","0.10","103.39","7.34","9316.09","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [311, 5]}"
"postgres","optimized","steady",10,19,5,"update","95.83","0.10","104.36","7.63","9315.99","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [187, 8]}"
"postgres","optimized","steady",10,19,6,"update","96.74","0.13","103.37","7.77","9315.94","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [197, 8]}"
"postgres","optimized","steady",10,19,7,"update","97.50","0.19","102.56","7.44","9315.80","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [207, 7]}"
"postgres","optimized","steady",10,19,8,"update","97.63","0.12","102.43","7.42","9316.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [217, 8]}"
"postgres","optimized","steady",10,19,9,"update","96.78","0.12","103.33","7.49","9316.25","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [227, 7]}"
"postgres","optimized","steady",10,19,10,"update","96.14","0.11","104.01","7.55","9315.84","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [237, 7]}"
"postgres","optimized","warmup",10,20,1,"update","149.21","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,2,"update","146.88","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,3,"update","147.77","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,4,"update","147.67","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,5,"update","149.83","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,6,"update","143.85","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,7,"update","148.82","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,8,"update","149.17","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,9,"update","152.10","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,10,"update","144.89","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,20,1,"update","97.03","0.18","103.06","7.76","9318.32","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [111, ""ismet11@example.com.tmp""]}"
"postgres","optimized","steady",10,20,2,"update","97.96","0.16","102.09","7.76","9318.46","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [121, ""ditmaranders@example.net.tmp""]}"
"postgres","optimized","steady",10,20,3,"update","95.93","0.15","104.25","7.82","9318.20","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [131, ""thanelalfons@example.com.tmp""]}"
"postgres","optimized","steady",10,20,4,"update","101.72","0.18","98.31","7.39","9318.62","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [141, ""bgorlitz@example.net.tmp""]}"
"postgres","optimized","steady",10,20,5,"update","94.24","0.15","106.11","8.13","9318.53","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [151, ""arnulfseidel@example.net.tmp""]}"
"postgres","optimized","steady",10,20,6,"update","98.37","0.21","101.66","7.93","9318.85","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [161, ""marielepoelitz@example.net.tmp""]}"
"postgres","optimized","steady",10,20,7,"update","96.55","0.23","103.57","7.84","9318.87","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [171, ""swetlana35@example.org.tmp""]}"
"postgres","optimized","steady",10,20,8,"update","95.16","0.14","105.09","8.15","9318.74","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [181, ""heinfriedpoelitz@example.net.tmp""]}"
"postgres","optimized","steady",10,20,9,"update","97.60","0.12","102.46","7.75","9319.35","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [97, ""sritter@example.net.tmp.tmp""]}"
"postgres","optimized","steady",10,20,10,"update","99.10","0.16","100.91","7.79","9318.82","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [108, ""maxim71@example.com.tmp.tmp""]}"
"postgres","optimized","warmup",10,21,1,"delete","146.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,2,"delete","141.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,3,"delete","150.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,4,"delete","151.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,5,"delete","148.85","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,6,"delete","150.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,7,"delete","148.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,8,"delete","153.75","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,9,"delete","139.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,10,"delete","151.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,21,1,"delete","100.60","0.05","99.40","7.32","9319.49","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,21,2,"delete","99.17","0.04","100.83","7.34","9319.23","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,21,3,"delete","99.11","0.04","100.90","7.38","9319.19","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,21,4,"delete","100.91","0.04","99.10","7.20","9319.04","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,21,5,"delete","100.29","0.04","99.71","7.70","9319.18","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,21,6,"delete","116.94","0.04","85.51","6.12","9319.15","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,21,7,"delete","94.82","0.04","105.47","7.66","9318.91","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,21,8,"delete","97.44","0.04","102.63","7.23","9318.99","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,21,9,"delete","96.79","0.04","103.32","7.26","9319.29","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,21,10,"delete","97.24","0.07","102.84","7.48","9319.35","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,22,1,"delete","172.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,2,"delete","149.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,3,"delete","148.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,4,"delete","147.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,5,"delete","149.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,6,"delete","147.33","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,7,"delete","147.53","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,8,"delete","150.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,9,"delete","147.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,10,"delete","167.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,22,1,"delete","96.48","0.04","103.64","7.43","9319.33","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,22,2,"delete","96.46","0.04","103.67","7.42","9319.33","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,22,3,"delete","98.28","0.04","101.74","7.33","9319.18","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,22,4,"delete","97.22","0.04","102.86","7.32","9319.03","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,22,5,"delete","96.52","0.04","103.61","7.74","9319.12","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,22,6,"delete","97.70","0.04","102.36","7.45","9318.97","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,22,7,"delete","95.71","0.04","104.48","7.53","9319.04","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,22,8,"delete","97.34","0.04","102.73","7.42","9319.55","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,22,9,"delete","95.58","0.04","104.62","7.48","9319.04","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,22,10,"delete","92.64","0.04","107.94","8.04","9318.85","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,23,1,"delete","147.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,2,"delete","148.14","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,3,"delete","141.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,4,"delete","148.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,5,"delete","146.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,6,"delete","146.50","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,7,"delete","148.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,8,"delete","150.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,9,"delete","148.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,10,"delete","145.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,23,1,"delete","98.06","0.04","101.98","7.54","9319.15","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,23,2,"delete","96.67","0.04","103.45","7.61","9319.09","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,23,3,"delete","97.10","0.04","102.99","7.43","9318.97","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,23,4,"delete","97.29","0.04","102.79","7.81","9319.28","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,23,5,"delete","94.08","0.04","106.29","8.36","9319.59","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,23,6,"delete","99.21","0.04","100.80","7.24","9319.20","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,23,7,"delete","95.68","0.04","104.51","7.55","9318.79","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,23,8,"delete","97.20","0.04","102.88","7.43","9319.06","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,23,9,"delete","99.51","0.04","100.50","7.34","9319.35","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,23,10,"delete","97.17","0.04","102.91","7.49","9319.42","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,24,1,"delete","147.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,2,"delete","148.34","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,3,"delete","165.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,4,"delete","147.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,5,"delete","146.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,6,"delete","147.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,7,"delete","148.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,8,"delete","147.83","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,9,"delete","147.33","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,10,"delete","147.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,24,1,"delete","96.92","0.04","103.18","7.49","9319.24","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,24,2,"delete","96.10","0.05","104.06","7.36","9319.30","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,24,3,"delete","97.48","0.04","102.58","7.45","9319.42","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,24,4,"delete","95.33","0.04","104.90","7.47","9319.27","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,24,5,"delete","98.40","0.04","101.63","7.76","9319.24","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,24,6,"delete","97.11","0.04","102.97","7.68","9319.09","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,24,7,"delete","100.46","0.04","99.54","7.32","9318.91","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,24,8,"delete","97.52","0.04","102.54","7.45","9319.43","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,24,9,"delete","94.10","0.04","106.27","8.04","9319.54","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,24,10,"delete","97.68","0.05","102.38","7.55","9319.41","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [371]}"
