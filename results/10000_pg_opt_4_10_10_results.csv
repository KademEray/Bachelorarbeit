"db","mode","phase","concurrency","query_no","repeat","complexity","duration_ms","server_ms","qps","avg_cpu","avg_mem","disk_mb","statement","result"
"postgres","optimized","warmup",1,1,1,"simple","157.58","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,2,"simple","141.72","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,3,"simple","142.51","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,4,"simple","142.17","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,5,"simple","140.23","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,6,"simple","139.42","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,7,"simple","140.32","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,8,"simple","140.56","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,9,"simple","139.71","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,10,"simple","140.73","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,1,1,"simple","90.65","10.86","11.03","6.50","6325.09","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,2,"simple","90.25","10.90","11.08","6.50","6325.33","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,3,"simple","93.62","10.88","10.68","6.35","6325.38","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,4,"simple","92.75","10.99","10.78","6.40","6325.35","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,5,"simple","90.73","11.08","11.02","6.41","6325.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,6,"simple","93.90","10.89","10.65","6.41","6325.37","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,7,"simple","90.85","10.89","11.01","6.37","6325.53","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,8,"simple","97.27","10.92","10.28","5.97","6324.99","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,9,"simple","90.85","10.85","11.01","6.25","6325.44","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,1,10,"simple","93.91","10.87","10.65","6.43","6325.13","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",1,2,1,"simple","51.44","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,2,"simple","51.19","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,3,"simple","51.02","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,4,"simple","51.03","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,5,"simple","51.20","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,6,"simple","51.18","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,7,"simple","51.13","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,8,"simple","51.10","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,9,"simple","51.33","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,10,"simple","51.12","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,2,1,"simple","1.02","0.07","985.12","255.83","6325.20","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,2,"simple","0.89","0.07","1123.72","290.98","6325.13","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,3,"simple","0.92","0.07","1085.07","285.31","6325.80","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,4,"simple","1.03","0.07","974.47","255.50","6325.18","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,5,"simple","0.93","0.07","1070.21","288.37","6325.46","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,6,"simple","0.97","0.07","1029.65","261.97","6325.37","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,7,"simple","0.95","0.07","1049.32","273.78","6325.29","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,8,"simple","0.93","0.07","1080.85","277.67","6325.04","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,9,"simple","0.93","0.07","1076.66","284.91","6325.72","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,10,"simple","0.91","0.07","1101.32","289.36","6325.15","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",1,3,1,"simple","52.14","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,2,"simple","51.99","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,3,"simple","51.88","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,4,"simple","52.02","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,5,"simple","51.96","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,6,"simple","52.06","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,7,"simple","52.16","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,8,"simple","51.89","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,9,"simple","52.22","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,10,"simple","51.81","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,3,1,"simple","1.67","0.19","598.62","158.93","6325.11","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,2,"simple","1.78","0.18","563.06","152.45","6325.49","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,3,"simple","1.73","0.18","578.67","151.96","6325.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,4,"simple","1.75","0.20","571.00","155.13","6325.38","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,5,"simple","1.75","0.18","571.62","149.28","6325.13","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,6,"simple","1.65","0.19","605.99","162.92","6325.47","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,7,"simple","1.73","0.18","577.30","154.94","6325.42","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,8,"simple","1.70","0.19","586.79","154.16","6325.37","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,9,"simple","1.73","0.18","576.97","150.57","6325.07","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,10,"simple","1.70","0.21","586.65","158.91","6324.99","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Philomena-Söding-Ring 78"", ""Beilngries"", ""96883"", ""Deutschland"", true]}"
"postgres","optimized","warmup",1,4,1,"medium","54.16","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,2,"medium","53.44","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,3,"medium","53.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,4,"medium","53.30","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,5,"medium","53.67","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,6,"medium","53.20","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,7,"medium","53.69","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,8,"medium","53.34","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,9,"medium","53.50","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,10,"medium","53.52","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,4,1,"medium","3.16","0.47","316.35","84.27","6325.35","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,2,"medium","3.26","0.49","306.79","86.80","6325.26","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,3,"medium","3.25","0.45","307.51","83.66","6325.52","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,4,"medium","3.35","0.45","298.77","83.04","6325.45","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,5,"medium","3.27","0.45","305.54","85.01","6325.11","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,6,"medium","3.23","0.45","309.54","86.95","6325.49","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,7,"medium","3.28","0.45","304.86","83.37","6325.61","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,8,"medium","3.26","0.45","306.61","85.64","6325.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,9,"medium","3.60","0.45","277.78","82.94","6325.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",1,4,10,"medium","3.28","0.47","304.86","83.11","6325.74","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 54, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",1,5,1,"medium","78.34","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,2,"medium","71.66","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,3,"medium","71.97","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,4,"medium","72.17","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,5,"medium","71.37","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,6,"medium","71.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,7,"medium","71.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,8,"medium","71.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,9,"medium","71.80","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,10,"medium","72.45","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,5,1,"medium","20.81","20.07","48.05","29.59","6328.82","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,2,"medium","20.57","20.05","48.61","29.73","6328.91","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,3,"medium","21.33","20.98","46.88","28.73","6329.41","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,4,"medium","20.78","20.16","48.12","29.44","6329.37","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,5,"medium","20.50","19.99","48.79","29.68","6329.03","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,6,"medium","20.87","20.08","47.91","29.45","6329.41","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,7,"medium","20.52","20.07","48.74","29.67","6329.19","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,8,"medium","20.54","19.92","48.68","32.00","6329.25","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,9,"medium","21.38","19.98","46.77","29.35","6329.16","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",1,5,10,"medium","21.01","19.97","47.60","29.51","6329.21","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","warmup",1,6,1,"medium","51.96","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,2,"medium","51.40","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,3,"medium","51.54","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,4,"medium","51.73","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,5,"medium","51.65","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,6,"medium","51.83","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,7,"medium","51.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,8,"medium","51.49","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,9,"medium","51.46","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,10,"medium","51.38","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,6,1,"medium","1.27","0.47","787.77","205.36","6329.27","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,2,"medium","1.28","0.48","781.68","208.47","6329.40","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,3,"medium","1.26","0.50","791.45","206.07","6329.38","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,4,"medium","1.29","0.47","774.95","203.93","6329.67","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,5,"medium","1.29","0.47","772.56","200.76","6329.41","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,6,"medium","1.27","0.47","790.39","205.62","6329.29","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,7,"medium","1.25","0.47","802.70","209.83","6329.45","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,8,"medium","1.29","0.49","776.34","201.17","6329.38","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,9,"medium","1.30","0.47","771.01","202.31","6329.37","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",1,6,10,"medium","1.34","0.47","747.55","197.59","6329.27","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","warmup",1,7,1,"complex","56.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,2,"complex","52.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,3,"complex","52.35","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,4,"complex","52.45","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,5,"complex","52.60","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,6,"complex","52.46","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,7,"complex","52.23","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,8,"complex","52.44","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,9,"complex","52.59","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,10,"complex","52.37","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,7,1,"complex","2.16","0.80","462.66","123.89","6329.34","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,2,"complex","2.10","0.81","475.69","127.47","6329.53","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,3,"complex","2.15","0.83","465.51","127.04","6329.41","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,4,"complex","2.13","0.79","470.34","148.56","6329.61","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,5,"complex","2.13","0.80","470.37","127.78","6329.54","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,6,"complex","2.13","0.79","469.22","126.19","6329.43","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,7,"complex","2.13","0.80","469.88","126.11","6329.46","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,8,"complex","2.15","0.83","464.23","126.18","6329.34","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,9,"complex","2.12","0.81","471.16","128.99","6329.60","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",1,7,10,"complex","2.13","0.79","469.62","126.24","6329.85","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","warmup",1,8,1,"complex","73.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,2,"complex","60.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,3,"complex","59.26","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,4,"complex","59.43","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,5,"complex","59.55","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,6,"complex","59.31","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,7,"complex","59.61","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,8,"complex","59.52","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,9,"complex","59.21","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,10,"complex","59.39","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,8,1,"complex","9.13","8.09","109.52","35.45","6330.51","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,2,"complex","9.10","8.13","109.94","36.14","6330.76","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,3,"complex","9.12","8.07","109.61","36.32","6330.65","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,4,"complex","9.24","8.20","108.22","35.21","6330.79","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,5,"complex","9.06","8.16","110.39","36.22","6330.53","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,6,"complex","9.15","8.11","109.34","35.10","6330.30","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,7,"complex","9.17","8.10","109.05","35.58","6330.49","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,8,"complex","9.10","8.13","109.84","35.67","6330.64","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,9,"complex","9.22","8.14","108.52","35.04","6330.33","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,10,"complex","9.16","8.12","109.20","35.53","6330.39","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 491, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",1,9,1,"complex","52.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,2,"complex","51.75","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,3,"complex","51.60","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,4,"complex","52.14","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,5,"complex","51.78","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,6,"complex","51.75","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,7,"complex","51.65","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,8,"complex","51.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,9,"complex","51.97","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,10,"complex","51.74","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,9,1,"complex","1.52","0.50","655.74","180.69","6330.80","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,2,"complex","1.50","0.52","668.58","173.95","6330.48","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,3,"complex","1.49","0.50","669.34","176.32","6330.43","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,4,"complex","1.48","0.51","675.31","178.15","6330.75","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,5,"complex","1.46","0.54","684.88","182.30","6330.38","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,6,"complex","1.49","0.50","673.13","177.52","6330.65","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,7,"complex","1.53","0.50","651.89","168.04","6330.39","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,8,"complex","1.45","0.52","688.33","182.42","6330.81","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,9,"complex","1.50","0.50","666.71","175.30","6330.90","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","steady",1,9,10,"complex","1.48","0.54","677.60","180.00","6330.63","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 2]}"
"postgres","optimized","warmup",1,10,1,"very_complex","66.36","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,2,"very_complex","66.14","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,3,"very_complex","68.03","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,4,"very_complex","68.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,5,"very_complex","70.50","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,6,"very_complex","68.41","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,7,"very_complex","68.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,8,"very_complex","67.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,9,"very_complex","68.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,10,"very_complex","67.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,10,1,"very_complex","16.58","20.34","60.33","24.23","6330.65","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,2,"very_complex","17.38","20.30","57.53","23.10","6330.41","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,3,"very_complex","17.59","20.24","56.85","22.70","6330.62","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,4,"very_complex","16.83","19.43","59.43","23.25","6330.37","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,5,"very_complex","17.07","19.33","58.57","22.96","6330.59","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,6,"very_complex","16.82","19.44","59.46","23.65","6330.22","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,7,"very_complex","19.42","19.46","51.49","21.67","6330.24","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,8,"very_complex","16.78","19.36","59.60","23.03","6330.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,9,"very_complex","16.56","20.38","60.39","23.45","6330.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,10,10,"very_complex","16.79","19.34","59.56","23.65","6330.23","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",1,11,1,"very_complex","91.54","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,2,"very_complex","92.08","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,3,"very_complex","91.83","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,4,"very_complex","91.35","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,5,"very_complex","90.45","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,6,"very_complex","90.81","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,7,"very_complex","90.95","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,8,"very_complex","90.79","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,9,"very_complex","90.78","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,10,"very_complex","90.57","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,11,1,"very_complex","40.10","48.94","24.94","14.56","6331.80","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,2,"very_complex","39.72","48.95","25.18","14.69","6331.60","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,3,"very_complex","39.87","48.31","25.08","14.71","6331.49","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,4,"very_complex","40.09","48.71","24.94","14.74","6331.46","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,5,"very_complex","40.74","48.55","24.54","14.52","6331.48","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,6,"very_complex","39.84","49.20","25.10","14.62","6331.93","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,7,"very_complex","39.95","48.58","25.03","14.80","6331.58","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,8,"very_complex","40.08","48.37","24.95","14.63","6331.67","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,9,"very_complex","39.68","48.53","25.20","14.61","6331.88","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",1,11,10,"very_complex","39.84","49.03","25.10","14.67","6331.98","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","warmup",1,12,1,"very_complex","67.73","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,2,"very_complex","67.88","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,3,"very_complex","69.93","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,4,"very_complex","70.27","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,5,"very_complex","70.69","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,6,"very_complex","66.99","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,7,"very_complex","68.43","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,8,"very_complex","67.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,9,"very_complex","70.29","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,10,"very_complex","68.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,12,1,"very_complex","16.81","19.34","59.47","23.28","6330.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,2,"very_complex","17.02","19.40","58.77","23.01","6330.10","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,3,"very_complex","16.80","21.90","59.53","25.45","6330.57","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,4,"very_complex","18.10","19.45","55.25","22.62","6330.42","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,5,"very_complex","16.76","19.56","59.67","23.38","6330.48","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,6,"very_complex","16.77","19.42","59.63","23.37","6330.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,7,"very_complex","17.02","19.59","58.77","23.29","6330.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,8,"very_complex","16.74","22.06","59.73","23.37","6330.26","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,9,"very_complex","17.20","21.77","58.15","23.08","6330.34","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",1,12,10,"very_complex","17.11","19.87","58.44","22.83","6330.65","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",1,13,1,"create","54.60","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,2,"create","53.82","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,3,"create","53.61","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,4,"create","53.80","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,5,"create","53.64","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,6,"create","53.90","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,7,"create","53.90","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,8,"create","53.88","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,9,"create","54.15","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,10,"create","53.79","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,13,1,"create","3.40","0.11","294.41","75.49","6330.62","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13460]}"
"postgres","optimized","steady",1,13,2,"create","3.60","0.10","277.75","73.19","6330.31","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13462]}"
"postgres","optimized","steady",1,13,3,"create","3.51","0.11","285.05","74.03","6330.44","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13464]}"
"postgres","optimized","steady",1,13,4,"create","3.50","0.10","285.55","74.84","6330.18","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13466]}"
"postgres","optimized","steady",1,13,5,"create","3.62","0.10","276.57","76.71","6330.38","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13468]}"
"postgres","optimized","steady",1,13,6,"create","3.56","0.10","281.21","73.48","6330.38","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13470]}"
"postgres","optimized","steady",1,13,7,"create","3.52","0.12","284.16","74.36","6330.28","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13472]}"
"postgres","optimized","steady",1,13,8,"create","3.54","0.10","282.48","74.35","6330.94","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13474]}"
"postgres","optimized","steady",1,13,9,"create","3.57","0.13","279.75","72.37","6330.79","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13476]}"
"postgres","optimized","steady",1,13,10,"create","3.49","0.13","286.17","75.02","6330.72","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13478]}"
"postgres","optimized","warmup",1,14,1,"create","54.06","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,2,"create","53.89","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,3,"create","55.25","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,4,"create","53.58","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,5,"create","53.89","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,6,"create","53.81","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,7,"create","53.70","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,8,"create","53.86","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,9,"create","53.87","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,10,"create","53.64","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,14,1,"create","3.55","0.10","281.66","72.87","6330.76","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19967]}"
"postgres","optimized","steady",1,14,2,"create","3.50","0.10","285.85","75.03","6330.72","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19969]}"
"postgres","optimized","steady",1,14,3,"create","3.52","0.09","283.81","75.18","6330.55","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19971]}"
"postgres","optimized","steady",1,14,4,"create","3.44","0.13","290.51","75.53","6330.41","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19973]}"
"postgres","optimized","steady",1,14,5,"create","3.46","0.10","289.04","74.88","6330.63","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19975]}"
"postgres","optimized","steady",1,14,6,"create","3.47","0.10","288.52","77.38","6330.44","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19977]}"
"postgres","optimized","steady",1,14,7,"create","3.52","0.10","283.89","73.92","6330.47","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19979]}"
"postgres","optimized","steady",1,14,8,"create","3.56","0.10","280.76","72.73","6330.47","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19981]}"
"postgres","optimized","steady",1,14,9,"create","3.50","0.10","285.86","73.61","6330.57","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19983]}"
"postgres","optimized","steady",1,14,10,"create","3.70","0.16","270.49","70.08","6330.74","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [19985]}"
"postgres","optimized","warmup",1,15,1,"create","54.24","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,2,"create","53.76","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,3,"create","53.92","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,4,"create","54.05","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,5,"create","53.99","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,6,"create","54.43","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,7,"create","54.06","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,8,"create","54.07","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,9,"create","54.04","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,10,"create","53.90","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,15,1,"create","3.73","0.11","268.25","69.46","6330.53","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15078]}"
"postgres","optimized","steady",1,15,2,"create","3.81","0.14","262.38","70.55","6330.99","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15080]}"
"postgres","optimized","steady",1,15,3,"create","3.94","0.11","254.01","67.12","6330.62","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15082]}"
"postgres","optimized","steady",1,15,4,"create","4.00","0.12","250.21","66.15","6330.79","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15084]}"
"postgres","optimized","steady",1,15,5,"create","3.93","0.11","254.21","68.81","6330.88","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15086]}"
"postgres","optimized","steady",1,15,6,"create","4.02","0.15","248.76","65.79","6330.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15088]}"
"postgres","optimized","steady",1,15,7,"create","4.04","0.16","247.35","66.04","6330.64","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15090]}"
"postgres","optimized","steady",1,15,8,"create","3.87","0.14","258.63","80.53","6330.93","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15092]}"
"postgres","optimized","steady",1,15,9,"create","4.19","0.14","238.89","63.66","6330.76","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15094]}"
"postgres","optimized","steady",1,15,10,"create","3.93","0.12","254.34","66.40","6330.54","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15096]}"
"postgres","optimized","warmup",1,16,1,"create","54.25","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,2,"create","53.92","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,3,"create","54.25","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,4,"create","53.84","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,5,"create","54.05","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,6,"create","53.90","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,7,"create","53.84","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,8,"create","53.98","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,9,"create","54.07","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,10,"create","54.42","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,16,1,"create","4.22","0.12","237.01","61.16","6330.45","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104831]}"
"postgres","optimized","steady",1,16,2,"create","3.87","0.11","258.24","67.73","6330.91","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104833]}"
"postgres","optimized","steady",1,16,3,"create","3.88","0.14","257.59","67.50","6330.72","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104835]}"
"postgres","optimized","steady",1,16,4,"create","3.90","0.12","256.71","68.42","6330.84","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104837]}"
"postgres","optimized","steady",1,16,5,"create","3.72","0.12","268.77","71.54","6330.52","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104839]}"
"postgres","optimized","steady",1,16,6,"create","3.90","0.11","256.59","66.73","6331.06","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104841]}"
"postgres","optimized","steady",1,16,7,"create","3.85","0.12","259.86","67.50","6330.72","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104843]}"
"postgres","optimized","steady",1,16,8,"create","3.74","0.24","267.12","68.56","6330.89","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104845]}"
"postgres","optimized","steady",1,16,9,"create","3.87","0.11","258.72","67.28","6331.06","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104847]}"
"postgres","optimized","steady",1,16,10,"create","3.78","0.11","264.38","68.92","6330.59","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104849]}"
"postgres","optimized","warmup",1,17,1,"update","55.72","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,2,"update","54.17","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,3,"update","54.13","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,4,"update","53.75","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,5,"update","53.87","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,6,"update","54.31","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,7,"update","53.88","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,8,"update","53.97","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,9,"update","53.85","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,10,"update","54.21","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,17,1,"update","3.84","0.13","260.35","68.15","6330.46","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [11, 93]}"
"postgres","optimized","steady",1,17,2,"update","3.68","0.08","271.67","69.12","6330.59","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [12, 64]}"
"postgres","optimized","steady",1,17,3,"update","3.64","0.08","274.41","72.00","6330.99","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [13, 85]}"
"postgres","optimized","steady",1,17,4,"update","3.73","0.08","268.27","69.56","6330.92","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [14, 8]}"
"postgres","optimized","steady",1,17,5,"update","3.77","0.12","265.60","70.44","6330.74","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [15, 48]}"
"postgres","optimized","steady",1,17,6,"update","3.79","0.08","263.85","68.66","6330.57","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [16, 37]}"
"postgres","optimized","steady",1,17,7,"update","3.82","0.08","261.89","67.40","6330.66","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [17, 8]}"
"postgres","optimized","steady",1,17,8,"update","3.76","0.08","265.73","69.03","6330.88","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [18, 71]}"
"postgres","optimized","steady",1,17,9,"update","3.71","0.08","269.54","69.88","6331.20","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [19, 76]}"
"postgres","optimized","steady",1,17,10,"update","3.74","0.08","267.18","69.29","6330.82","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [20, 32]}"
"postgres","optimized","warmup",1,18,1,"update","54.14","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,2,"update","53.94","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,3,"update","54.29","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,4,"update","53.94","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,5,"update","53.87","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,6,"update","54.03","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,7,"update","53.82","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,8,"update","53.99","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,9,"update","53.96","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,10,"update","53.88","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,18,1,"update","3.72","0.10","268.66","69.00","6330.93","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [11, 1]}"
"postgres","optimized","steady",1,18,2,"update","3.72","0.11","268.76","69.38","6330.99","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [12, 3]}"
"postgres","optimized","steady",1,18,3,"update","3.82","0.10","262.05","69.31","6331.10","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [13, 1]}"
"postgres","optimized","steady",1,18,4,"update","3.73","0.10","267.94","69.22","6330.79","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [14, 2]}"
"postgres","optimized","steady",1,18,5,"update","3.81","0.10","262.70","69.84","6330.58","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [15, 3]}"
"postgres","optimized","steady",1,18,6,"update","3.64","0.10","274.63","70.44","6330.91","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [16, 1]}"
"postgres","optimized","steady",1,18,7,"update","3.87","0.10","258.46","67.48","6330.59","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [17, 3]}"
"postgres","optimized","steady",1,18,8,"update","3.73","0.10","267.96","70.36","6330.68","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [18, 1]}"
"postgres","optimized","steady",1,18,9,"update","3.71","0.10","269.20","70.75","6330.81","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [19, 2]}"
"postgres","optimized","steady",1,18,10,"update","3.77","0.08","264.99","68.62","6331.00","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [20, 4]}"
"postgres","optimized","warmup",1,19,1,"update","54.38","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,2,"update","54.05","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,3,"update","54.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,4,"update","53.93","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,5,"update","53.97","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,6,"update","54.14","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,7,"update","54.26","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,8,"update","54.26","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,9,"update","53.93","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,10,"update","53.79","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,19,1,"update","3.81","0.17","262.66","67.34","6331.09","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [11, 4]}"
"postgres","optimized","steady",1,19,2,"update","3.73","0.09","267.74","71.05","6331.01","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [12, 4]}"
"postgres","optimized","steady",1,19,3,"update","3.76","0.09","265.61","70.60","6331.26","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [13, 4]}"
"postgres","optimized","steady",1,19,4,"update","3.79","0.12","263.96","69.04","6330.83","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [14, 5]}"
"postgres","optimized","steady",1,19,5,"update","3.76","0.09","266.06","69.43","6330.92","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [15, 5]}"
"postgres","optimized","steady",1,19,6,"update","3.71","0.11","269.66","70.97","6330.65","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [16, 4]}"
"postgres","optimized","steady",1,19,7,"update","3.67","0.09","272.55","71.81","6330.85","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [17, 4]}"
"postgres","optimized","steady",1,19,8,"update","3.64","0.08","274.48","73.55","6330.77","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [18, 4]}"
"postgres","optimized","steady",1,19,9,"update","3.68","0.10","271.42","71.72","6331.00","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [19, 4]}"
"postgres","optimized","steady",1,19,10,"update","3.64","0.10","274.89","71.28","6330.95","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [20, 5]}"
"postgres","optimized","warmup",1,20,1,"update","54.42","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,2,"update","54.27","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,3,"update","54.08","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,4,"update","53.99","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,5,"update","54.03","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,6,"update","54.16","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,7,"update","53.89","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,8,"update","54.18","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,9,"update","53.88","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,10,"update","53.96","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,20,1,"update","3.80","0.12","263.27","68.42","6331.02","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [11, ""ella51@example.net.tmp""]}"
"postgres","optimized","steady",1,20,2,"update","3.81","0.12","262.49","71.31","6330.92","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [12, ""hheinz@example.net.tmp""]}"
"postgres","optimized","steady",1,20,3,"update","3.73","0.13","268.02","70.62","6330.96","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [13, ""leyla92@example.net.tmp""]}"
"postgres","optimized","steady",1,20,4,"update","3.38","0.12","295.55","76.21","6330.88","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [14, ""matthias12@example.net.tmp""]}"
"postgres","optimized","steady",1,20,5,"update","3.49","0.11","286.87","74.71","6330.92","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [15, ""romyschottin@example.net.tmp""]}"
"postgres","optimized","steady",1,20,6,"update","5.38","0.12","185.75","48.56","6330.77","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [16, ""klemtfredi@example.com.tmp""]}"
"postgres","optimized","steady",1,20,7,"update","3.42","0.13","292.35","80.43","6331.15","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [17, ""fechnerstefania@example.org.tmp""]}"
"postgres","optimized","steady",1,20,8,"update","3.40","0.14","293.77","76.73","6330.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [18, ""jesselemilie@example.com.tmp""]}"
"postgres","optimized","steady",1,20,9,"update","3.38","0.12","295.61","78.95","6330.96","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [19, ""zkallert@example.com.tmp""]}"
"postgres","optimized","steady",1,20,10,"update","3.36","0.13","297.72","77.23","6330.78","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [20, ""schenkjiri@example.net.tmp""]}"
"postgres","optimized","warmup",1,21,1,"delete","54.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,2,"delete","53.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,3,"delete","53.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,4,"delete","53.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,5,"delete","54.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,6,"delete","53.72","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,7,"delete","53.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,8,"delete","53.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,9,"delete","53.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,10,"delete","54.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,21,1,"delete","3.52","0.05","284.08","74.70","6331.93","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,21,2,"delete","3.46","0.04","289.42","78.59","6332.23","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,21,3,"delete","3.47","0.04","288.34","77.32","6332.15","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,21,4,"delete","3.37","0.04","296.39","79.92","6331.97","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,21,5,"delete","3.42","0.04","292.18","76.46","6332.15","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,21,6,"delete","3.41","0.04","293.00","76.23","6332.45","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,21,7,"delete","3.39","0.05","295.06","76.95","6331.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,21,8,"delete","3.45","0.04","290.01","74.61","6331.96","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,21,9,"delete","3.53","0.04","283.44","73.87","6331.91","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,21,10,"delete","3.41","0.04","292.89","75.98","6332.02","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,22,1,"delete","53.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,2,"delete","53.53","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,3,"delete","54.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,4,"delete","53.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,5,"delete","53.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,6,"delete","53.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,7,"delete","54.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,8,"delete","53.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,9,"delete","53.64","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,10,"delete","53.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,22,1,"delete","3.54","0.04","282.51","75.85","6331.70","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,22,2,"delete","3.44","0.04","290.46","75.55","6331.96","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,22,3,"delete","3.35","0.04","298.11","77.12","6331.89","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,22,4,"delete","3.50","0.04","286.05","72.84","6331.92","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,22,5,"delete","3.42","0.05","292.13","75.83","6332.05","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,22,6,"delete","3.45","0.04","290.26","78.65","6332.08","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,22,7,"delete","3.61","0.04","277.26","71.90","6332.34","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,22,8,"delete","3.48","0.04","287.37","74.32","6332.13","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,22,9,"delete","3.46","0.07","289.26","74.72","6331.98","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,22,10,"delete","3.58","0.04","279.70","74.68","6331.96","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,23,1,"delete","54.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,2,"delete","64.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,3,"delete","53.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,4,"delete","53.81","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,5,"delete","53.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,6,"delete","53.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,7,"delete","53.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,8,"delete","53.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,9,"delete","53.51","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,10,"delete","53.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,23,1,"delete","3.45","0.04","290.17","76.03","6331.75","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,23,2,"delete","3.51","0.04","285.18","74.83","6332.19","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,23,3,"delete","3.45","0.04","289.88","74.63","6331.79","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,23,4,"delete","3.44","0.04","290.95","75.96","6331.88","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,23,5,"delete","3.51","0.04","284.77","75.91","6332.07","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,23,6,"delete","3.54","0.04","282.25","72.98","6331.85","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,23,7,"delete","3.49","0.04","286.48","75.21","6331.82","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,23,8,"delete","3.49","0.04","286.85","74.40","6331.93","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,23,9,"delete","3.59","0.04","278.17","73.65","6331.68","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,23,10,"delete","3.42","0.04","292.68","76.15","6331.99","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,24,1,"delete","53.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,2,"delete","53.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,3,"delete","53.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,4,"delete","53.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,5,"delete","53.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,6,"delete","53.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,7,"delete","53.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,8,"delete","53.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,9,"delete","53.70","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,10,"delete","53.83","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,24,1,"delete","3.42","0.04","292.10","75.46","6332.03","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,24,2,"delete","3.46","0.04","288.88","74.89","6332.01","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,24,3,"delete","3.54","0.04","282.80","73.81","6332.05","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,24,4,"delete","3.47","0.04","287.79","76.29","6332.16","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,24,5,"delete","3.50","0.04","285.92","75.49","6331.97","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,24,6,"delete","3.49","0.04","286.49","75.85","6332.03","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,24,7,"delete","3.46","0.04","288.83","75.62","6332.13","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,24,8,"delete","3.48","0.04","287.04","74.76","6332.10","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,24,9,"delete","3.49","0.04","286.42","74.72","6331.92","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,24,10,"delete","3.48","0.04","287.22","75.04","6331.61","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",3,1,1,"simple","256.97","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,2,"simple","257.34","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,3,"simple","259.43","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,4,"simple","259.63","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,5,"simple","256.97","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,6,"simple","255.35","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,7,"simple","257.04","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,8,"simple","259.90","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,9,"simple","258.78","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,10,"simple","256.62","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,1,1,"simple","208.69","11.13","14.38","7.77","6325.83","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,2,"simple","208.29","11.02","14.40","7.75","6325.97","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,3,"simple","206.93","11.10","14.50","7.76","6325.80","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,4,"simple","207.35","11.43","14.47","7.89","6326.01","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,5,"simple","208.33","11.20","14.40","7.71","6325.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,6,"simple","208.23","10.90","14.41","7.83","6326.06","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,7,"simple","209.57","10.98","14.32","8.00","6325.95","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,8,"simple","209.00","11.03","14.35","7.63","6326.08","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,9,"simple","205.60","10.96","14.59","7.73","6325.95","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,1,10,"simple","204.79","11.11","14.65","7.87","6325.98","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",3,2,1,"simple","72.81","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,2,"simple","73.77","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,3,"simple","73.43","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,4,"simple","72.50","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,5,"simple","73.34","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,6,"simple","73.05","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,7,"simple","72.99","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,8,"simple","73.83","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,9,"simple","72.67","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,10,"simple","73.16","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,2,1,"simple","23.06","0.07","130.11","15.74","6325.94","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,2,"simple","23.56","0.07","127.32","15.48","6326.02","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,3,"simple","23.17","0.07","129.48","15.61","6325.77","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,4,"simple","23.40","0.07","128.21","15.45","6326.11","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,5,"simple","23.39","0.07","128.26","15.36","6325.83","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,6,"simple","22.56","0.07","132.97","15.51","6325.89","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,7,"simple","22.91","0.07","130.96","15.27","6325.88","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,8,"simple","22.86","0.09","131.22","15.38","6326.15","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,9,"simple","22.61","0.07","132.66","15.69","6325.83","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,10,"simple","22.94","0.07","130.77","15.40","6326.20","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",3,3,1,"simple","74.46","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,2,"simple","74.20","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,3,"simple","75.55","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,4,"simple","73.84","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,5,"simple","77.35","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,6,"simple","74.79","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,7,"simple","73.69","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,8,"simple","74.15","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,9,"simple","73.53","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,10,"simple","75.31","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,3,1,"simple","23.97","0.19","125.15","15.32","6325.80","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,2,"simple","23.74","0.19","126.39","15.57","6325.76","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,3,"simple","24.21","0.21","123.91","15.35","6326.22","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,4,"simple","24.72","0.19","121.37","14.89","6325.88","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,5,"simple","23.79","0.19","126.08","15.22","6326.06","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,6,"simple","23.94","0.18","125.30","15.40","6325.80","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,7,"simple","23.59","0.19","127.18","15.45","6325.98","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,8,"simple","23.62","0.19","127.01","15.42","6325.95","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,9,"simple","24.02","0.19","124.88","15.45","6326.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,10,"simple","23.96","0.19","125.21","15.40","6326.29","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 14, ""Jorge-Matthäi-Weg 373"", ""Bad Freienwalde"", ""21127"", ""Deutschland"", false]}"
"postgres","optimized","warmup",3,4,1,"medium","78.69","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,2,"medium","76.07","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,3,"medium","77.72","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,4,"medium","76.90","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,5,"medium","76.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,6,"medium","76.51","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,7,"medium","76.10","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,8,"medium","76.44","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,9,"medium","76.10","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,10,"medium","77.26","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,4,1,"medium","25.53","0.47","117.49","15.47","6325.98","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,2,"medium","25.84","0.45","116.11","15.54","6325.91","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,3,"medium","26.52","0.46","113.10","15.16","6326.18","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,4,"medium","25.71","0.47","116.70","15.45","6326.16","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,5,"medium","26.51","0.47","113.16","15.03","6326.16","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,6,"medium","26.50","0.45","113.20","14.92","6326.07","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,7,"medium","26.20","0.45","114.51","15.56","6326.29","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,8,"medium","25.92","0.47","115.73","15.22","6325.88","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,9,"medium","25.69","0.47","116.78","15.40","6325.89","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",3,4,10,"medium","25.78","0.47","116.35","15.35","6326.22","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",3,5,1,"medium","99.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,2,"medium","98.16","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,3,"medium","101.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,4,"medium","99.27","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,5,"medium","97.92","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,6,"medium","98.09","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,7,"medium","106.44","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,8,"medium","102.68","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,9,"medium","98.71","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,10,"medium","100.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,5,1,"medium","51.64","19.99","58.10","30.09","6329.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,2,"medium","50.12","20.49","59.86","31.91","6329.85","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,3,"medium","52.04","19.93","57.64","29.64","6329.84","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,4,"medium","48.27","20.16","62.14","32.22","6329.67","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,5,"medium","47.76","19.83","62.81","32.50","6330.08","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,6,"medium","47.47","20.13","63.20","32.66","6329.94","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,7,"medium","49.26","20.48","60.90","32.45","6329.83","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,8,"medium","47.61","20.42","63.02","32.79","6329.61","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,9,"medium","47.20","20.47","63.56","32.79","6329.64","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",3,5,10,"medium","48.44","19.89","61.93","31.96","6329.39","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","warmup",3,6,1,"medium","73.78","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,2,"medium","73.80","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,3,"medium","73.97","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,4,"medium","73.70","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,5,"medium","74.56","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,6,"medium","73.86","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,7,"medium","73.21","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,8,"medium","73.65","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,9,"medium","75.95","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,10,"medium","73.63","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,6,1,"medium","23.16","0.47","129.53","15.67","6329.66","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,2,"medium","23.26","0.50","128.99","15.66","6329.72","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,3,"medium","23.79","0.50","126.09","15.27","6329.93","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,4,"medium","23.25","0.47","129.03","15.63","6329.89","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,5,"medium","23.41","0.48","128.13","15.48","6329.87","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,6,"medium","23.64","0.49","126.88","15.51","6330.09","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,7,"medium","23.32","0.47","128.67","15.71","6330.23","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,8,"medium","23.19","0.50","129.38","15.62","6329.72","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,9,"medium","23.60","0.50","127.11","15.45","6329.25","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",3,6,10,"medium","23.30","0.50","128.75","15.50","6329.97","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","warmup",3,7,1,"complex","75.42","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,2,"complex","75.93","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,3,"complex","74.69","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,4,"complex","74.91","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,5,"complex","74.89","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,6,"complex","75.24","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,7,"complex","75.19","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,8,"complex","74.77","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,9,"complex","75.16","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,10,"complex","87.24","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,7,1,"complex","24.93","0.79","120.32","15.65","6329.90","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,2,"complex","33.59","0.83","89.32","11.63","6329.76","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,3,"complex","25.69","0.79","116.77","15.85","6329.39","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,4,"complex","25.43","0.80","117.96","15.67","6329.94","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,5,"complex","25.31","0.81","118.51","15.85","6329.85","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,6,"complex","25.41","0.81","118.06","15.98","6330.07","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,7,"complex","25.36","0.79","118.29","15.77","6329.79","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,8,"complex","25.35","0.80","118.35","16.41","6329.86","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,9,"complex","26.08","0.80","115.04","15.36","6329.72","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",3,7,10,"complex","24.63","0.82","121.81","15.64","6329.90","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","warmup",3,8,1,"complex","93.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,2,"complex","93.20","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,3,"complex","92.50","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,4,"complex","98.77","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,5,"complex","92.52","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,6,"complex","92.29","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,7,"complex","96.92","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,8,"complex","92.71","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,9,"complex","91.78","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,10,"complex","93.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,8,1,"complex","40.16","7.94","74.69","19.95","6330.55","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,2,"complex","43.08","7.98","69.63","19.47","6330.71","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,3,"complex","39.96","7.92","75.08","20.00","6331.04","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,4,"complex","40.42","7.88","74.22","19.97","6330.99","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,5,"complex","40.57","7.96","73.95","20.14","6331.07","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,6,"complex","40.19","7.97","74.65","20.02","6330.86","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,7,"complex","41.51","7.96","72.27","19.71","6331.08","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,8,"complex","41.49","7.89","72.31","19.92","6330.55","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,9,"complex","40.17","8.06","74.68","19.90","6330.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,10,"complex","41.54","7.83","72.22","19.66","6331.31","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 488, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",3,9,1,"complex","75.98","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,2,"complex","75.23","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,3,"complex","74.47","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,4,"complex","97.14","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,5,"complex","76.14","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,6,"complex","74.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,7,"complex","74.16","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,8,"complex","74.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,9,"complex","74.62","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,10,"complex","74.81","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,9,1,"complex","26.13","0.51","114.79","14.90","6330.98","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,2,"complex","23.98","0.53","125.09","15.99","6331.06","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,3,"complex","24.05","0.53","124.76","15.73","6330.93","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,4,"complex","24.39","0.51","122.98","17.17","6330.66","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,5,"complex","23.93","0.54","125.36","16.16","6330.86","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,6,"complex","25.60","0.52","117.19","14.71","6330.97","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,7,"complex","24.37","0.52","123.10","15.67","6330.61","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,8,"complex","23.94","0.52","125.31","15.61","6330.71","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,9,"complex","24.14","0.52","124.25","15.92","6330.62","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",3,9,10,"complex","24.77","0.52","121.11","15.55","6330.92","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","warmup",3,10,1,"very_complex","92.93","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,2,"very_complex","91.67","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,3,"very_complex","93.65","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,4,"very_complex","91.27","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,5,"very_complex","95.20","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,6,"very_complex","92.95","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,7,"very_complex","91.64","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,8,"very_complex","92.03","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,9,"very_complex","91.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,10,"very_complex","92.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,10,1,"very_complex","46.13","19.89","65.03","17.29","6330.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,2,"very_complex","41.11","19.39","72.97","19.38","6330.92","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,3,"very_complex","46.15","19.65","65.00","18.09","6330.87","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,4,"very_complex","42.58","19.62","70.45","19.45","6330.59","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,5,"very_complex","44.51","19.50","67.40","17.90","6330.75","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,6,"very_complex","40.69","19.48","73.72","19.50","6330.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,7,"very_complex","44.92","19.29","66.79","17.73","6330.87","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,8,"very_complex","42.46","19.39","70.65","19.86","6330.38","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,9,"very_complex","40.48","20.22","74.11","19.52","6331.03","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,10,10,"very_complex","41.23","20.19","72.77","20.09","6330.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",3,11,1,"very_complex","116.68","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,2,"very_complex","114.47","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,3,"very_complex","114.67","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,4,"very_complex","113.34","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,5,"very_complex","116.63","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,6,"very_complex","115.35","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,7,"very_complex","114.56","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,8,"very_complex","116.79","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,9,"very_complex","114.84","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,10,"very_complex","119.00","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,11,1,"very_complex","66.52","50.17","45.10","21.34","6332.09","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,2,"very_complex","72.54","48.81","41.36","19.00","6331.96","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,3,"very_complex","70.20","48.76","42.74","19.91","6331.84","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,4,"very_complex","70.49","50.18","42.56","19.90","6331.91","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,5,"very_complex","67.15","48.94","44.68","20.62","6332.03","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,6,"very_complex","64.74","48.50","46.34","21.52","6332.25","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,7,"very_complex","64.25","49.08","46.70","21.54","6332.27","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,8,"very_complex","64.39","52.20","46.59","21.63","6332.18","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,9,"very_complex","65.69","50.74","45.67","21.45","6332.23","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",3,11,10,"very_complex","63.74","48.82","47.07","21.67","6332.09","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","warmup",3,12,1,"very_complex","94.31","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,2,"very_complex","92.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,3,"very_complex","92.05","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,4,"very_complex","91.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,5,"very_complex","91.50","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,6,"very_complex","91.37","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,7,"very_complex","91.52","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,8,"very_complex","91.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,9,"very_complex","92.78","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,10,"very_complex","91.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,12,1,"very_complex","41.60","19.60","72.12","20.12","6330.41","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,2,"very_complex","41.37","20.46","72.52","19.50","6330.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,3,"very_complex","40.77","21.97","73.58","20.24","6330.83","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,4,"very_complex","41.29","19.66","72.66","19.90","6331.16","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,5,"very_complex","48.70","20.67","61.61","18.44","6330.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,6,"very_complex","48.67","20.83","61.64","17.52","6330.99","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,7,"very_complex","42.45","23.30","70.67","19.89","6330.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,8,"very_complex","45.35","21.01","66.16","18.44","6330.62","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,9,"very_complex","43.14","20.72","69.53","19.69","6330.51","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",3,12,10,"very_complex","46.13","22.00","65.03","18.00","6330.86","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",3,13,1,"create","78.31","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,2,"create","76.97","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,3,"create","76.25","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,4,"create","76.22","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,5,"create","75.96","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,6,"create","74.81","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,7,"create","76.15","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,8,"create","76.60","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,9,"create","76.26","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,10,"create","76.18","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,13,1,"create","25.65","0.13","116.96","14.62","6330.56","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13510]}"
"postgres","optimized","steady",3,13,2,"create","27.00","0.11","111.11","13.44","6330.76","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13514]}"
"postgres","optimized","steady",3,13,3,"create","25.47","0.13","117.79","14.18","6330.54","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13518]}"
"postgres","optimized","steady",3,13,4,"create","26.29","0.10","114.12","14.04","6331.08","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13522]}"
"postgres","optimized","steady",3,13,5,"create","26.13","0.10","114.83","13.98","6330.74","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13526]}"
"postgres","optimized","steady",3,13,6,"create","25.55","0.14","117.42","14.28","6330.44","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13530]}"
"postgres","optimized","steady",3,13,7,"create","25.58","0.11","117.29","14.34","6330.70","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13534]}"
"postgres","optimized","steady",3,13,8,"create","26.24","0.10","114.33","13.87","6330.95","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13538]}"
"postgres","optimized","steady",3,13,9,"create","25.82","0.16","116.19","14.09","6330.61","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13542]}"
"postgres","optimized","steady",3,13,10,"create","25.76","0.12","116.48","14.35","6331.11","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13546]}"
"postgres","optimized","warmup",3,14,1,"create","76.88","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,2,"create","77.06","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,3,"create","76.10","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,4,"create","75.92","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,5,"create","76.29","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,6,"create","76.77","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,7,"create","76.51","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,8,"create","76.01","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,9,"create","77.65","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,10,"create","76.33","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,14,1,"create","25.60","0.10","117.20","14.31","6331.05","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20017]}"
"postgres","optimized","steady",3,14,2,"create","44.86","0.10","66.88","8.12","6330.72","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20021]}"
"postgres","optimized","steady",3,14,3,"create","25.53","0.12","117.50","14.47","6330.86","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20025]}"
"postgres","optimized","steady",3,14,4,"create","26.04","0.20","115.20","14.18","6330.93","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20029]}"
"postgres","optimized","steady",3,14,5,"create","27.35","0.09","109.70","13.60","6330.88","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20033]}"
"postgres","optimized","steady",3,14,6,"create","25.56","0.10","117.39","14.65","6330.85","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20037]}"
"postgres","optimized","steady",3,14,7,"create","26.65","0.12","112.56","13.71","6330.78","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20041]}"
"postgres","optimized","steady",3,14,8,"create","26.23","0.11","114.37","14.36","6330.83","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20045]}"
"postgres","optimized","steady",3,14,9,"create","25.79","0.09","116.31","14.08","6330.91","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20049]}"
"postgres","optimized","steady",3,14,10,"create","25.81","0.09","116.21","14.27","6331.13","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20053]}"
"postgres","optimized","warmup",3,15,1,"create","77.21","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,2,"create","77.23","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,3,"create","76.10","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,4,"create","76.30","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,5,"create","76.45","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,6,"create","76.42","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,7,"create","76.87","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,8,"create","76.55","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,9,"create","76.72","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,10,"create","76.72","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,15,1,"create","25.92","0.11","115.76","14.20","6330.74","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15128]}"
"postgres","optimized","steady",3,15,2,"create","26.46","0.16","113.38","13.99","6331.23","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15132]}"
"postgres","optimized","steady",3,15,3,"create","25.76","0.11","116.48","14.26","6331.17","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15136]}"
"postgres","optimized","steady",3,15,4,"create","27.97","0.14","107.26","13.59","6330.98","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15140]}"
"postgres","optimized","steady",3,15,5,"create","26.11","0.12","114.88","14.05","6331.21","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15144]}"
"postgres","optimized","steady",3,15,6,"create","25.85","0.12","116.08","14.16","6331.01","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15148]}"
"postgres","optimized","steady",3,15,7,"create","27.23","0.11","110.17","15.12","6331.00","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15152]}"
"postgres","optimized","steady",3,15,8,"create","26.34","0.13","113.90","13.96","6331.12","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15156]}"
"postgres","optimized","steady",3,15,9,"create","25.92","0.12","115.76","14.11","6330.99","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15160]}"
"postgres","optimized","steady",3,15,10,"create","25.89","0.13","115.86","14.29","6330.92","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15164]}"
"postgres","optimized","warmup",3,16,1,"create","76.44","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,2,"create","74.02","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,3,"create","76.76","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,4,"create","76.52","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,5,"create","76.75","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,6,"create","76.81","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,7,"create","76.74","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,8,"create","76.79","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,9,"create","76.93","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,10,"create","77.08","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,16,1,"create","25.99","0.11","115.43","14.25","6330.88","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104881]}"
"postgres","optimized","steady",3,16,2,"create","26.29","0.12","114.11","14.24","6330.91","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104885]}"
"postgres","optimized","steady",3,16,3,"create","25.77","0.13","116.42","14.14","6331.00","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104889]}"
"postgres","optimized","steady",3,16,4,"create","26.08","0.12","115.01","14.38","6330.94","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104893]}"
"postgres","optimized","steady",3,16,5,"create","26.47","0.12","113.33","14.06","6331.21","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104897]}"
"postgres","optimized","steady",3,16,6,"create","27.14","0.11","110.56","13.64","6331.01","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104901]}"
"postgres","optimized","steady",3,16,7,"create","25.91","0.14","115.77","14.34","6331.14","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104905]}"
"postgres","optimized","steady",3,16,8,"create","26.39","0.12","113.68","14.03","6331.12","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104909]}"
"postgres","optimized","steady",3,16,9,"create","26.17","0.12","114.64","14.46","6330.78","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104913]}"
"postgres","optimized","steady",3,16,10,"create","25.96","0.11","115.54","14.25","6331.13","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104917]}"
"postgres","optimized","warmup",3,17,1,"update","76.54","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,2,"update","76.04","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,3,"update","76.07","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,4,"update","75.69","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,5,"update","75.64","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,6,"update","75.39","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,7,"update","75.92","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,8,"update","76.24","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,9,"update","76.24","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,10,"update","75.81","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,17,1,"update","25.47","0.08","117.78","13.92","6331.15","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 24]}"
"postgres","optimized","steady",3,17,2,"update","25.28","0.08","118.68","14.43","6331.13","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 27]}"
"postgres","optimized","steady",3,17,3,"update","25.22","0.08","118.97","14.43","6331.02","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 30]}"
"postgres","optimized","steady",3,17,4,"update","26.27","0.08","114.22","14.13","6331.01","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 33]}"
"postgres","optimized","steady",3,17,5,"update","29.90","0.08","100.34","12.09","6331.01","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 36]}"
"postgres","optimized","steady",3,17,6,"update","25.33","0.08","118.43","14.01","6331.27","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 55]}"
"postgres","optimized","steady",3,17,7,"update","25.81","0.08","116.25","14.07","6331.30","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 58]}"
"postgres","optimized","steady",3,17,8,"update","25.53","0.08","117.52","13.93","6330.87","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 61]}"
"postgres","optimized","steady",3,17,9,"update","26.60","0.08","112.80","14.12","6331.38","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 64]}"
"postgres","optimized","steady",3,17,10,"update","27.12","0.08","110.61","13.70","6331.04","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 67]}"
"postgres","optimized","warmup",3,18,1,"update","77.06","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,2,"update","77.14","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,3,"update","77.19","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,4,"update","76.80","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,5,"update","77.04","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,6,"update","99.85","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,7,"update","76.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,8,"update","76.80","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,9,"update","76.24","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,10,"update","76.44","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,18,1,"update","26.19","0.10","114.53","14.03","6331.10","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [51, 3]}"
"postgres","optimized","steady",3,18,2,"update","24.62","0.10","121.83","15.27","6330.97","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [54, 4]}"
"postgres","optimized","steady",3,18,3,"update","26.06","0.08","115.14","13.69","6330.82","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [57, 2]}"
"postgres","optimized","steady",3,18,4,"update","25.57","0.10","117.33","14.11","6331.13","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [60, 1]}"
"postgres","optimized","steady",3,18,5,"update","25.69","0.10","116.78","13.94","6331.27","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [63, 1]}"
"postgres","optimized","steady",3,18,6,"update","25.81","0.10","116.22","13.89","6331.42","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [66, 3]}"
"postgres","optimized","steady",3,18,7,"update","25.48","0.10","117.74","14.25","6330.84","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [69, 1]}"
"postgres","optimized","steady",3,18,8,"update","25.48","0.10","117.76","14.59","6331.20","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [72, 3]}"
"postgres","optimized","steady",3,18,9,"update","24.75","0.10","121.23","14.99","6331.21","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [75, 4]}"
"postgres","optimized","steady",3,18,10,"update","25.51","0.13","117.58","13.99","6331.13","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [78, 1]}"
"postgres","optimized","warmup",3,19,1,"update","76.15","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,2,"update","75.91","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,3,"update","76.07","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,4,"update","75.66","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,5,"update","75.83","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,6,"update","75.80","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,7,"update","76.88","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,8,"update","75.49","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,9,"update","75.63","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,10,"update","79.68","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,19,1,"update","26.06","0.11","115.12","13.73","6331.44","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [50, 4]}"
"postgres","optimized","steady",3,19,2,"update","25.26","0.09","118.76","14.17","6331.28","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [53, 5]}"
"postgres","optimized","steady",3,19,3,"update","25.71","0.09","116.68","13.85","6331.04","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [56, 4]}"
"postgres","optimized","steady",3,19,4,"update","25.35","0.09","118.36","14.11","6331.16","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [59, 4]}"
"postgres","optimized","steady",3,19,5,"update","25.38","0.10","118.22","14.16","6331.11","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [62, 5]}"
"postgres","optimized","steady",3,19,6,"update","25.72","0.11","116.65","13.99","6331.32","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [65, 5]}"
"postgres","optimized","steady",3,19,7,"update","26.12","0.08","114.84","14.16","6331.20","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [68, 4]}"
"postgres","optimized","steady",3,19,8,"update","25.58","0.10","117.27","14.13","6331.21","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [71, 4]}"
"postgres","optimized","steady",3,19,9,"update","25.75","0.10","116.51","13.88","6331.01","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [74, 5]}"
"postgres","optimized","steady",3,19,10,"update","25.42","0.08","118.00","14.01","6331.21","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [77, 4]}"
"postgres","optimized","warmup",3,20,1,"update","76.05","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,2,"update","76.73","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,3,"update","76.80","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,4,"update","76.41","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,5,"update","76.58","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,6,"update","76.56","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,7,"update","76.17","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,8,"update","77.02","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,9,"update","76.72","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,10,"update","74.91","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,20,1,"update","25.74","0.12","116.55","14.34","6331.30","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [51, ""geisslerjutta@example.com.tmp""]}"
"postgres","optimized","steady",3,20,2,"update","26.11","0.12","114.92","14.00","6330.92","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [54, ""felicitas12@example.com.tmp""]}"
"postgres","optimized","steady",3,20,3,"update","26.26","0.11","114.26","13.89","6331.30","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [57, ""ugerlach@example.com.tmp""]}"
"postgres","optimized","steady",3,20,4,"update","25.86","0.11","115.99","15.55","6331.34","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [60, ""ljudmila14@example.net.tmp""]}"
"postgres","optimized","steady",3,20,5,"update","26.33","0.13","113.94","13.98","6331.51","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [63, ""iwanhentschel@example.com.tmp""]}"
"postgres","optimized","steady",3,20,6,"update","26.21","0.12","114.47","13.96","6331.53","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [66, ""schottinhulda@example.net.tmp""]}"
"postgres","optimized","steady",3,20,7,"update","25.86","0.12","116.01","14.23","6331.10","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [69, ""dwagenknecht@example.org.tmp""]}"
"postgres","optimized","steady",3,20,8,"update","25.89","0.15","115.89","13.94","6331.25","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [72, ""roggemarina@example.com.tmp""]}"
"postgres","optimized","steady",3,20,9,"update","27.55","0.11","108.90","13.30","6331.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""wilfriedhenk@example.org.tmp""]}"
"postgres","optimized","steady",3,20,10,"update","25.98","0.15","115.47","14.01","6331.45","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [78, ""ddippel@example.com.tmp""]}"
"postgres","optimized","warmup",3,21,1,"delete","76.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,2,"delete","76.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,3,"delete","76.18","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,4,"delete","76.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,5,"delete","75.96","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,6,"delete","77.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,7,"delete","87.55","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,8,"delete","75.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,9,"delete","76.43","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,10,"delete","75.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,21,1,"delete","25.53","0.05","117.53","14.05","6332.40","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,21,2,"delete","25.56","0.04","117.37","14.05","6332.10","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,21,3,"delete","25.97","0.04","115.50","14.14","6332.71","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,21,4,"delete","25.61","0.04","117.13","13.73","6331.95","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,21,5,"delete","25.59","0.05","117.24","14.29","6332.39","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,21,6,"delete","25.93","0.04","115.71","13.83","6332.26","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,21,7,"delete","26.18","0.04","114.59","13.77","6332.46","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,21,8,"delete","26.37","0.04","113.76","13.92","6332.49","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,21,9,"delete","25.55","0.07","117.43","14.06","6332.17","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,21,10,"delete","24.54","0.04","122.24","14.95","6332.15","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,22,1,"delete","76.74","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,2,"delete","76.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,3,"delete","75.75","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,4,"delete","75.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,5,"delete","94.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,6,"delete","76.36","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,7,"delete","76.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,8,"delete","76.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,9,"delete","76.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,10,"delete","76.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,22,1,"delete","25.59","0.04","117.21","13.95","6332.41","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,22,2,"delete","25.87","0.04","115.97","14.13","6332.33","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,22,3,"delete","26.15","0.04","114.72","14.06","6332.32","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,22,4,"delete","47.71","0.04","62.88","7.51","6332.51","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,22,5,"delete","26.10","0.04","114.95","13.84","6332.02","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,22,6,"delete","25.63","0.04","117.06","14.07","6332.44","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,22,7,"delete","25.65","0.04","116.94","14.17","6332.30","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,22,8,"delete","26.95","0.04","111.32","14.31","6332.48","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,22,9,"delete","25.93","0.04","115.68","14.07","6332.39","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,22,10,"delete","24.69","0.04","121.53","15.04","6332.62","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,23,1,"delete","76.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,2,"delete","76.06","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,3,"delete","76.59","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,4,"delete","76.11","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,5,"delete","76.41","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,6,"delete","76.29","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,7,"delete","76.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,8,"delete","76.81","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,9,"delete","76.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,10,"delete","76.88","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,23,1,"delete","26.26","0.04","114.24","14.10","6332.43","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,23,2,"delete","26.72","0.04","112.27","14.06","6332.66","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,23,3,"delete","25.65","0.04","116.95","14.85","6332.00","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,23,4,"delete","26.44","0.04","113.45","13.99","6332.63","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,23,5,"delete","41.47","0.04","72.35","9.07","6332.39","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,23,6,"delete","25.71","0.04","116.69","14.01","6332.68","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,23,7,"delete","25.75","0.04","116.50","13.90","6332.41","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,23,8,"delete","25.70","0.04","116.74","14.09","6332.62","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,23,9,"delete","25.45","0.04","117.88","13.94","6332.13","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,23,10,"delete","26.11","0.04","114.91","13.88","6332.38","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,24,1,"delete","75.83","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,2,"delete","76.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,3,"delete","76.61","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,4,"delete","75.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,5,"delete","76.11","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,6,"delete","76.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,7,"delete","75.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,8,"delete","76.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,9,"delete","76.12","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,10,"delete","76.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,24,1,"delete","25.60","0.04","117.19","14.06","6332.16","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,24,2,"delete","25.63","0.04","117.03","14.80","6332.53","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,24,3,"delete","25.56","0.04","117.37","14.20","6332.71","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,24,4,"delete","26.20","0.05","114.49","13.70","6332.66","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,24,5,"delete","25.68","0.04","116.83","14.04","6332.30","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,24,6,"delete","25.97","0.05","115.51","13.77","6332.50","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,24,7,"delete","25.61","0.04","117.13","13.95","6332.21","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,24,8,"delete","25.70","0.04","116.73","13.85","6332.65","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,24,9,"delete","25.92","0.04","115.73","13.81","6332.66","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,24,10,"delete","24.84","0.04","120.79","14.96","6332.27","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",5,1,1,"simple","379.42","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,2,"simple","376.88","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,3,"simple","369.89","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,4,"simple","375.04","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,5,"simple","369.59","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,6,"simple","381.46","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,7,"simple","369.11","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,8,"simple","376.28","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,9,"simple","380.07","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,10,"simple","409.38","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,1,1,"simple","323.05","10.87","15.48","8.61","6326.54","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,2,"simple","329.83","10.84","15.16","8.66","6326.22","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,3,"simple","327.46","10.94","15.27","7.77","6326.45","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,4,"simple","322.40","10.91","15.51","8.02","6326.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,5,"simple","325.85","11.34","15.34","8.17","6326.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,6,"simple","323.90","10.95","15.44","7.95","6326.03","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,7,"simple","328.25","10.92","15.23","8.90","6326.49","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,8,"simple","329.16","11.01","15.19","8.54","6326.18","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,9,"simple","372.26","10.85","13.43","7.43","6326.41","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,1,10,"simple","327.36","10.88","15.27","8.85","6326.19","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",5,2,1,"simple","94.62","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,2,"simple","94.25","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,3,"simple","93.83","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,4,"simple","93.88","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,5,"simple","93.69","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,6,"simple","93.23","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,7,"simple","94.11","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,8,"simple","94.05","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,9,"simple","93.80","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,10,"simple","92.41","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,2,1,"simple","43.72","0.07","114.38","10.35","6326.27","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,2,"simple","44.29","0.07","112.89","10.90","6326.48","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,3,"simple","43.07","0.07","116.09","10.24","6326.13","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,4,"simple","43.26","0.08","115.59","10.14","6326.29","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,5,"simple","44.05","0.07","113.52","10.02","6326.39","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,6,"simple","42.92","0.07","116.49","10.10","6326.42","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,7,"simple","43.61","0.07","114.66","10.11","6326.27","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,8,"simple","44.12","0.07","113.33","10.22","6326.31","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,9,"simple","43.23","0.07","115.66","10.23","6326.29","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,10,"simple","43.57","0.07","114.77","10.28","6326.33","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",5,3,1,"simple","96.40","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,2,"simple","94.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,3,"simple","117.90","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,4,"simple","95.32","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,5,"simple","94.85","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,6,"simple","94.91","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,7,"simple","95.55","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,8,"simple","106.29","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,9,"simple","95.71","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,10,"simple","95.34","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,3,1,"simple","44.11","0.19","113.35","10.69","6326.36","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,2,"simple","44.81","0.19","111.58","10.49","6326.21","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,3,"simple","46.26","0.21","108.08","10.49","6326.37","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,4,"simple","44.35","0.19","112.74","10.54","6326.34","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,5,"simple","46.04","0.19","108.60","10.22","6326.64","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,6,"simple","44.39","0.20","112.65","10.84","6325.93","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,7,"simple","44.22","0.21","113.06","10.68","6326.50","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,8,"simple","44.91","0.21","111.35","10.80","6326.22","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,9,"simple","45.24","0.19","110.53","10.75","6326.39","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,10,"simple","44.30","0.21","112.86","11.05","6326.37","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 57, ""Dussen vanring 57"", ""Grafenau"", ""39473"", ""Deutschland"", true]}"
"postgres","optimized","warmup",5,4,1,"medium","99.50","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,2,"medium","98.21","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,3,"medium","99.01","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,4,"medium","100.88","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,5,"medium","98.55","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,6,"medium","99.07","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,7,"medium","101.50","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,8,"medium","128.37","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,9,"medium","98.55","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,10,"medium","98.69","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,4,1,"medium","46.75","0.49","106.96","11.23","6326.92","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,2,"medium","47.04","0.45","106.29","11.23","6326.56","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,3,"medium","47.04","0.45","106.29","11.19","6326.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,4,"medium","47.20","0.47","105.94","11.27","6326.57","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,5,"medium","64.13","0.45","77.97","8.34","6326.75","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,6,"medium","46.65","0.47","107.19","11.38","6326.83","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,7,"medium","47.03","0.45","106.30","11.19","6326.54","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,8,"medium","46.20","0.48","108.23","11.30","6326.63","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,9,"medium","47.93","0.47","104.32","11.34","6326.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",5,4,10,"medium","47.37","0.45","105.55","11.18","6326.30","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",5,5,1,"medium","123.89","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,2,"medium","129.49","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,3,"medium","123.15","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,4,"medium","125.45","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,5,"medium","124.19","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,6,"medium","126.63","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,7,"medium","120.58","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,8,"medium","120.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,9,"medium","125.77","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,10,"medium","124.58","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,5,1,"medium","75.93","20.02","65.85","33.85","6330.06","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,2,"medium","72.87","20.29","68.62","34.86","6330.07","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,3,"medium","77.09","20.13","64.86","33.02","6330.38","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,4,"medium","70.36","20.08","71.06","36.05","6330.41","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,5,"medium","75.80","20.13","65.96","33.66","6330.27","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,6,"medium","74.22","19.95","67.36","34.73","6330.40","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,7,"medium","75.04","20.23","66.63","33.18","6329.89","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,8,"medium","70.39","20.43","71.03","35.76","6330.40","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,9,"medium","69.07","20.04","72.39","36.37","6330.18","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",5,5,10,"medium","72.67","20.20","68.80","34.51","6330.03","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","warmup",5,6,1,"medium","94.79","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,2,"medium","94.53","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,3,"medium","95.56","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,4,"medium","95.20","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,5,"medium","94.24","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,6,"medium","95.32","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,7,"medium","94.65","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,8,"medium","94.58","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,9,"medium","95.41","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,10,"medium","95.53","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,6,1,"medium","43.58","0.46","114.73","10.79","6330.12","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,2,"medium","43.90","0.46","113.90","10.81","6330.28","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,3,"medium","44.32","0.46","112.81","10.52","6329.80","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,4,"medium","44.03","0.47","113.56","10.59","6329.91","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,5,"medium","44.30","0.50","112.87","10.57","6330.40","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,6,"medium","43.95","0.46","113.77","10.63","6330.54","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,7,"medium","44.71","0.46","111.84","10.40","6330.53","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,8,"medium","42.25","0.46","118.34","11.85","6330.09","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,9,"medium","44.42","0.46","112.56","10.48","6330.03","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",5,6,10,"medium","43.59","0.46","114.71","11.18","6329.96","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","warmup",5,7,1,"complex","96.46","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,2,"complex","96.40","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,3,"complex","98.33","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,4,"complex","95.37","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,5,"complex","95.99","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,6,"complex","96.11","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,7,"complex","96.44","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,8,"complex","95.61","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,9,"complex","95.95","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,10,"complex","99.76","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,7,1,"complex","45.10","0.79","110.86","11.47","6332.06","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,2,"complex","45.86","0.81","109.03","11.46","6332.42","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,3,"complex","47.94","0.84","104.30","10.98","6332.04","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,4,"complex","45.22","0.78","110.57","11.42","6332.48","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,5,"complex","45.95","0.83","108.82","11.32","6334.39","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,6,"complex","46.82","0.86","106.80","11.06","6335.27","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,7,"complex","44.98","0.84","111.16","11.46","6336.97","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,8,"complex","47.70","0.80","104.82","10.81","6338.12","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,9,"complex","44.85","0.82","111.48","11.43","6339.82","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",5,7,10,"complex","45.14","0.82","110.76","11.33","6341.18","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","warmup",5,8,1,"complex","114.37","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,2,"complex","113.00","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,3,"complex","112.96","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,4,"complex","118.66","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,5,"complex","113.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,6,"complex","117.94","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,7,"complex","113.02","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,8,"complex","112.79","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,9,"complex","112.51","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,10,"complex","112.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,8,1,"complex","61.20","7.87","81.70","21.09","6349.74","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,2,"complex","67.36","7.98","74.23","19.27","6351.03","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,3,"complex","66.29","8.04","75.42","19.68","6352.60","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,4,"complex","64.10","7.95","78.00","20.62","6353.95","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,5,"complex","62.34","7.70","80.21","21.26","6355.53","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,6,"complex","64.92","7.67","77.02","20.18","6356.81","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,7,"complex","61.38","7.67","81.46","20.91","6358.38","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,8,"complex","61.64","7.78","81.12","21.24","6359.61","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,9,"complex","65.09","7.78","76.81","21.43","6361.49","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,10,"complex","64.09","7.86","78.02","20.97","6363.14","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 472, ""first"": [2666, ""sourcing map 2pcs Cassette Tape Machine Belts 1.2mm Square 40mm Length(Folded 20mm) Rubber for Cassette Recorder Repair, Black"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",5,9,1,"complex","99.08","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,2,"complex","97.43","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,3,"complex","95.29","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,4,"complex","96.42","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,5,"complex","98.89","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,6,"complex","96.41","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,7,"complex","107.80","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,8,"complex","96.62","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,9,"complex","94.99","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,10,"complex","96.60","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,9,1,"complex","45.14","0.54","110.77","11.32","6370.57","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,2,"complex","44.56","0.55","112.22","11.37","6371.95","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,3,"complex","44.78","0.58","111.65","11.29","6373.73","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,4,"complex","45.03","0.54","111.03","11.07","6374.81","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,5,"complex","44.51","0.56","112.33","11.37","6376.27","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,6,"complex","44.60","0.53","112.11","11.19","6377.94","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,7,"complex","45.26","0.56","110.47","11.19","6379.18","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,8,"complex","44.13","0.54","113.30","12.48","6380.72","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,9,"complex","45.33","0.58","110.30","11.20","6381.96","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",5,9,10,"complex","44.35","0.56","112.73","11.23","6383.54","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","warmup",5,10,1,"very_complex","118.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,2,"very_complex","113.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,3,"very_complex","113.82","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,4,"very_complex","112.80","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,5,"very_complex","112.73","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,6,"very_complex","113.50","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,7,"very_complex","137.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,8,"very_complex","113.50","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,9,"very_complex","118.70","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,10,"very_complex","112.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,10,1,"very_complex","65.48","19.58","76.35","18.91","6391.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,2,"very_complex","69.46","19.64","71.98","17.87","6392.56","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,3,"very_complex","74.12","19.55","67.46","16.48","6393.68","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,4,"very_complex","63.16","21.84","79.17","20.06","6395.38","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,5,"very_complex","62.94","21.93","79.44","20.77","6396.84","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,6,"very_complex","64.79","19.64","77.18","19.70","6398.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,7,"very_complex","69.08","19.68","72.38","18.13","6399.59","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,8,"very_complex","62.56","19.69","79.93","20.15","6401.45","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,9,"very_complex","62.79","21.07","79.63","19.98","6402.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,10,10,"very_complex","61.63","19.27","81.13","20.02","6404.36","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",5,11,1,"very_complex","139.50","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,2,"very_complex","143.70","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,3,"very_complex","141.85","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,4,"very_complex","140.67","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,5,"very_complex","136.54","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,6,"very_complex","136.41","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,7,"very_complex","145.09","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,8,"very_complex","142.20","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,9,"very_complex","139.96","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,10,"very_complex","151.60","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,11,1,"very_complex","91.58","49.59","54.60","26.17","6413.42","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,2,"very_complex","91.40","49.56","54.70","24.58","6415.17","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,3,"very_complex","97.92","48.43","51.06","23.11","6416.90","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,4,"very_complex","87.64","48.59","57.05","25.55","6418.41","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,5,"very_complex","88.22","48.86","56.68","26.05","6419.65","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,6,"very_complex","86.13","48.72","58.05","25.59","6421.59","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,7,"very_complex","97.67","48.47","51.19","22.90","6423.02","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,8,"very_complex","98.78","48.58","50.62","22.33","6424.19","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,9,"very_complex","90.11","48.78","55.49","24.92","6426.55","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",5,11,10,"very_complex","94.37","48.33","52.98","24.37","6428.04","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","warmup",5,12,1,"very_complex","113.44","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,2,"very_complex","141.96","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,3,"very_complex","116.16","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,4,"very_complex","112.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,5,"very_complex","117.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,6,"very_complex","117.54","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,7,"very_complex","115.79","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,8,"very_complex","113.85","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,9,"very_complex","120.73","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,10,"very_complex","116.69","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,12,1,"very_complex","79.14","19.28","63.18","16.68","6433.91","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,2,"very_complex","66.81","19.25","74.84","18.96","6435.54","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,3,"very_complex","61.52","19.51","81.28","20.34","6437.12","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,4,"very_complex","63.48","19.82","78.76","19.65","6438.51","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,5,"very_complex","63.36","19.91","78.91","19.79","6439.78","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,6,"very_complex","69.05","21.16","72.41","17.96","6441.47","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,7,"very_complex","67.27","22.34","74.32","19.51","6442.87","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,8,"very_complex","62.02","19.41","80.62","19.90","6444.43","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,9,"very_complex","62.47","19.48","80.04","19.86","6446.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",5,12,10,"very_complex","61.69","19.23","81.05","19.82","6447.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",5,13,1,"create","95.12","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,2,"create","95.01","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,3,"create","95.70","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,4,"create","94.96","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,5,"create","94.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,6,"create","95.15","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,7,"create","91.75","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,8,"create","95.45","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,9,"create","97.25","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,10,"create","96.38","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,13,1,"create","45.23","0.13","110.55","10.54","6454.83","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13600]}"
"postgres","optimized","steady",5,13,2,"create","44.07","0.12","113.47","10.76","6456.54","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13606]}"
"postgres","optimized","steady",5,13,3,"create","44.62","0.10","112.04","10.89","6457.66","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13612]}"
"postgres","optimized","steady",5,13,4,"create","44.31","0.11","112.83","10.65","6459.25","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13618]}"
"postgres","optimized","steady",5,13,5,"create","44.35","0.15","112.75","10.64","6460.53","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13624]}"
"postgres","optimized","steady",5,13,6,"create","46.98","0.10","106.44","10.78","6461.94","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13630]}"
"postgres","optimized","steady",5,13,7,"create","45.83","0.11","109.11","10.93","6463.94","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13636]}"
"postgres","optimized","steady",5,13,8,"create","46.42","0.10","107.72","10.66","6465.14","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13642]}"
"postgres","optimized","steady",5,13,9,"create","45.83","0.11","109.11","10.63","6466.57","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13648]}"
"postgres","optimized","steady",5,13,10,"create","47.79","0.12","104.63","10.67","6468.40","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13654]}"
"postgres","optimized","warmup",5,14,1,"create","97.66","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,2,"create","97.04","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,3,"create","96.57","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,4,"create","96.80","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,5,"create","98.39","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,6,"create","94.86","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,7,"create","95.66","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,8,"create","96.41","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,9,"create","96.95","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,10,"create","96.01","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,14,1,"create","45.56","0.10","109.74","10.43","6475.71","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20107]}"
"postgres","optimized","steady",5,14,2,"create","44.24","0.10","113.02","10.87","6477.10","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20113]}"
"postgres","optimized","steady",5,14,3,"create","44.75","0.25","111.73","10.43","6478.54","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20119]}"
"postgres","optimized","steady",5,14,4,"create","45.91","0.11","108.91","10.79","6479.86","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20125]}"
"postgres","optimized","steady",5,14,5,"create","45.38","0.10","110.18","10.79","6481.63","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20131]}"
"postgres","optimized","steady",5,14,6,"create","44.97","0.10","111.20","10.49","6483.03","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20137]}"
"postgres","optimized","steady",5,14,7,"create","45.57","0.10","109.72","10.61","6484.40","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20143]}"
"postgres","optimized","steady",5,14,8,"create","46.18","0.13","108.27","10.78","6485.71","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20149]}"
"postgres","optimized","steady",5,14,9,"create","44.31","0.10","112.85","10.75","6487.38","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20155]}"
"postgres","optimized","steady",5,14,10,"create","45.02","0.10","111.07","10.47","6488.72","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20161]}"
"postgres","optimized","warmup",5,15,1,"create","96.81","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,2,"create","95.84","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,3,"create","95.13","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,4,"create","93.82","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,5,"create","96.12","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,6,"create","95.08","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,7,"create","95.49","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,8,"create","95.29","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,9,"create","95.26","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,10,"create","96.49","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,15,1,"create","44.96","0.12","111.21","10.78","6495.81","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15218]}"
"postgres","optimized","steady",5,15,2,"create","44.33","0.19","112.80","10.73","6497.35","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15224]}"
"postgres","optimized","steady",5,15,3,"create","45.23","0.11","110.56","10.63","6498.61","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15230]}"
"postgres","optimized","steady",5,15,4,"create","44.54","0.12","112.26","10.75","6500.15","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15236]}"
"postgres","optimized","steady",5,15,5,"create","44.43","0.12","112.53","10.81","6501.44","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15242]}"
"postgres","optimized","steady",5,15,6,"create","46.40","0.12","107.77","10.41","6502.93","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15248]}"
"postgres","optimized","steady",5,15,7,"create","44.73","0.24","111.77","11.07","6504.64","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15254]}"
"postgres","optimized","steady",5,15,8,"create","45.98","0.11","108.74","10.54","6506.05","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15260]}"
"postgres","optimized","steady",5,15,9,"create","45.47","0.11","109.96","10.99","6507.28","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15266]}"
"postgres","optimized","steady",5,15,10,"create","44.41","0.12","112.60","10.75","6508.52","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15272]}"
"postgres","optimized","warmup",5,16,1,"create","95.55","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,2,"create","95.25","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,3,"create","95.94","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,4,"create","96.19","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,5,"create","95.16","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,6,"create","95.24","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,7,"create","95.49","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,8,"create","96.03","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,9,"create","97.16","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,10,"create","95.60","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,16,1,"create","45.61","0.12","109.62","11.01","6516.35","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104971]}"
"postgres","optimized","steady",5,16,2,"create","45.83","0.12","109.09","10.77","6517.42","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104977]}"
"postgres","optimized","steady",5,16,3,"create","46.32","0.13","107.95","10.63","6519.26","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104983]}"
"postgres","optimized","steady",5,16,4,"create","44.56","0.15","112.20","10.78","6520.13","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104989]}"
"postgres","optimized","steady",5,16,5,"create","45.15","0.11","110.73","10.64","6521.94","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [104995]}"
"postgres","optimized","steady",5,16,6,"create","45.20","0.14","110.62","10.95","6523.43","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105001]}"
"postgres","optimized","steady",5,16,7,"create","44.99","0.12","111.14","10.82","6524.82","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105007]}"
"postgres","optimized","steady",5,16,8,"create","45.28","0.14","110.42","10.71","6526.21","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105013]}"
"postgres","optimized","steady",5,16,9,"create","45.05","0.15","110.99","10.87","6527.89","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105019]}"
"postgres","optimized","steady",5,16,10,"create","46.14","0.12","108.36","10.82","6529.17","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105025]}"
"postgres","optimized","warmup",5,17,1,"update","94.92","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,2,"update","95.70","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,3,"update","111.48","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,4,"update","95.47","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,5,"update","95.78","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,6,"update","95.35","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,7,"update","94.50","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,8,"update","94.89","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,9,"update","97.73","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,10,"update","95.38","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,17,1,"update","44.61","0.08","112.08","11.41","6536.21","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 120]}"
"postgres","optimized","steady",5,17,2,"update","44.63","0.08","112.02","10.34","6537.71","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 125]}"
"postgres","optimized","steady",5,17,3,"update","44.52","0.08","112.32","10.49","6539.17","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 130]}"
"postgres","optimized","steady",5,17,4,"update","43.88","0.08","113.95","10.51","6540.43","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 135]}"
"postgres","optimized","steady",5,17,5,"update","44.13","0.09","113.31","10.49","6541.94","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 140]}"
"postgres","optimized","steady",5,17,6,"update","44.30","0.08","112.87","10.48","6543.29","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 145]}"
"postgres","optimized","steady",5,17,7,"update","44.45","0.08","112.48","10.56","6544.72","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 150]}"
"postgres","optimized","steady",5,17,8,"update","44.72","0.10","111.80","10.25","6546.14","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 155]}"
"postgres","optimized","steady",5,17,9,"update","44.14","0.10","113.27","10.59","6548.03","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 160]}"
"postgres","optimized","steady",5,17,10,"update","44.10","0.08","113.37","10.55","6549.24","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 165]}"
"postgres","optimized","warmup",5,18,1,"update","95.69","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,2,"update","95.89","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,3,"update","95.38","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,4,"update","94.76","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,5,"update","96.49","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,6,"update","95.55","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,7,"update","95.54","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,8,"update","95.85","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,9,"update","95.36","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,10,"update","95.06","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,18,1,"update","44.99","0.09","111.15","10.38","6556.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [131, 1]}"
"postgres","optimized","steady",5,18,2,"update","44.32","0.12","112.82","10.84","6557.93","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [136, 3]}"
"postgres","optimized","steady",5,18,3,"update","44.18","0.10","113.17","10.53","6559.12","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [141, 4]}"
"postgres","optimized","steady",5,18,4,"update","44.92","0.10","111.30","10.48","6561.04","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [146, 3]}"
"postgres","optimized","steady",5,18,5,"update","44.26","0.09","112.98","10.53","6562.19","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [151, 4]}"
"postgres","optimized","steady",5,18,6,"update","44.09","0.09","113.41","10.70","6563.42","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [156, 1]}"
"postgres","optimized","steady",5,18,7,"update","46.34","0.10","107.90","10.51","6565.38","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [84, 1]}"
"postgres","optimized","steady",5,18,8,"update","46.60","0.10","107.30","10.89","6566.77","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [88, 1]}"
"postgres","optimized","steady",5,18,9,"update","46.74","0.10","106.98","10.44","6568.16","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [93, 1]}"
"postgres","optimized","steady",5,18,10,"update","45.44","0.10","110.04","10.72","6569.68","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [98, 3]}"
"postgres","optimized","warmup",5,19,1,"update","97.30","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,2,"update","98.41","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,3,"update","96.10","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,4,"update","96.34","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,5,"update","94.95","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,6,"update","96.27","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,7,"update","95.93","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,8,"update","96.85","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,9,"update","94.21","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,10,"update","94.26","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,19,1,"update","43.99","0.09","113.67","10.66","6577.51","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [131, 5]}"
"postgres","optimized","steady",5,19,2,"update","44.70","0.08","111.86","10.41","6579.14","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [136, 4]}"
"postgres","optimized","steady",5,19,3,"update","44.11","0.12","113.36","10.73","6580.24","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [141, 4]}"
"postgres","optimized","steady",5,19,4,"update","44.23","0.09","113.03","10.49","6582.18","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [146, 4]}"
"postgres","optimized","steady",5,19,5,"update","45.46","0.10","109.98","10.39","6583.54","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [151, 4]}"
"postgres","optimized","steady",5,19,6,"update","44.21","0.10","113.11","10.74","6585.06","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [156, 5]}"
"postgres","optimized","steady",5,19,7,"update","45.08","0.12","110.91","10.35","6586.34","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [84, 8]}"
"postgres","optimized","steady",5,19,8,"update","44.31","0.11","112.84","10.51","6587.86","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [89, 8]}"
"postgres","optimized","steady",5,19,9,"update","44.68","0.10","111.90","10.32","6589.60","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [94, 7]}"
"postgres","optimized","steady",5,19,10,"update","44.23","0.10","113.05","10.38","6590.87","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [99, 8]}"
"postgres","optimized","warmup",5,20,1,"update","96.34","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,2,"update","95.85","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,3,"update","97.54","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,4,"update","96.24","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,5,"update","95.20","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,6,"update","96.34","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,7,"update","95.62","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,8,"update","95.39","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,9,"update","97.82","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,10,"update","95.28","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,20,1,"update","44.45","0.16","112.47","10.98","6598.30","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [43, ""connyschweitzer@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,2,"update","44.32","0.13","112.81","10.95","6599.87","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [48, ""hans-bernd07@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,3,"update","45.08","0.12","110.90","10.80","6601.47","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [53, ""burckhardnohlmans@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,4,"update","44.68","0.11","111.90","10.76","6602.96","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [59, ""gudegisbert@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,5,"update","44.68","0.11","111.91","10.86","6604.32","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [65, ""falk28@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,6,"update","45.20","0.13","110.63","10.60","6606.06","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [70, ""hans-guenterkoch@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,7,"update","44.55","0.12","112.24","10.72","6607.33","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [76, ""heintzemuzaffer@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,8,"update","44.96","0.15","111.20","10.59","6608.95","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [82, ""kranzingo@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,9,"update","44.60","0.12","112.12","11.23","6610.67","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [87, ""roskothheinz-werner@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,10,"update","47.36","0.12","105.58","10.34","6611.60","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [92, ""jacobi-jaeckelwolfram@example.com.tmp.tmp""]}"
"postgres","optimized","warmup",5,21,1,"delete","95.13","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,2,"delete","95.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,3,"delete","96.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,4,"delete","95.13","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,5,"delete","96.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,6,"delete","95.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,7,"delete","95.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,8,"delete","96.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,9,"delete","94.88","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,10,"delete","94.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,21,1,"delete","44.82","0.05","111.56","10.41","6612.77","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,21,2,"delete","43.93","0.04","113.81","10.64","6612.61","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,21,3,"delete","43.94","0.04","113.80","10.40","6612.85","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,21,4,"delete","43.81","0.04","114.13","10.83","6612.54","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,21,5,"delete","44.70","0.04","111.87","10.43","6612.81","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,21,6,"delete","61.00","0.04","81.97","7.68","6613.05","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,21,7,"delete","44.23","0.04","113.04","10.58","6612.66","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,21,8,"delete","44.00","0.04","113.64","10.49","6612.94","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,21,9,"delete","44.52","0.04","112.30","10.50","6612.82","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,21,10,"delete","43.86","0.06","114.00","10.57","6612.64","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,22,1,"delete","95.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,2,"delete","94.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,3,"delete","115.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,4,"delete","102.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,5,"delete","95.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,6,"delete","95.49","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,7,"delete","93.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,8,"delete","95.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,9,"delete","95.53","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,10,"delete","95.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,22,1,"delete","44.00","0.04","113.65","10.39","6612.73","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,22,2,"delete","44.19","0.07","113.15","10.53","6612.57","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,22,3,"delete","44.82","0.04","111.55","10.48","6612.80","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,22,4,"delete","43.95","0.07","113.77","10.67","6613.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,22,5,"delete","44.51","0.07","112.34","10.54","6612.64","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,22,6,"delete","45.03","0.04","111.03","10.33","6612.31","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,22,7,"delete","44.19","0.04","113.15","10.68","6612.89","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,22,8,"delete","45.69","0.04","109.44","10.38","6612.77","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,22,9,"delete","44.44","0.04","112.52","10.57","6612.58","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,22,10,"delete","44.57","0.04","112.18","10.45","6612.92","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,23,1,"delete","95.56","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,2,"delete","95.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,3,"delete","95.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,4,"delete","95.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,5,"delete","96.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,6,"delete","98.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,7,"delete","96.06","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,8,"delete","95.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,9,"delete","94.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,10,"delete","94.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,23,1,"delete","44.45","0.04","112.48","10.28","6612.97","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,23,2,"delete","44.23","0.04","113.03","11.48","6612.95","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,23,3,"delete","41.03","0.05","121.88","11.61","6613.07","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,23,4,"delete","43.09","0.04","116.05","11.02","6612.78","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,23,5,"delete","45.30","0.04","110.38","10.44","6613.01","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,23,6,"delete","44.34","0.04","112.75","10.52","6613.22","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,23,7,"delete","44.97","0.04","111.18","10.31","6613.25","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,23,8,"delete","45.73","0.04","109.34","10.43","6613.00","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,23,9,"delete","45.70","0.04","109.42","10.48","6613.15","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,23,10,"delete","45.44","0.04","110.04","10.54","6613.13","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,24,1,"delete","97.34","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,2,"delete","94.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,3,"delete","97.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,4,"delete","96.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,5,"delete","96.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,6,"delete","96.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,7,"delete","97.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,8,"delete","97.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,9,"delete","93.17","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,10,"delete","94.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,24,1,"delete","44.67","0.04","111.94","10.40","6612.74","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,24,2,"delete","44.06","0.04","113.49","10.60","6612.98","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,24,3,"delete","43.93","0.04","113.83","10.50","6613.08","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,24,4,"delete","56.56","0.04","88.40","8.30","6613.15","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,24,5,"delete","44.15","0.04","113.24","10.59","6613.14","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,24,6,"delete","44.63","0.04","112.03","10.50","6612.86","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,24,7,"delete","44.69","0.04","111.87","10.39","6613.08","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,24,8,"delete","44.60","0.04","112.10","10.47","6613.33","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,24,9,"delete","46.07","0.08","108.52","10.39","6613.02","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,24,10,"delete","44.25","0.04","113.00","10.49","6613.19","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",10,1,1,"simple","669.90","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,2,"simple","680.82","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,3,"simple","684.10","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,4,"simple","696.47","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,5,"simple","711.28","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,6,"simple","661.14","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,7,"simple","694.56","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,8,"simple","731.32","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,9,"simple","680.46","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,10,"simple","671.36","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,1,1,"simple","622.06","11.17","16.08","8.31","6607.31","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,2,"simple","642.22","11.15","15.57","8.64","6607.49","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,3,"simple","613.46","10.91","16.30","8.46","6607.37","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,4,"simple","634.36","10.92","15.76","8.43","6607.10","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,5,"simple","649.74","11.01","15.39","8.82","6607.24","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,6,"simple","628.39","10.95","15.91","8.84","6607.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,7,"simple","623.93","10.95","16.03","8.76","6607.02","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,8,"simple","661.59","10.94","15.12","8.80","6607.26","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,9,"simple","655.51","10.94","15.26","8.12","6607.09","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,1,10,"simple","649.99","10.86","15.38","8.57","6607.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 50000;","{""rows"": 50000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",10,2,1,"simple","135.39","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,2,"simple","136.52","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,3,"simple","135.14","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,4,"simple","135.46","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,5,"simple","135.96","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,6,"simple","135.30","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,7,"simple","135.43","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,8,"simple","133.40","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,9,"simple","134.62","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,10,"simple","134.20","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,2,1,"simple","84.07","0.07","118.95","7.54","6607.20","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,2,"simple","83.81","0.09","119.31","7.53","6608.38","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,3,"simple","85.20","0.07","117.37","7.48","6610.08","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,4,"simple","84.02","0.07","119.01","7.61","6611.37","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,5,"simple","83.64","0.07","119.55","7.61","6612.40","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,6,"simple","93.13","0.07","107.37","6.88","6612.17","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,7,"simple","84.06","0.07","118.96","7.64","6612.41","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,8,"simple","84.65","0.07","118.13","7.50","6612.44","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,9,"simple","86.13","0.07","116.11","7.39","6611.91","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,10,"simple","84.07","0.07","118.95","7.59","6612.20","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",10,3,1,"simple","150.11","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,2,"simple","146.81","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,3,"simple","147.13","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,4,"simple","172.33","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,5,"simple","143.42","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,6,"simple","147.84","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,7,"simple","149.12","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,8,"simple","146.54","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,9,"simple","148.80","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,10,"simple","143.04","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,3,1,"simple","106.30","0.19","94.07","7.08","6612.23","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,2,"simple","96.39","0.19","103.75","7.63","6612.34","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,3,"simple","97.23","0.21","102.85","7.71","6612.64","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,4,"simple","95.73","0.20","104.46","7.84","6612.51","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,5,"simple","95.88","0.19","104.30","7.80","6612.23","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,6,"simple","120.35","0.19","83.09","6.21","6612.35","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,7,"simple","99.43","0.19","100.57","7.69","6612.54","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,8,"simple","99.84","0.20","100.16","7.78","6612.28","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,9,"simple","102.01","0.19","98.03","7.59","6612.51","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,10,"simple","99.78","0.19","100.22","7.64","6612.62","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 137, ""Weißweg 33"", ""Büsingen am Hochrhein"", ""17551"", ""Deutschland"", true]}"
"postgres","optimized","warmup",10,4,1,"medium","153.98","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,2,"medium","156.76","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,3,"medium","154.22","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,4,"medium","169.36","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,5,"medium","164.16","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,6,"medium","157.78","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,7,"medium","151.22","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,8,"medium","148.60","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,9,"medium","149.31","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,10,"medium","159.81","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,4,1,"medium","102.45","0.47","97.60","8.45","6612.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,2,"medium","104.40","0.47","95.79","8.29","6612.70","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,3,"medium","100.63","0.45","99.38","8.61","6612.99","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,4,"medium","99.18","0.45","100.82","8.56","6612.94","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,5,"medium","108.01","0.45","92.58","7.97","6612.83","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,6,"medium","108.08","0.49","92.53","8.36","6612.96","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,7,"medium","98.33","0.49","101.70","8.77","6612.96","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,8,"medium","100.61","0.45","99.39","8.50","6612.54","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,9,"medium","98.48","0.45","101.54","9.08","6612.88","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","steady",10,4,10,"medium","99.73","0.45","100.27","8.68","6612.71","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 55, ""2021-12-09 19:12:21"", ""2023-08-10 20:49:59""]}"
"postgres","optimized","warmup",10,5,1,"medium","181.53","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,2,"medium","182.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,3,"medium","182.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,4,"medium","193.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,5,"medium","181.57","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,6,"medium","182.34","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,7,"medium","184.90","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,8,"medium","184.48","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,9,"medium","188.42","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,10,"medium","185.44","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,5,1,"medium","131.61","20.44","75.98","38.27","6616.19","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,2,"medium","140.13","20.49","71.36","36.07","6616.47","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,3,"medium","131.29","20.20","76.17","38.39","6616.42","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,4,"medium","132.67","20.55","75.38","38.92","6616.37","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,5,"medium","152.72","20.10","65.48","32.67","6616.40","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,6,"medium","134.91","20.04","74.12","38.29","6616.35","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,7,"medium","155.31","20.10","64.39","32.59","6616.37","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,8,"medium","131.92","20.68","75.80","38.42","6616.53","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,9,"medium","130.70","20.07","76.51","38.64","6616.29","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","steady",10,5,10,"medium","135.04","20.11","74.05","37.68","6616.26","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [553359, ""Watercolour Animals Name Personalised Jewellery Box Gift Girls Birthday Trinkets (27cm Box)"", ""37.99"", 95, ""2018-09-10 22:41:05"", ""2020-11-15 14:56:05"", 1]}"
"postgres","optimized","warmup",10,6,1,"medium","148.02","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,2,"medium","148.17","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,3,"medium","145.53","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,4,"medium","146.25","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,5,"medium","145.81","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,6,"medium","146.17","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,7,"medium","145.40","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,8,"medium","147.24","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,9,"medium","149.72","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,10,"medium","143.23","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,6,1,"medium","96.18","0.44","103.97","7.65","6616.51","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,2,"medium","96.46","0.48","103.67","7.53","6616.26","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,3,"medium","96.49","0.47","103.63","7.56","6616.42","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,4,"medium","94.82","0.44","105.47","7.77","6616.46","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,5,"medium","97.21","0.46","102.87","7.64","6616.53","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,6,"medium","94.90","0.47","105.38","7.75","6616.68","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,7,"medium","94.56","0.44","105.76","7.68","6616.71","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,8,"medium","107.47","0.44","93.05","6.77","6616.35","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,9,"medium","95.40","0.45","104.82","7.71","6616.42","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","steady",10,6,10,"medium","100.62","0.47","99.39","7.69","6616.24","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [1637, 6848, 1117455, 5, ""2025-07-11 05:05:30""]}"
"postgres","optimized","warmup",10,7,1,"complex","149.89","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,2,"complex","149.60","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,3,"complex","150.83","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,4,"complex","149.05","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,5,"complex","152.49","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,6,"complex","149.31","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,7,"complex","149.10","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,8,"complex","147.11","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,9,"complex","149.06","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,10,"complex","148.53","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,7,1,"complex","96.35","0.82","103.79","8.49","6616.39","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,2,"complex","98.30","0.79","101.73","8.38","6616.43","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,3,"complex","100.12","0.80","99.88","8.37","6616.14","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,4,"complex","100.19","0.80","99.81","8.20","6616.71","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,5,"complex","98.79","0.79","101.22","8.39","6616.38","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,6,"complex","98.13","0.84","101.90","8.33","6616.25","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,7,"complex","96.10","0.85","104.05","8.54","6616.29","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,8,"complex","98.06","0.81","101.97","8.36","6616.65","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,9,"complex","96.35","0.80","103.79","8.54","6616.84","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","steady",10,7,10,"complex","97.33","0.83","102.74","8.61","6616.56","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-07-10 15:11:12"", ""42.24""]}"
"postgres","optimized","warmup",10,8,1,"complex","167.76","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,2,"complex","191.89","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,3,"complex","165.65","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,4,"complex","171.48","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,5,"complex","169.06","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,6,"complex","166.00","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,7,"complex","186.10","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,8,"complex","170.68","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,9,"complex","176.14","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,10,"complex","174.95","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,8,1,"complex","128.90","8.13","77.58","19.85","6617.64","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,2,"complex","132.97","7.57","75.21","20.00","6617.49","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,3,"complex","122.85","7.63","81.40","22.43","6617.72","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,4,"complex","126.51","7.57","79.04","20.98","6617.61","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,5,"complex","127.77","7.74","78.27","21.13","6617.57","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,6,"complex","139.66","7.83","71.60","18.43","6617.38","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,7,"complex","120.86","7.71","82.74","22.66","6617.61","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,8,"complex","119.88","7.54","83.42","20.23","6619.17","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,9,"complex","115.86","7.57","86.31","20.96","6620.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,10,"complex","127.46","7.88","78.45","19.35","6622.50","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 450, ""first"": [8320, ""EEEONE Original Replacement For TASCAM CD-A500 CD Player Spare Parts Laser Lasereinheit ASSY Unit CDA500 Optical Pickup Bloc Optique"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",10,9,1,"complex","150.36","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,2,"complex","151.22","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,3,"complex","148.66","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,4,"complex","151.91","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,5,"complex","147.18","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,6,"complex","151.99","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,7,"complex","146.63","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,8,"complex","148.80","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,9,"complex","148.12","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,10,"complex","146.66","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,9,1,"complex","99.81","0.58","100.20","8.33","6630.62","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,2,"complex","100.54","0.58","99.47","7.91","6631.78","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,3,"complex","97.67","0.58","102.38","8.31","6633.60","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,4,"complex","97.52","0.56","102.55","8.35","6635.29","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,5,"complex","95.93","0.59","104.24","8.33","6636.63","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,6,"complex","100.27","0.58","99.73","8.47","6638.03","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,7,"complex","96.92","0.68","103.17","8.76","6639.77","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,8,"complex","95.65","0.58","104.55","8.33","6641.40","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,9,"complex","98.00","0.56","102.04","8.25","6642.69","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","steady",10,9,10,"complex","100.83","0.59","99.17","8.01","6644.43","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, 22]}"
"postgres","optimized","warmup",10,10,1,"very_complex","172.20","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,2,"very_complex","177.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,3,"very_complex","170.01","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,4,"very_complex","172.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,5,"very_complex","169.79","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,6,"very_complex","167.91","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,7,"very_complex","179.01","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,8,"very_complex","181.88","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,9,"very_complex","167.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,10,"very_complex","165.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,10,1,"very_complex","116.61","19.86","85.76","19.63","6652.83","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,2,"very_complex","119.25","19.80","83.86","19.95","6654.21","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,3,"very_complex","125.83","22.34","79.47","18.15","6655.94","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,4,"very_complex","115.53","19.74","86.56","20.07","6657.40","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,5,"very_complex","122.93","20.25","81.34","18.80","6659.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,6,"very_complex","117.85","19.73","84.86","19.36","6660.49","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,7,"very_complex","117.22","19.65","85.31","20.01","6662.46","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,8,"very_complex","118.20","19.70","84.60","19.38","6664.11","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,9,"very_complex","127.04","19.69","78.71","18.20","6665.56","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,10,10,"very_complex","119.70","19.75","83.54","19.38","6667.37","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",10,11,1,"very_complex","201.54","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,2,"very_complex","202.10","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,3,"very_complex","195.66","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,4,"very_complex","195.37","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,5,"very_complex","194.49","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,6,"very_complex","203.50","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,7,"very_complex","199.32","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,8,"very_complex","197.46","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,9,"very_complex","208.56","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,10,"very_complex","209.48","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,11,1,"very_complex","158.71","50.06","63.01","27.17","6677.51","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,2,"very_complex","145.45","48.96","68.75","29.49","6679.15","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,3,"very_complex","156.32","49.23","63.97","27.63","6680.92","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,4,"very_complex","150.23","48.61","66.56","29.08","6682.62","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,5,"very_complex","143.11","48.43","69.88","30.94","6684.24","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,6,"very_complex","147.70","50.44","67.70","29.20","6685.98","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,7,"very_complex","149.20","48.81","67.02","29.00","6687.22","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,8,"very_complex","150.50","50.49","66.45","29.36","6689.59","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,9,"very_complex","162.22","49.58","61.65","26.79","6691.27","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","steady",10,11,10,"very_complex","145.77","49.22","68.60","29.96","6692.63","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [58, 618190, 1]}"
"postgres","optimized","warmup",10,12,1,"very_complex","171.11","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,2,"very_complex","179.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,3,"very_complex","167.05","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,4,"very_complex","171.17","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,5,"very_complex","168.00","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,6,"very_complex","170.63","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,7,"very_complex","182.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,8,"very_complex","173.34","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,9,"very_complex","168.74","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,10,"very_complex","180.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,12,1,"very_complex","125.39","19.44","79.75","18.44","6699.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,2,"very_complex","120.26","19.37","83.15","21.08","6701.73","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,3,"very_complex","130.06","19.34","76.89","18.36","6703.32","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,4,"very_complex","117.00","19.36","85.47","20.99","6705.08","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,5,"very_complex","116.32","19.43","85.97","19.64","6706.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,6,"very_complex","124.21","20.50","80.51","19.53","6707.84","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,7,"very_complex","130.14","20.17","76.84","18.62","6709.82","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,8,"very_complex","124.06","20.52","80.61","19.17","6711.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,9,"very_complex","119.89","20.89","83.41","20.12","6713.49","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","steady",10,12,10,"very_complex","121.54","21.65","82.28","19.99","6715.05","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 13, ""first"": [10149, 1]}"
"postgres","optimized","warmup",10,13,1,"create","152.46","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,2,"create","152.22","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,3,"create","149.77","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,4,"create","148.78","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,5,"create","147.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,6,"create","148.44","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,7,"create","147.74","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,8,"create","146.51","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,9,"create","147.85","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,10,"create","146.23","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,13,1,"create","98.53","0.15","101.49","7.49","6721.87","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13760]}"
"postgres","optimized","steady",10,13,2,"create","95.60","0.13","104.60","7.75","6722.21","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13771]}"
"postgres","optimized","steady",10,13,3,"create","95.99","0.18","104.18","7.84","6722.21","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13782]}"
"postgres","optimized","steady",10,13,4,"create","99.25","0.11","100.75","7.45","6722.14","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13793]}"
"postgres","optimized","steady",10,13,5,"create","95.29","0.16","104.95","7.80","6721.81","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13804]}"
"postgres","optimized","steady",10,13,6,"create","96.09","0.12","104.07","7.66","6722.14","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13815]}"
"postgres","optimized","steady",10,13,7,"create","96.22","0.11","103.93","7.71","6721.90","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13826]}"
"postgres","optimized","steady",10,13,8,"create","96.26","0.10","103.89","7.74","6722.39","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13837]}"
"postgres","optimized","steady",10,13,9,"create","97.58","0.11","102.48","7.62","6722.26","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13848]}"
"postgres","optimized","steady",10,13,10,"create","95.75","0.10","104.44","7.70","6722.22","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [13859]}"
"postgres","optimized","warmup",10,14,1,"create","146.98","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,2,"create","148.37","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,3,"create","147.46","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,4,"create","147.16","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,5,"create","147.24","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,6,"create","146.63","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,7,"create","150.03","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,8,"create","146.96","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,9,"create","147.51","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,10,"create","150.52","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,14,1,"create","96.06","0.10","104.11","8.13","6722.35","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20267]}"
"postgres","optimized","steady",10,14,2,"create","98.98","0.10","101.03","7.65","6722.41","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20278]}"
"postgres","optimized","steady",10,14,3,"create","96.21","0.10","103.94","7.91","6722.46","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20289]}"
"postgres","optimized","steady",10,14,4,"create","97.07","0.14","103.02","7.67","6722.49","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20300]}"
"postgres","optimized","steady",10,14,5,"create","95.71","0.15","104.48","7.94","6722.38","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20311]}"
"postgres","optimized","steady",10,14,6,"create","96.14","0.10","104.01","7.72","6722.23","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20322]}"
"postgres","optimized","steady",10,14,7,"create","96.58","0.10","103.54","7.67","6722.19","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20333]}"
"postgres","optimized","steady",10,14,8,"create","113.49","0.12","88.11","6.58","6722.38","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20344]}"
"postgres","optimized","steady",10,14,9,"create","97.76","0.10","102.29","7.60","6722.33","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20355]}"
"postgres","optimized","steady",10,14,10,"create","97.39","0.11","102.68","7.58","6722.66","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [20366]}"
"postgres","optimized","warmup",10,15,1,"create","143.63","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,2,"create","149.15","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,3,"create","147.67","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,4,"create","149.68","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,5,"create","147.90","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,6,"create","144.01","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,7,"create","148.68","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,8,"create","147.90","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,9,"create","147.28","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,10,"create","148.76","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,15,1,"create","97.86","0.11","102.19","7.72","6722.47","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15378]}"
"postgres","optimized","steady",10,15,2,"create","96.85","0.11","103.25","8.03","6722.79","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15389]}"
"postgres","optimized","steady",10,15,3,"create","96.41","0.11","103.72","8.09","6722.66","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15400]}"
"postgres","optimized","steady",10,15,4,"create","97.75","0.11","102.31","7.74","6722.46","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15411]}"
"postgres","optimized","steady",10,15,5,"create","100.31","0.14","99.69","7.78","6722.32","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15422]}"
"postgres","optimized","steady",10,15,6,"create","96.75","0.12","103.36","7.86","6722.73","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15433]}"
"postgres","optimized","steady",10,15,7,"create","96.76","0.12","103.35","8.05","6722.72","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15444]}"
"postgres","optimized","steady",10,15,8,"create","95.68","0.11","104.52","8.05","6722.47","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15455]}"
"postgres","optimized","steady",10,15,9,"create","96.77","0.17","103.33","7.80","6722.49","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15466]}"
"postgres","optimized","steady",10,15,10,"create","98.18","0.14","101.86","7.75","6722.66","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [15477]}"
"postgres","optimized","warmup",10,16,1,"create","148.62","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,2,"create","146.57","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,3,"create","158.54","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,4,"create","148.12","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,5,"create","150.27","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,6,"create","146.35","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,7,"create","147.23","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,8,"create","146.49","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,9,"create","148.00","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,10,"create","147.96","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,16,1,"create","96.58","0.12","103.54","8.01","6722.61","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105131]}"
"postgres","optimized","steady",10,16,2,"create","97.05","0.12","103.04","7.78","6722.79","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105142]}"
"postgres","optimized","steady",10,16,3,"create","99.54","0.14","100.46","7.64","6722.75","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105153]}"
"postgres","optimized","steady",10,16,4,"create","97.73","0.11","102.32","7.89","6722.98","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105164]}"
"postgres","optimized","steady",10,16,5,"create","101.46","0.14","98.56","7.68","6722.66","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105175]}"
"postgres","optimized","steady",10,16,6,"create","97.37","0.12","102.70","7.83","6723.03","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105186]}"
"postgres","optimized","steady",10,16,7,"create","95.90","0.17","104.27","7.93","6722.88","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105197]}"
"postgres","optimized","steady",10,16,8,"create","97.92","0.11","102.12","7.80","6722.79","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105208]}"
"postgres","optimized","steady",10,16,9,"create","97.06","0.11","103.02","7.99","6722.97","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105219]}"
"postgres","optimized","steady",10,16,10,"create","97.42","0.13","102.65","7.82","6722.94","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [105230]}"
"postgres","optimized","warmup",10,17,1,"update","146.67","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,2,"update","155.22","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,3,"update","145.64","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,4,"update","145.36","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,5,"update","148.20","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,6,"update","147.79","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,7,"update","146.77","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,8,"update","147.14","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,9,"update","145.82","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,10,"update","147.22","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,17,1,"update","100.08","0.09","99.92","7.39","6722.97","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 270]}"
"postgres","optimized","steady",10,17,2,"update","99.39","0.08","100.62","7.56","6722.82","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 280]}"
"postgres","optimized","steady",10,17,3,"update","110.35","0.08","90.62","6.65","6722.77","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 290]}"
"postgres","optimized","steady",10,17,4,"update","99.91","0.09","100.09","7.39","6722.86","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 300]}"
"postgres","optimized","steady",10,17,5,"update","100.51","0.08","99.49","7.54","6722.93","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 310]}"
"postgres","optimized","steady",10,17,6,"update","98.77","0.08","101.24","7.54","6722.97","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 320]}"
"postgres","optimized","steady",10,17,7,"update","97.25","0.09","102.83","7.27","6723.01","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 330]}"
"postgres","optimized","steady",10,17,8,"update","95.69","0.08","104.50","7.41","6723.24","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 340]}"
"postgres","optimized","steady",10,17,9,"update","94.82","0.08","105.47","7.56","6722.79","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 350]}"
"postgres","optimized","steady",10,17,10,"update","95.58","0.08","104.62","7.62","6722.92","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [5, 360]}"
"postgres","optimized","warmup",10,18,1,"update","169.46","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,2,"update","149.58","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,3,"update","149.42","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,4,"update","145.91","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,5,"update","148.50","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,6,"update","146.74","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,7,"update","148.42","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,8,"update","146.28","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,9,"update","146.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,10,"update","146.92","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,18,1,"update","96.69","0.10","103.43","7.55","6723.00","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [281, 3]}"
"postgres","optimized","steady",10,18,2,"update","98.40","0.10","101.62","7.36","6723.27","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [291, 3]}"
"postgres","optimized","steady",10,18,3,"update","92.01","0.12","108.69","8.26","6722.83","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [301, 4]}"
"postgres","optimized","steady",10,18,4,"update","96.57","0.12","103.55","7.53","6723.02","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [311, 2]}"
"postgres","optimized","steady",10,18,5,"update","97.00","0.08","103.10","7.50","6722.83","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [185, 1]}"
"postgres","optimized","steady",10,18,6,"update","92.47","0.08","108.14","8.08","6723.07","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [192, 1]}"
"postgres","optimized","steady",10,18,7,"update","95.73","0.08","104.46","7.53","6723.27","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [192, 1]}"
"postgres","optimized","steady",10,18,8,"update","95.97","0.08","104.20","7.56","6723.36","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [192, 1]}"
"postgres","optimized","steady",10,18,9,"update","95.09","0.13","105.16","7.53","6722.90","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [192, 1]}"
"postgres","optimized","steady",10,18,10,"update","97.18","0.08","102.90","7.44","6723.18","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [192, 1]}"
"postgres","optimized","warmup",10,19,1,"update","147.61","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,2,"update","146.28","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,3,"update","146.61","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,4,"update","146.45","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,5,"update","147.57","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,6,"update","146.98","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,7,"update","147.09","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,8,"update","147.29","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,9,"update","146.40","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,10,"update","148.17","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,19,1,"update","95.71","0.12","104.48","7.58","6723.26","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [281, 4]}"
"postgres","optimized","steady",10,19,2,"update","95.96","0.11","104.21","7.42","6723.43","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [291, 4]}"
"postgres","optimized","steady",10,19,3,"update","97.04","0.09","103.05","7.43","6723.10","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [301, 4]}"
"postgres","optimized","steady",10,19,4,"update","96.80","0.10","103.30","7.40","6723.49","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [311, 5]}"
"postgres","optimized","steady",10,19,5,"update","97.39","0.11","102.68","7.44","6722.99","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [187, 7]}"
"postgres","optimized","steady",10,19,6,"update","95.41","0.09","104.82","7.42","6723.15","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [197, 8]}"
"postgres","optimized","steady",10,19,7,"update","97.59","0.10","102.47","7.40","6723.25","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [207, 8]}"
"postgres","optimized","steady",10,19,8,"update","96.56","0.09","103.56","7.44","6723.52","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [217, 8]}"
"postgres","optimized","steady",10,19,9,"update","96.30","0.09","103.85","7.53","6723.71","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [227, 8]}"
"postgres","optimized","steady",10,19,10,"update","95.25","0.10","104.98","7.47","6723.20","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [237, 7]}"
"postgres","optimized","warmup",10,20,1,"update","148.23","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,2,"update","148.48","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,3,"update","147.62","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,4,"update","148.03","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,5,"update","150.23","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,6,"update","149.74","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,7,"update","148.91","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,8,"update","147.67","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,9,"update","148.23","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,10,"update","146.62","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,20,1,"update","97.51","0.11","102.55","7.71","6723.56","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [110, ""wagenknechtfriedo@example.net.tmp""]}"
"postgres","optimized","steady",10,20,2,"update","96.92","0.19","103.18","7.72","6723.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [120, ""nuran73@example.com.tmp""]}"
"postgres","optimized","steady",10,20,3,"update","99.47","0.16","100.53","7.56","6724.02","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [130, ""renejaentsch@example.net.tmp""]}"
"postgres","optimized","steady",10,20,4,"update","99.81","0.12","100.19","7.44","6723.81","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [140, ""roswitahermann@example.org.tmp""]}"
"postgres","optimized","steady",10,20,5,"update","95.96","0.12","104.21","7.83","6723.98","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [150, ""odowerg@example.net.tmp""]}"
"postgres","optimized","steady",10,20,6,"update","98.64","0.13","101.38","7.65","6723.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [160, ""wellerhans-herbert@example.org.tmp""]}"
"postgres","optimized","steady",10,20,7,"update","93.49","0.12","106.96","8.53","6724.06","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [170, ""langedierk@example.com.tmp""]}"
"postgres","optimized","steady",10,20,8,"update","95.92","0.12","104.26","7.91","6724.05","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [180, ""erhardtloos@example.com.tmp""]}"
"postgres","optimized","steady",10,20,9,"update","100.08","0.12","99.92","7.70","6724.18","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [96, ""nholt@example.org.tmp.tmp""]}"
"postgres","optimized","steady",10,20,10,"update","98.71","0.20","101.30","7.64","6724.18","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [107, ""amalie44@example.org.tmp.tmp""]}"
"postgres","optimized","warmup",10,21,1,"delete","157.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,2,"delete","146.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,3,"delete","149.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,4,"delete","146.34","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,5,"delete","146.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,6,"delete","147.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,7,"delete","145.95","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,8,"delete","147.95","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,9,"delete","146.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,10,"delete","147.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,21,1,"delete","96.78","0.05","103.32","7.44","6724.97","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,21,2,"delete","95.04","0.04","105.22","7.56","6725.28","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,21,3,"delete","113.51","0.04","88.10","6.37","6725.12","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,21,4,"delete","97.09","0.04","102.99","7.35","6725.08","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,21,5,"delete","96.73","0.04","103.38","7.36","6724.84","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,21,6,"delete","96.76","0.04","103.35","7.33","6724.93","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,21,7,"delete","96.00","0.04","104.17","7.46","6725.17","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,21,8,"delete","108.61","0.04","92.07","6.61","6724.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,21,9,"delete","97.62","0.04","102.44","7.38","6725.33","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,21,10,"delete","99.63","0.04","100.38","7.53","6725.13","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,22,1,"delete","150.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,2,"delete","151.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,3,"delete","147.45","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,4,"delete","149.94","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,5,"delete","150.10","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,6,"delete","149.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,7,"delete","150.49","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,8,"delete","153.35","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,9,"delete","148.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,10,"delete","150.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,22,1,"delete","101.34","0.04","98.68","7.39","6725.34","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,22,2,"delete","95.25","0.04","104.98","7.55","6725.02","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,22,3,"delete","97.54","0.04","102.53","7.42","6725.05","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,22,4,"delete","95.05","0.04","105.21","7.60","6725.13","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,22,5,"delete","116.37","0.04","85.93","6.71","6725.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,22,6,"delete","94.44","0.04","105.89","7.56","6725.25","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,22,7,"delete","95.83","0.04","104.35","7.48","6725.27","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,22,8,"delete","98.01","0.04","102.03","7.29","6725.35","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,22,9,"delete","95.12","0.04","105.13","7.52","6725.22","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,22,10,"delete","95.74","0.06","104.45","7.52","6725.31","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,23,1,"delete","147.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,2,"delete","146.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,3,"delete","147.48","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,4,"delete","148.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,5,"delete","149.72","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,6,"delete","147.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,7,"delete","146.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,8,"delete","144.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,9,"delete","146.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,10,"delete","148.24","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,23,1,"delete","96.75","0.04","103.36","7.42","6725.24","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,23,2,"delete","95.46","0.04","104.76","7.60","6725.24","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,23,3,"delete","98.11","0.04","101.93","7.35","6725.51","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,23,4,"delete","94.71","0.06","105.59","7.66","6725.32","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,23,5,"delete","97.07","0.04","103.01","7.38","6725.45","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,23,6,"delete","95.41","0.04","104.81","7.58","6725.66","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,23,7,"delete","96.47","0.04","103.66","7.40","6725.43","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,23,8,"delete","96.40","0.04","103.73","7.44","6725.12","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,23,9,"delete","96.10","0.05","104.05","7.67","6725.57","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,23,10,"delete","96.46","0.04","103.67","7.57","6725.38","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,24,1,"delete","166.56","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,2,"delete","149.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,3,"delete","146.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,4,"delete","148.74","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,5,"delete","146.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,6,"delete","147.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,7,"delete","163.33","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,8,"delete","146.38","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,9,"delete","143.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,10,"delete","147.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,24,1,"delete","95.84","0.04","104.34","7.51","6725.52","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,24,2,"delete","93.69","0.04","106.73","7.99","6725.54","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,24,3,"delete","97.01","0.04","103.08","7.43","6725.24","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,24,4,"delete","96.47","0.04","103.66","7.80","6725.21","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,24,5,"delete","98.64","0.04","101.38","7.33","6725.32","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,24,6,"delete","96.45","0.04","103.68","7.63","6725.39","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,24,7,"delete","99.44","0.04","100.57","7.78","6725.38","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,24,8,"delete","95.90","0.04","104.28","7.51","6725.57","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,24,9,"delete","98.33","0.04","101.70","7.33","6725.40","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,24,10,"delete","98.34","0.05","101.69","7.32","6725.47","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [371]}"
