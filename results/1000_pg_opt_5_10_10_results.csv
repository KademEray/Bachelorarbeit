"db","mode","phase","concurrency","query_no","repeat","complexity","duration_ms","server_ms","qps","avg_cpu","avg_mem","disk_mb","statement","result"
"postgres","optimized","warmup",1,1,1,"simple","74.27","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,2,"simple","71.71","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,3,"simple","69.04","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,4,"simple","70.24","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,5,"simple","69.14","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,6,"simple","70.15","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,7,"simple","70.51","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,8,"simple","70.28","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,9,"simple","69.81","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,1,10,"simple","68.37","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,1,1,"simple","17.91","2.29","55.85","17.46","6381.61","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,2,"simple","19.71","2.22","50.72","16.86","6381.59","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,3,"simple","19.33","2.21","51.74","17.27","6381.50","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,4,"simple","17.98","2.23","55.63","17.74","6381.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,5,"simple","18.68","2.19","53.53","17.31","6381.49","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,6,"simple","19.80","2.19","50.50","17.18","6381.75","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,7,"simple","18.93","2.19","52.82","17.04","6381.89","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,8,"simple","19.58","2.25","51.07","17.30","6381.56","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,9,"simple","21.34","2.22","46.87","16.02","6381.56","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,1,10,"simple","21.73","2.21","46.02","15.47","6381.25","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",1,2,1,"simple","51.51","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,2,"simple","51.09","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,3,"simple","51.39","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,4,"simple","51.08","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,5,"simple","51.09","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,6,"simple","51.07","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,7,"simple","51.42","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,8,"simple","51.01","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,9,"simple","51.27","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,2,10,"simple","51.31","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,2,1,"simple","0.91","0.07","1102.41","280.36","6381.45","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,2,"simple","0.91","0.08","1097.09","287.79","6381.27","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,3,"simple","0.91","0.07","1093.61","283.52","6381.45","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,4,"simple","0.90","0.08","1112.47","284.54","6381.49","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,5,"simple","0.92","0.07","1092.42","285.27","6381.67","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,6,"simple","0.96","0.07","1036.59","267.25","6381.59","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,7,"simple","0.92","0.07","1085.54","282.41","6381.45","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,8,"simple","0.94","0.07","1068.83","277.84","6381.75","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,9,"simple","0.99","0.07","1013.07","262.17","6381.70","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",1,2,10,"simple","0.95","0.07","1056.19","272.06","6381.54","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",1,3,1,"simple","52.48","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,2,"simple","52.18","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,3,"simple","52.18","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,4,"simple","51.89","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,5,"simple","51.85","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,6,"simple","51.95","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,7,"simple","52.11","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,8,"simple","52.06","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,9,"simple","51.84","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,3,10,"simple","51.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",1,3,1,"simple","1.80","0.37","556.82","146.75","6381.61","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,2,"simple","1.79","0.36","558.63","146.72","6381.34","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,3,"simple","1.78","0.35","562.87","148.38","6381.42","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,4,"simple","1.81","0.35","552.03","146.02","6381.86","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,5,"simple","1.81","0.35","553.13","146.31","6381.84","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,6,"simple","1.74","0.38","575.08","151.40","6381.46","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,7,"simple","1.77","0.37","563.98","148.81","6381.88","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,8,"simple","1.75","0.18","572.90","180.57","6383.57","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,9,"simple","1.74","0.18","574.55","352.49","6387.07","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","steady",1,3,10,"simple","1.74","0.18","574.38","374.79","6390.15","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [1, 1, ""Sina-Kramer-Weg 49"", ""Genthin"", ""63755"", ""Deutschland"", true]}"
"postgres","optimized","warmup",1,4,1,"medium","53.97","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,2,"medium","53.08","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,3,"medium","53.18","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,4,"medium","53.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,5,"medium","53.57","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,6,"medium","53.86","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,7,"medium","53.19","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,8,"medium","53.12","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,9,"medium","53.50","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,4,10,"medium","53.40","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,4,1,"medium","3.33","0.47","300.42","80.89","6388.52","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,2,"medium","3.25","0.45","308.01","84.63","6388.65","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,3,"medium","3.23","0.45","309.81","83.41","6388.88","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,4,"medium","3.30","0.45","303.09","81.20","6388.66","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,5,"medium","3.28","0.48","304.50","82.50","6388.64","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,6,"medium","3.22","0.49","310.65","83.30","6388.45","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,7,"medium","3.16","0.46","316.37","84.65","6388.75","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,8,"medium","3.22","0.45","310.63","83.69","6388.63","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,9,"medium","3.25","0.47","307.68","83.99","6388.57","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",1,4,10,"medium","3.29","0.48","303.94","82.67","6388.47","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 14, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",1,5,1,"medium","92.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,2,"medium","68.23","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,3,"medium","67.76","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,4,"medium","67.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,5,"medium","68.40","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,6,"medium","67.62","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,7,"medium","67.83","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,8,"medium","67.78","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,9,"medium","66.82","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,5,10,"medium","67.45","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,5,1,"medium","17.44","16.64","57.35","22.42","6391.75","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,2,"medium","17.53","16.32","57.05","22.27","6391.69","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,3,"medium","17.78","16.56","56.24","22.56","6391.50","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,4,"medium","17.72","16.59","56.42","22.96","6391.72","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,5,"medium","17.29","16.29","57.83","22.71","6391.62","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,6,"medium","17.30","16.27","57.80","22.93","6391.29","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,7,"medium","17.48","16.30","57.21","22.58","6391.54","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,8,"medium","17.47","20.36","57.25","22.34","6391.59","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,9,"medium","18.07","16.48","55.34","22.25","6392.00","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",1,5,10,"medium","19.93","16.66","50.17","20.80","6391.70","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","warmup",1,6,1,"medium","51.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,2,"medium","51.69","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,3,"medium","51.30","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,4,"medium","51.35","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,5,"medium","51.07","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,6,"medium","51.15","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,7,"medium","51.10","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,8,"medium","51.29","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,9,"medium","51.24","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,6,10,"medium","51.25","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,6,1,"medium","0.95","0.09","1047.34","270.86","6391.73","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,2,"medium","0.98","0.09","1021.35","297.36","6391.57","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,3,"medium","0.95","0.11","1050.20","272.42","6391.48","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,4,"medium","0.97","0.09","1027.54","266.53","6391.79","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,5,"medium","1.00","0.09","1003.71","258.43","6392.00","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,6,"medium","0.96","0.10","1036.70","268.58","6391.70","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,7,"medium","1.04","0.09","957.95","259.91","6391.76","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,8,"medium","1.00","0.09","1004.82","270.80","6391.77","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,9,"medium","0.95","0.09","1052.96","275.65","6391.60","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",1,6,10,"medium","0.94","0.09","1063.49","275.79","6391.92","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","warmup",1,7,1,"complex","53.27","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,2,"complex","52.36","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,3,"complex","52.38","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,4,"complex","52.49","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,5,"complex","52.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,6,"complex","52.24","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,7,"complex","52.34","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,8,"complex","52.14","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,9,"complex","52.27","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,7,10,"complex","52.22","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,7,1,"complex","2.10","0.78","476.42","126.78","6391.98","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,2,"complex","2.14","0.81","467.05","122.89","6391.79","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,3,"complex","2.09","0.81","478.79","126.98","6391.80","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,4,"complex","2.09","0.83","477.99","126.71","6391.71","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,5,"complex","2.12","0.79","471.90","126.55","6391.55","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,6,"complex","2.23","0.81","448.87","119.85","6391.70","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,7,"complex","2.11","0.76","474.29","125.06","6391.75","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,8,"complex","2.13","0.82","469.24","126.80","6391.84","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,9,"complex","2.20","0.78","454.50","120.50","6391.96","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",1,7,10,"complex","2.13","0.79","470.04","124.95","6391.85","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","warmup",1,8,1,"complex","53.53","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,2,"complex","52.46","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,3,"complex","52.27","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,4,"complex","52.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,5,"complex","52.18","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,6,"complex","52.46","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,7,"complex","52.27","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,8,"complex","52.50","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,9,"complex","52.28","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,8,10,"complex","52.33","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,8,1,"complex","2.08","1.02","481.46","130.13","6391.83","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,2,"complex","2.04","1.00","489.86","133.39","6391.91","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,3,"complex","2.05","1.03","487.80","131.77","6392.33","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,4,"complex","2.05","1.06","488.23","129.08","6392.04","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,5,"complex","2.06","1.00","486.33","130.32","6391.83","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,6,"complex","2.09","1.06","477.35","127.43","6391.86","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,7,"complex","2.03","1.08","492.03","132.33","6392.01","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,8,"complex","2.04","1.08","490.00","130.66","6391.86","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,9,"complex","2.04","1.05","490.00","131.75","6391.45","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",1,8,10,"complex","2.03","1.02","491.42","136.61","6391.77","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 53, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",1,9,1,"complex","52.60","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,2,"complex","51.70","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,3,"complex","51.77","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,4,"complex","51.63","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,5,"complex","51.97","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,6,"complex","51.92","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,7,"complex","51.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,8,"complex","51.81","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,9,"complex","51.85","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,9,10,"complex","51.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,9,1,"complex","1.53","0.57","654.54","173.10","6391.78","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,2,"complex","1.57","0.53","636.09","169.10","6391.90","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,3,"complex","1.53","0.54","651.93","173.75","6392.21","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,4,"complex","1.55","0.57","645.49","170.10","6391.98","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,5,"complex","1.53","0.53","651.68","172.42","6391.75","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,6,"complex","1.54","0.53","648.76","171.59","6392.13","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,7,"complex","1.53","0.53","654.24","172.23","6392.44","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,8,"complex","1.54","0.53","649.65","171.99","6391.87","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,9,"complex","1.51","0.54","661.03","174.76","6391.92","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","steady",1,9,10,"complex","1.52","0.55","659.67","173.81","6391.89","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 267, ""first"": [2, 1]}"
"postgres","optimized","warmup",1,10,1,"very_complex","53.27","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,2,"very_complex","52.75","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,3,"very_complex","52.71","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,4,"very_complex","53.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,5,"very_complex","52.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,6,"very_complex","52.87","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,7,"very_complex","52.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,8,"very_complex","52.96","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,9,"very_complex","52.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,10,10,"very_complex","53.08","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,10,1,"very_complex","2.68","1.88","373.43","102.08","6392.39","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,2,"very_complex","2.51","1.66","398.28","108.66","6392.53","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,3,"very_complex","2.46","1.64","406.26","111.01","6392.73","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,4,"very_complex","2.43","1.64","411.27","111.90","6392.52","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,5,"very_complex","2.44","1.62","409.60","111.30","6392.62","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,6,"very_complex","2.46","1.66","406.67","109.98","6393.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,7,"very_complex","2.47","1.63","405.61","109.88","6392.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,8,"very_complex","2.53","1.68","395.16","107.14","6392.73","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,9,"very_complex","2.44","1.65","409.28","110.38","6392.86","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,10,10,"very_complex","2.49","1.65","402.32","109.11","6392.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",1,11,1,"very_complex","54.89","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,2,"very_complex","54.79","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,3,"very_complex","54.47","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,4,"very_complex","54.52","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,5,"very_complex","54.51","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,6,"very_complex","54.53","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,7,"very_complex","54.57","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,8,"very_complex","54.64","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,9,"very_complex","54.57","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,11,10,"very_complex","54.82","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,11,1,"very_complex","4.41","4.34","226.98","65.51","6392.93","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,2,"very_complex","4.48","4.32","223.36","64.33","6392.77","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,3,"very_complex","4.53","4.32","220.91","63.89","6392.67","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,4,"very_complex","4.42","4.35","226.48","66.06","6392.49","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,5,"very_complex","4.42","4.35","225.99","75.09","6392.71","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,6,"very_complex","4.40","4.33","227.03","64.86","6392.61","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,7,"very_complex","4.47","4.31","223.74","64.85","6392.90","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,8,"very_complex","4.40","4.32","227.31","65.18","6392.79","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,9,"very_complex","4.39","4.29","227.85","65.45","6393.00","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",1,11,10,"very_complex","4.40","4.28","227.42","65.59","6392.63","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","warmup",1,12,1,"very_complex","52.48","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,2,"very_complex","52.83","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,3,"very_complex","52.46","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,4,"very_complex","52.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,5,"very_complex","52.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,6,"very_complex","52.68","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,7,"very_complex","52.92","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,8,"very_complex","52.74","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,9,"very_complex","52.80","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,12,10,"very_complex","52.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,12,1,"very_complex","2.48","1.64","402.79","109.51","6392.60","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,2,"very_complex","2.47","1.63","404.74","111.33","6392.79","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,3,"very_complex","2.50","1.64","400.34","108.91","6392.48","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,4,"very_complex","2.54","1.65","393.19","107.80","6393.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,5,"very_complex","2.47","1.68","404.91","111.46","6392.74","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,6,"very_complex","2.49","1.62","401.49","110.56","6392.88","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,7,"very_complex","2.62","1.70","381.74","104.34","6392.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,8,"very_complex","2.48","1.68","403.55","108.95","6392.70","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,9,"very_complex","2.46","1.64","407.10","111.74","6392.67","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",1,12,10,"very_complex","2.57","1.66","388.41","105.11","6392.54","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",1,13,1,"create","54.25","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,2,"create","53.87","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,3,"create","53.78","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,4,"create","53.58","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,5,"create","53.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,6,"create","53.77","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,7,"create","54.32","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,8,"create","53.87","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,9,"create","53.82","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,13,10,"create","54.05","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,13,1,"create","3.62","0.13","276.18","73.11","6393.02","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1372]}"
"postgres","optimized","steady",1,13,2,"create","3.52","0.10","284.16","74.36","6392.57","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1374]}"
"postgres","optimized","steady",1,13,3,"create","3.49","0.10","286.87","74.39","6392.39","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1376]}"
"postgres","optimized","steady",1,13,4,"create","3.58","0.11","279.31","73.33","6392.81","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1378]}"
"postgres","optimized","steady",1,13,5,"create","3.54","0.10","282.61","73.54","6392.76","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1380]}"
"postgres","optimized","steady",1,13,6,"create","3.60","0.10","277.64","71.71","6393.13","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1382]}"
"postgres","optimized","steady",1,13,7,"create","3.55","0.10","281.85","74.56","6392.65","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1384]}"
"postgres","optimized","steady",1,13,8,"create","3.49","0.10","286.44","73.29","6392.78","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1386]}"
"postgres","optimized","steady",1,13,9,"create","3.49","0.10","286.21","74.49","6392.98","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1388]}"
"postgres","optimized","steady",1,13,10,"create","3.55","0.10","281.86","72.10","6392.77","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1390]}"
"postgres","optimized","warmup",1,14,1,"create","54.15","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,2,"create","53.90","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,3,"create","53.63","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,4,"create","53.74","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,5,"create","53.64","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,6,"create","53.83","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,7,"create","53.88","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,8,"create","53.91","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,9,"create","54.07","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,14,10,"create","53.72","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,14,1,"create","3.53","0.10","283.02","72.85","6392.83","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1965]}"
"postgres","optimized","steady",1,14,2,"create","3.45","0.10","289.49","75.47","6392.74","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1967]}"
"postgres","optimized","steady",1,14,3,"create","3.50","0.10","285.57","74.90","6392.85","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1969]}"
"postgres","optimized","steady",1,14,4,"create","3.52","0.10","284.20","74.10","6392.86","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1971]}"
"postgres","optimized","steady",1,14,5,"create","3.59","0.10","278.17","74.12","6392.78","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1973]}"
"postgres","optimized","steady",1,14,6,"create","3.53","0.10","283.54","75.95","6392.71","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1975]}"
"postgres","optimized","steady",1,14,7,"create","5.70","0.10","175.34","46.98","6392.83","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1977]}"
"postgres","optimized","steady",1,14,8,"create","3.69","0.10","271.21","69.79","6392.88","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1979]}"
"postgres","optimized","steady",1,14,9,"create","3.55","0.09","281.85","73.75","6392.74","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1981]}"
"postgres","optimized","steady",1,14,10,"create","3.53","0.10","283.50","73.19","6393.37","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [1983]}"
"postgres","optimized","warmup",1,15,1,"create","54.01","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,2,"create","53.78","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,3,"create","53.76","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,4,"create","53.94","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,5,"create","53.96","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,6,"create","53.69","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,7,"create","53.96","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,8,"create","53.76","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,9,"create","53.81","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,15,10,"create","53.95","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,15,1,"create","3.57","0.11","280.28","72.47","6392.50","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1486]}"
"postgres","optimized","steady",1,15,2,"create","3.54","0.11","282.54","73.37","6392.87","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1488]}"
"postgres","optimized","steady",1,15,3,"create","3.59","0.11","278.37","72.25","6393.23","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1490]}"
"postgres","optimized","steady",1,15,4,"create","3.61","0.12","276.66","72.20","6392.66","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1492]}"
"postgres","optimized","steady",1,15,5,"create","3.54","0.11","282.88","73.76","6392.91","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1494]}"
"postgres","optimized","steady",1,15,6,"create","3.60","0.11","278.11","72.63","6392.67","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1496]}"
"postgres","optimized","steady",1,15,7,"create","3.62","0.28","275.92","71.66","6392.82","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1498]}"
"postgres","optimized","steady",1,15,8,"create","3.49","0.11","286.29","74.30","6392.83","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1500]}"
"postgres","optimized","steady",1,15,9,"create","3.56","0.11","281.12","73.34","6392.64","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1502]}"
"postgres","optimized","steady",1,15,10,"create","3.61","0.11","277.29","72.45","6393.05","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1504]}"
"postgres","optimized","warmup",1,16,1,"create","54.28","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,2,"create","54.12","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,3,"create","53.96","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,4,"create","53.83","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,5,"create","53.69","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,6,"create","53.85","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,7,"create","53.68","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,8,"create","53.86","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,9,"create","53.88","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,16,10,"create","54.01","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,16,1,"create","4.84","0.16","206.45","54.12","6392.71","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10316]}"
"postgres","optimized","steady",1,16,2,"create","3.72","0.12","269.08","70.63","6392.47","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10318]}"
"postgres","optimized","steady",1,16,3,"create","3.69","0.12","270.94","71.07","6392.80","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10320]}"
"postgres","optimized","steady",1,16,4,"create","3.59","0.12","278.82","72.30","6392.92","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10322]}"
"postgres","optimized","steady",1,16,5,"create","3.65","0.12","273.61","70.80","6392.80","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10324]}"
"postgres","optimized","steady",1,16,6,"create","3.61","0.12","277.16","72.98","6392.97","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10326]}"
"postgres","optimized","steady",1,16,7,"create","3.63","0.12","275.45","72.61","6392.95","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10328]}"
"postgres","optimized","steady",1,16,8,"create","3.54","0.11","282.38","86.91","6393.05","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10330]}"
"postgres","optimized","steady",1,16,9,"create","3.62","0.12","276.42","72.06","6392.85","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10332]}"
"postgres","optimized","steady",1,16,10,"create","3.46","0.11","288.94","75.56","6393.10","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10334]}"
"postgres","optimized","warmup",1,17,1,"update","55.58","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,2,"update","53.74","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,3,"update","53.71","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,4,"update","53.84","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,5,"update","53.83","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,6,"update","53.66","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,7,"update","53.96","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,8,"update","53.67","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,9,"update","53.91","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,17,10,"update","53.62","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,17,1,"update","3.56","0.08","280.53","74.01","6393.19","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [11, 72]}"
"postgres","optimized","steady",1,17,2,"update","3.58","0.08","279.52","73.07","6392.53","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [12, 18]}"
"postgres","optimized","steady",1,17,3,"update","3.48","0.08","287.45","74.82","6392.84","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [13, 55]}"
"postgres","optimized","steady",1,17,4,"update","3.51","0.08","284.97","73.25","6393.02","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [14, 84]}"
"postgres","optimized","steady",1,17,5,"update","3.51","0.08","285.08","73.46","6393.38","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [15, 43]}"
"postgres","optimized","steady",1,17,6,"update","3.54","0.08","282.53","73.26","6392.70","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [16, 52]}"
"postgres","optimized","steady",1,17,7,"update","3.59","0.08","278.33","72.34","6393.29","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [17, 44]}"
"postgres","optimized","steady",1,17,8,"update","3.58","0.08","279.43","74.23","6392.97","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [18, 65]}"
"postgres","optimized","steady",1,17,9,"update","3.32","0.08","301.53","77.27","6393.41","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [19, 87]}"
"postgres","optimized","steady",1,17,10,"update","3.53","0.08","283.55","74.49","6393.03","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [20, 58]}"
"postgres","optimized","warmup",1,18,1,"update","53.76","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,2,"update","53.75","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,3,"update","53.59","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,4,"update","53.70","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,5,"update","53.93","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,6,"update","54.01","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,7,"update","53.65","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,8,"update","53.64","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,9,"update","53.69","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,18,10,"update","53.81","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,18,1,"update","3.46","0.08","289.13","75.05","6393.21","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [11, 1]}"
"postgres","optimized","steady",1,18,2,"update","3.71","0.10","269.63","70.31","6392.92","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [12, 1]}"
"postgres","optimized","steady",1,18,3,"update","3.61","0.10","276.85","71.80","6393.09","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [13, 2]}"
"postgres","optimized","steady",1,18,4,"update","3.61","0.10","277.26","72.28","6392.89","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [14, 3]}"
"postgres","optimized","steady",1,18,5,"update","3.51","0.10","285.25","73.78","6393.02","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [15, 3]}"
"postgres","optimized","steady",1,18,6,"update","3.63","0.08","275.46","71.78","6392.91","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [16, 3]}"
"postgres","optimized","steady",1,18,7,"update","3.61","0.10","277.04","72.06","6393.17","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [17, 1]}"
"postgres","optimized","steady",1,18,8,"update","3.62","0.12","276.02","72.38","6393.10","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [18, 3]}"
"postgres","optimized","steady",1,18,9,"update","3.60","0.10","277.92","72.53","6393.24","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [19, 1]}"
"postgres","optimized","steady",1,18,10,"update","3.46","0.10","288.84","73.50","6393.44","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [20, 3]}"
"postgres","optimized","warmup",1,19,1,"update","53.59","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,2,"update","53.89","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,3,"update","53.87","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,4,"update","53.43","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,5,"update","53.91","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,6,"update","53.54","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,7,"update","53.53","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,8,"update","53.91","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,9,"update","53.96","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,19,10,"update","53.98","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,19,1,"update","3.44","0.11","291.03","75.72","6393.09","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [11, 5]}"
"postgres","optimized","steady",1,19,2,"update","3.52","0.08","284.04","74.29","6393.15","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [12, 4]}"
"postgres","optimized","steady",1,19,3,"update","3.61","0.09","276.92","71.20","6392.91","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [13, 5]}"
"postgres","optimized","steady",1,19,4,"update","3.57","0.09","280.38","72.25","6392.94","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [14, 5]}"
"postgres","optimized","steady",1,19,5,"update","3.47","0.08","288.02","74.34","6393.21","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [15, 5]}"
"postgres","optimized","steady",1,19,6,"update","3.50","0.10","285.55","74.70","6392.92","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [16, 5]}"
"postgres","optimized","steady",1,19,7,"update","3.54","0.08","282.66","73.21","6393.18","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [17, 4]}"
"postgres","optimized","steady",1,19,8,"update","3.55","0.09","281.86","73.54","6393.30","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [18, 4]}"
"postgres","optimized","steady",1,19,9,"update","3.50","0.08","285.39","74.33","6393.30","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [19, 4]}"
"postgres","optimized","steady",1,19,10,"update","3.63","0.09","275.17","72.72","6392.85","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [20, 5]}"
"postgres","optimized","warmup",1,20,1,"update","53.80","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,2,"update","53.68","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,3,"update","53.77","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,4,"update","53.73","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,5,"update","53.63","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,6,"update","53.74","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,7,"update","54.09","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,8,"update","53.52","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,9,"update","53.80","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,20,10,"update","53.74","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,20,1,"update","3.50","0.10","285.80","73.87","6392.93","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [11, ""klausroehricht@example.net.tmp""]}"
"postgres","optimized","steady",1,20,2,"update","3.50","0.10","285.99","76.71","6392.88","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [12, ""annettkaul@example.net.tmp""]}"
"postgres","optimized","steady",1,20,3,"update","3.52","0.11","283.76","73.66","6392.98","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [13, ""iklotz@example.com.tmp""]}"
"postgres","optimized","steady",1,20,4,"update","3.52","0.10","284.20","74.75","6392.97","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [14, ""nkrein@example.org.tmp""]}"
"postgres","optimized","steady",1,20,5,"update","3.53","0.12","283.64","74.87","6392.78","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [15, ""raissapeukert@example.com.tmp""]}"
"postgres","optimized","steady",1,20,6,"update","3.48","0.10","287.13","74.93","6393.00","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [16, ""ofliegner@example.com.tmp""]}"
"postgres","optimized","steady",1,20,7,"update","3.57","0.13","279.90","72.62","6393.14","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [17, ""holmkruschwitz@example.com.tmp""]}"
"postgres","optimized","steady",1,20,8,"update","3.61","0.10","276.72","71.60","6392.98","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [18, ""vollbrechtlotte@example.com.tmp""]}"
"postgres","optimized","steady",1,20,9,"update","3.64","0.10","274.46","71.04","6392.88","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [19, ""leifvogt@example.net.tmp""]}"
"postgres","optimized","steady",1,20,10,"update","3.52","0.11","283.98","74.20","6392.91","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [20, ""adelheidroskoth@example.org.tmp""]}"
"postgres","optimized","warmup",1,21,1,"delete","53.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,2,"delete","53.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,3,"delete","53.58","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,4,"delete","53.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,5,"delete","53.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,6,"delete","53.79","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,7,"delete","53.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,8,"delete","53.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,9,"delete","53.60","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,21,10,"delete","53.85","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,21,1,"delete","3.56","0.04","281.15","73.11","6393.02","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,21,2,"delete","3.48","0.04","286.99","74.83","6392.79","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,21,3,"delete","3.48","0.04","287.70","74.84","6393.20","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,21,4,"delete","3.64","0.04","274.68","71.68","6392.92","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,21,5,"delete","3.42","0.04","292.23","76.27","6393.24","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,21,6,"delete","3.60","0.04","277.91","78.04","6393.22","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,21,7,"delete","3.47","0.04","288.26","74.97","6393.13","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,21,8,"delete","5.91","0.04","169.18","44.53","6393.09","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,21,9,"delete","3.49","0.04","286.16","74.73","6393.19","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,21,10,"delete","3.56","0.04","280.53","73.03","6392.87","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,22,1,"delete","53.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,2,"delete","53.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,3,"delete","53.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,4,"delete","53.85","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,5,"delete","54.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,6,"delete","53.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,7,"delete","53.96","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,8,"delete","53.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,9,"delete","53.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,22,10,"delete","53.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,22,1,"delete","3.58","0.07","279.00","73.53","6393.25","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,22,2,"delete","3.67","0.07","272.72","70.57","6393.00","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,22,3,"delete","3.44","0.07","290.77","75.58","6393.05","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,22,4,"delete","3.63","0.07","275.77","71.45","6393.23","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,22,5,"delete","3.47","0.07","288.13","77.04","6392.89","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,22,6,"delete","4.96","0.07","201.61","53.62","6392.87","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,22,7,"delete","3.63","0.07","275.55","71.94","6393.38","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,22,8,"delete","3.71","0.10","269.21","70.01","6393.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,22,9,"delete","3.60","0.07","277.46","72.15","6393.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,22,10,"delete","3.63","0.07","275.44","73.25","6393.07","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,23,1,"delete","53.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,2,"delete","53.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,3,"delete","53.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,4,"delete","53.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,5,"delete","53.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,6,"delete","54.04","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,7,"delete","53.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,8,"delete","53.87","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,9,"delete","53.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,23,10,"delete","53.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,23,1,"delete","3.53","0.04","283.16","73.67","6393.18","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,23,2,"delete","3.62","0.04","276.05","71.46","6393.47","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,23,3,"delete","3.54","0.05","282.24","73.09","6393.13","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,23,4,"delete","3.58","0.04","279.66","72.80","6393.33","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,23,5,"delete","3.61","0.04","276.72","71.94","6393.00","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,23,6,"delete","3.43","0.04","291.35","74.93","6392.83","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,23,7,"delete","3.49","0.05","286.77","75.26","6392.81","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,23,8,"delete","3.52","0.06","283.94","73.97","6393.18","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,23,9,"delete","3.56","0.04","280.52","73.23","6392.87","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,23,10,"delete","3.55","0.04","281.32","73.09","6393.09","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",1,24,1,"delete","54.12","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,2,"delete","53.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,3,"delete","53.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,4,"delete","53.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,5,"delete","54.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,6,"delete","54.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,7,"delete","53.92","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,8,"delete","53.91","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,9,"delete","53.84","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",1,24,10,"delete","53.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",1,24,1,"delete","3.45","0.04","289.81","83.91","6393.40","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [11]}"
"postgres","optimized","steady",1,24,2,"delete","3.54","0.04","282.43","73.84","6392.98","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [12]}"
"postgres","optimized","steady",1,24,3,"delete","3.54","0.04","282.51","73.68","6393.18","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [13]}"
"postgres","optimized","steady",1,24,4,"delete","3.58","0.04","279.55","72.64","6392.99","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [14]}"
"postgres","optimized","steady",1,24,5,"delete","3.55","0.04","281.50","72.79","6393.17","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [15]}"
"postgres","optimized","steady",1,24,6,"delete","5.54","0.04","180.66","46.73","6393.14","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [16]}"
"postgres","optimized","steady",1,24,7,"delete","3.66","0.04","273.47","70.70","6393.52","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [17]}"
"postgres","optimized","steady",1,24,8,"delete","3.62","0.04","276.33","72.52","6393.18","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [18]}"
"postgres","optimized","steady",1,24,9,"delete","3.62","0.04","276.24","72.04","6392.79","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [19]}"
"postgres","optimized","steady",1,24,10,"delete","3.49","0.04","286.13","74.01","6392.91","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [20]}"
"postgres","optimized","warmup",3,1,1,"simple","102.96","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,2,"simple","104.25","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,3,"simple","103.67","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,4,"simple","103.66","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,5,"simple","101.93","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,6,"simple","102.27","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,7,"simple","107.54","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,8,"simple","103.96","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,9,"simple","103.57","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,1,10,"simple","103.72","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,1,1,"simple","52.92","2.21","56.69","11.43","6393.10","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,2,"simple","53.40","2.21","56.18","11.44","6393.02","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,3,"simple","51.90","2.23","57.81","11.56","6393.33","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,4,"simple","53.26","2.22","56.32","11.56","6393.18","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,5,"simple","52.98","2.22","56.62","11.47","6393.08","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,6,"simple","57.10","2.22","52.54","10.87","6393.00","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,7,"simple","56.25","2.24","53.34","11.10","6393.06","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,8,"simple","53.06","2.23","56.54","11.33","6393.42","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,9,"simple","53.39","2.23","56.19","11.42","6392.98","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,1,10,"simple","56.14","2.24","53.43","10.58","6393.17","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",3,2,1,"simple","74.00","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,2,"simple","73.76","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,3,"simple","73.34","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,4,"simple","73.19","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,5,"simple","73.00","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,6,"simple","73.27","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,7,"simple","73.39","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,8,"simple","73.26","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,9,"simple","73.26","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,2,10,"simple","73.26","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,2,1,"simple","23.12","0.07","129.73","15.54","6393.40","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,2,"simple","22.81","0.07","131.55","15.40","6393.17","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,3,"simple","22.82","0.09","131.44","15.70","6392.88","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,4,"simple","22.82","0.07","131.49","15.53","6393.16","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,5,"simple","23.17","0.08","129.48","15.30","6393.24","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,6,"simple","23.23","0.07","129.15","15.14","6393.06","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,7,"simple","23.03","0.07","130.24","15.48","6393.01","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,8,"simple","23.37","0.07","128.38","15.06","6393.34","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,9,"simple","22.83","0.07","131.38","15.53","6393.30","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",3,2,10,"simple","22.89","0.07","131.03","15.44","6393.51","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",3,3,1,"simple","74.24","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,2,"simple","74.86","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,3,"simple","74.34","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,4,"simple","75.25","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,5,"simple","74.19","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,6,"simple","73.87","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,7,"simple","74.53","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,8,"simple","86.39","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,9,"simple","74.14","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,3,10,"simple","74.49","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",3,3,1,"simple","23.61","0.19","127.08","15.68","6392.93","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,2,"simple","40.99","0.19","73.19","9.12","6393.14","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,3,"simple","23.96","0.20","125.21","15.49","6393.09","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,4,"simple","24.73","0.19","121.31","14.88","6393.11","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,5,"simple","24.08","0.19","124.61","15.42","6393.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,6,"simple","24.27","0.19","123.62","15.37","6392.91","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,7,"simple","24.06","0.21","124.69","15.43","6393.29","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,8,"simple","23.87","0.19","125.68","15.37","6393.32","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,9,"simple","23.92","0.21","125.43","15.37","6393.08","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","steady",3,3,10,"simple","24.24","0.20","123.76","15.49","6393.32","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [21, 15, ""Friedl-Briemer-Ring 82"", ""Sangerhausen"", ""77546"", ""Deutschland"", false]}"
"postgres","optimized","warmup",3,4,1,"medium","76.41","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,2,"medium","76.95","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,3,"medium","76.91","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,4,"medium","77.10","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,5,"medium","76.49","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,6,"medium","77.30","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,7,"medium","77.40","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,8,"medium","76.54","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,9,"medium","77.51","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,4,10,"medium","77.28","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,4,1,"medium","26.04","0.47","115.21","15.72","6393.23","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,2,"medium","26.93","0.48","111.42","15.26","6393.50","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,3,"medium","26.36","0.45","113.82","15.26","6393.36","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,4,"medium","26.52","0.45","113.13","15.16","6393.01","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,5,"medium","26.39","0.45","113.68","15.16","6393.33","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,6,"medium","26.01","0.49","115.33","15.35","6393.39","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,7,"medium","25.90","0.45","115.84","15.44","6393.24","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,8,"medium","26.40","0.45","113.63","15.20","6393.34","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,9,"medium","26.11","0.45","114.88","15.44","6392.95","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",3,4,10,"medium","26.41","0.46","113.60","15.34","6393.09","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",3,5,1,"medium","106.45","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,2,"medium","109.73","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,3,"medium","109.20","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,4,"medium","108.87","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,5,"medium","108.26","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,6,"medium","110.21","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,7,"medium","108.71","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,8,"medium","107.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,9,"medium","109.18","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,5,10,"medium","108.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,5,1,"medium","58.04","16.26","51.69","20.90","6392.93","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,2,"medium","57.80","16.32","51.90","21.56","6393.05","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,3,"medium","58.88","16.32","50.95","20.80","6392.99","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,4,"medium","58.00","16.30","51.73","20.97","6393.08","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,5,"medium","58.36","16.30","51.41","20.82","6393.29","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,6,"medium","57.67","16.33","52.02","21.01","6393.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,7,"medium","57.84","16.27","51.86","20.85","6393.03","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,8,"medium","58.20","16.37","51.55","20.86","6393.07","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,9,"medium","57.64","16.12","52.05","21.01","6393.04","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",3,5,10,"medium","59.88","16.83","50.10","21.16","6393.06","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","warmup",3,6,1,"medium","74.39","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,2,"medium","74.94","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,3,"medium","75.46","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,4,"medium","73.60","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,5,"medium","74.70","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,6,"medium","74.15","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,7,"medium","74.02","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,8,"medium","73.41","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,9,"medium","73.79","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,6,10,"medium","73.58","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,6,1,"medium","22.99","0.09","130.47","15.64","6392.95","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,2,"medium","23.51","0.09","127.60","15.20","6393.30","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,3,"medium","23.20","0.09","129.33","15.48","6392.99","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,4,"medium","22.07","0.09","135.91","16.20","6393.05","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,5,"medium","23.39","0.09","128.26","15.35","6392.88","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,6,"medium","23.62","0.09","127.00","15.22","6393.03","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,7,"medium","23.28","0.09","128.89","15.50","6392.93","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,8,"medium","23.64","0.09","126.90","14.97","6393.14","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,9,"medium","23.16","0.09","129.51","15.61","6393.40","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",3,6,10,"medium","23.69","0.09","126.64","15.29","6393.17","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","warmup",3,7,1,"complex","74.99","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,2,"complex","75.71","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,3,"complex","74.62","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,4,"complex","74.95","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,5,"complex","74.98","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,6,"complex","74.60","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,7,"complex","74.77","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,8,"complex","74.82","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,9,"complex","75.62","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,7,10,"complex","74.80","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,7,1,"complex","24.76","0.78","121.14","15.76","6393.15","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,2,"complex","24.98","0.79","120.09","16.06","6393.09","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,3,"complex","25.01","0.80","119.93","16.34","6392.97","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,4,"complex","27.44","0.79","109.35","14.39","6393.06","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,5,"complex","26.73","0.79","112.25","14.59","6393.17","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,6,"complex","24.78","0.80","121.09","15.72","6393.28","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,7,"complex","24.68","0.79","121.57","17.36","6393.07","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,8,"complex","24.86","0.77","120.68","15.68","6393.04","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,9,"complex","24.84","0.77","120.75","15.78","6392.92","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",3,7,10,"complex","24.81","0.75","120.93","15.88","6393.19","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","warmup",3,8,1,"complex","77.54","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,2,"complex","77.09","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,3,"complex","77.49","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,4,"complex","77.14","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,5,"complex","77.21","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,6,"complex","76.51","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,7,"complex","77.39","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,8,"complex","77.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,9,"complex","77.38","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,8,10,"complex","76.94","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,8,1,"complex","26.58","0.96","112.88","16.82","6393.35","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,2,"complex","26.98","0.93","111.21","16.64","6393.22","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,3,"complex","26.73","0.93","112.24","16.90","6393.24","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,4,"complex","26.60","0.94","112.77","16.83","6393.30","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,5,"complex","31.06","0.93","96.60","14.42","6393.20","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,6,"complex","27.16","0.98","110.47","16.48","6392.94","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,7,"complex","26.56","0.96","112.93","16.71","6393.22","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,8,"complex","26.62","0.96","112.68","16.84","6393.08","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,9,"complex","26.62","0.94","112.68","16.90","6393.23","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",3,8,10,"complex","26.98","0.98","111.18","16.70","6393.23","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 50, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",3,9,1,"complex","74.57","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,2,"complex","74.64","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,3,"complex","74.24","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,4,"complex","76.31","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,5,"complex","74.61","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,6,"complex","74.55","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,7,"complex","74.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,8,"complex","74.52","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,9,"complex","75.24","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,9,10,"complex","74.52","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,9,1,"complex","24.29","0.55","123.52","15.86","6393.36","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,2,"complex","24.32","0.54","123.38","15.79","6393.02","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,3,"complex","26.11","0.56","114.92","14.85","6392.83","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,4,"complex","24.65","0.56","121.71","15.83","6393.08","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,5,"complex","24.22","0.58","123.88","15.84","6393.35","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,6,"complex","24.26","0.54","123.66","15.88","6393.34","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,7,"complex","26.00","0.56","115.38","14.87","6393.08","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,8,"complex","26.42","0.65","113.57","14.49","6393.01","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,9,"complex","24.44","0.59","122.77","15.68","6392.88","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","steady",3,9,10,"complex","24.05","0.57","124.75","15.93","6393.08","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 268, ""first"": [1, 20]}"
"postgres","optimized","warmup",3,10,1,"very_complex","79.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,2,"very_complex","76.23","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,3,"very_complex","76.14","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,4,"very_complex","76.39","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,5,"very_complex","75.89","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,6,"very_complex","76.16","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,7,"very_complex","75.97","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,8,"very_complex","75.77","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,9,"very_complex","75.91","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,10,10,"very_complex","76.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,10,1,"very_complex","26.00","1.73","115.38","16.30","6393.42","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,2,"very_complex","26.09","1.66","114.97","16.03","6393.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,3,"very_complex","25.84","1.68","116.11","16.34","6393.25","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,4,"very_complex","25.74","1.65","116.56","16.56","6393.62","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,5,"very_complex","26.01","1.69","115.32","16.12","6393.38","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,6,"very_complex","25.66","1.64","116.91","16.57","6393.37","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,7,"very_complex","25.79","1.65","116.32","16.31","6393.40","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,8,"very_complex","25.82","1.72","116.19","16.29","6393.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,9,"very_complex","25.84","1.62","116.10","16.22","6393.57","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,10,10,"very_complex","26.20","1.70","114.50","16.11","6393.27","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",3,11,1,"very_complex","81.75","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,2,"very_complex","77.60","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,3,"very_complex","82.00","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,4,"very_complex","78.18","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,5,"very_complex","77.46","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,6,"very_complex","77.59","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,7,"very_complex","77.49","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,8,"very_complex","81.56","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,9,"very_complex","83.32","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,11,10,"very_complex","83.05","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,11,1,"very_complex","27.55","4.32","108.89","16.71","6393.34","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,2,"very_complex","27.62","4.27","108.62","16.93","6393.66","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,3,"very_complex","27.54","4.33","108.94","17.06","6393.40","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,4,"very_complex","27.94","4.34","107.37","16.64","6393.61","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,5,"very_complex","27.57","4.29","108.80","16.87","6393.50","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,6,"very_complex","36.29","4.29","82.68","12.74","6393.42","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,7,"very_complex","27.51","4.30","109.05","16.85","6393.30","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,8,"very_complex","31.58","4.33","94.99","14.64","6393.42","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,9,"very_complex","27.52","4.32","109.02","16.79","6393.58","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",3,11,10,"very_complex","27.69","4.28","108.33","16.78","6393.83","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","warmup",3,12,1,"very_complex","76.07","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,2,"very_complex","76.00","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,3,"very_complex","75.80","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,4,"very_complex","76.40","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,5,"very_complex","76.47","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,6,"very_complex","76.54","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,7,"very_complex","76.07","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,8,"very_complex","79.91","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,9,"very_complex","76.12","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,12,10,"very_complex","80.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,12,1,"very_complex","25.83","1.76","116.14","16.36","6393.35","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,2,"very_complex","27.26","1.67","110.06","16.79","6393.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,3,"very_complex","26.54","1.65","113.04","16.38","6393.44","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,4,"very_complex","27.19","1.74","110.33","16.30","6393.57","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,5,"very_complex","26.13","1.66","114.81","16.24","6393.72","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,6,"very_complex","26.65","1.66","112.58","15.96","6393.57","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,7,"very_complex","25.97","1.65","115.50","16.23","6393.63","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,8,"very_complex","25.90","1.67","115.83","16.15","6393.64","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,9,"very_complex","25.87","1.65","115.98","16.36","6393.50","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",3,12,10,"very_complex","26.14","1.64","114.76","16.07","6393.68","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",3,13,1,"create","77.58","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,2,"create","76.78","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,3,"create","76.46","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,4,"create","76.81","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,5,"create","77.04","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,6,"create","76.76","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,7,"create","76.72","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,8,"create","76.52","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,9,"create","76.71","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,13,10,"create","76.10","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,13,1,"create","26.79","0.11","111.97","14.41","6393.88","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1422]}"
"postgres","optimized","steady",3,13,2,"create","27.11","0.10","110.67","14.50","6393.42","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1426]}"
"postgres","optimized","steady",3,13,3,"create","29.44","0.14","101.89","13.39","6393.39","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1430]}"
"postgres","optimized","steady",3,13,4,"create","26.50","0.11","113.22","13.91","6393.43","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1434]}"
"postgres","optimized","steady",3,13,5,"create","26.17","0.14","114.62","13.93","6393.51","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1438]}"
"postgres","optimized","steady",3,13,6,"create","26.18","0.12","114.60","14.19","6393.56","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1442]}"
"postgres","optimized","steady",3,13,7,"create","27.31","0.12","109.85","13.58","6393.47","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1446]}"
"postgres","optimized","steady",3,13,8,"create","26.32","0.15","113.97","14.02","6393.45","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1450]}"
"postgres","optimized","steady",3,13,9,"create","26.35","0.10","113.87","14.13","6393.24","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1454]}"
"postgres","optimized","steady",3,13,10,"create","26.95","0.11","111.34","13.57","6393.84","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1458]}"
"postgres","optimized","warmup",3,14,1,"create","76.41","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,2,"create","76.50","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,3,"create","76.93","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,4,"create","76.34","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,5,"create","76.49","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,6,"create","78.02","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,7,"create","76.37","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,8,"create","77.46","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,9,"create","76.32","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,14,10,"create","76.66","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,14,1,"create","26.08","0.13","115.04","14.14","6393.63","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2015]}"
"postgres","optimized","steady",3,14,2,"create","26.50","0.10","113.19","13.97","6393.53","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2019]}"
"postgres","optimized","steady",3,14,3,"create","27.33","0.10","109.75","13.50","6393.54","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2023]}"
"postgres","optimized","steady",3,14,4,"create","26.05","0.14","115.18","14.32","6393.25","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2027]}"
"postgres","optimized","steady",3,14,5,"create","36.99","0.13","81.10","9.95","6393.62","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2031]}"
"postgres","optimized","steady",3,14,6,"create","26.90","0.10","111.51","14.00","6393.66","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2035]}"
"postgres","optimized","steady",3,14,7,"create","26.23","0.10","114.35","13.98","6393.45","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2039]}"
"postgres","optimized","steady",3,14,8,"create","27.57","0.13","108.82","13.80","6393.60","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2043]}"
"postgres","optimized","steady",3,14,9,"create","26.19","0.10","114.54","14.01","6393.44","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2047]}"
"postgres","optimized","steady",3,14,10,"create","26.62","0.12","112.71","13.80","6393.48","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2051]}"
"postgres","optimized","warmup",3,15,1,"create","76.53","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,2,"create","76.88","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,3,"create","76.71","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,4,"create","76.38","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,5,"create","78.11","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,6,"create","76.37","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,7,"create","77.37","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,8,"create","76.95","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,9,"create","76.89","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,15,10,"create","76.53","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,15,1,"create","26.42","0.11","113.57","14.09","6393.32","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1536]}"
"postgres","optimized","steady",3,15,2,"create","26.18","0.11","114.60","14.16","6393.48","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1540]}"
"postgres","optimized","steady",3,15,3,"create","26.13","0.12","114.80","14.22","6393.29","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1544]}"
"postgres","optimized","steady",3,15,4,"create","26.85","0.11","111.74","13.95","6393.71","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1548]}"
"postgres","optimized","steady",3,15,5,"create","26.14","0.12","114.75","14.17","6393.66","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1552]}"
"postgres","optimized","steady",3,15,6,"create","26.32","0.12","113.97","14.21","6393.67","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1556]}"
"postgres","optimized","steady",3,15,7,"create","26.33","0.11","113.94","14.06","6393.41","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1560]}"
"postgres","optimized","steady",3,15,8,"create","27.39","0.16","109.55","14.25","6393.29","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1564]}"
"postgres","optimized","steady",3,15,9,"create","26.08","0.21","115.03","14.27","6393.47","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1568]}"
"postgres","optimized","steady",3,15,10,"create","26.52","0.16","113.12","14.29","6393.55","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1572]}"
"postgres","optimized","warmup",3,16,1,"create","87.94","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,2,"create","76.50","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,3,"create","77.07","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,4,"create","76.84","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,5,"create","77.59","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,6,"create","76.30","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,7,"create","76.86","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,8,"create","76.78","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,9,"create","77.75","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,16,10,"create","76.70","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,16,1,"create","26.33","0.12","113.95","14.14","6393.70","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10366]}"
"postgres","optimized","steady",3,16,2,"create","26.67","0.12","112.48","14.08","6393.40","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10370]}"
"postgres","optimized","steady",3,16,3,"create","40.53","0.12","74.02","9.31","6394.00","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10374]}"
"postgres","optimized","steady",3,16,4,"create","26.15","0.12","114.71","14.26","6393.79","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10378]}"
"postgres","optimized","steady",3,16,5,"create","26.36","0.14","113.81","14.19","6393.86","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10382]}"
"postgres","optimized","steady",3,16,6,"create","28.02","0.16","107.06","13.47","6393.77","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10386]}"
"postgres","optimized","steady",3,16,7,"create","26.35","0.12","113.86","14.16","6393.80","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10390]}"
"postgres","optimized","steady",3,16,8,"create","26.30","0.12","114.07","14.21","6393.80","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10394]}"
"postgres","optimized","steady",3,16,9,"create","26.63","0.12","112.64","13.80","6393.87","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10398]}"
"postgres","optimized","steady",3,16,10,"create","26.18","0.12","114.60","14.13","6393.89","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10402]}"
"postgres","optimized","warmup",3,17,1,"update","76.13","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,2,"update","76.39","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,3,"update","76.19","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,4,"update","76.26","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,5,"update","76.58","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,6,"update","76.79","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,7,"update","76.06","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,8,"update","75.89","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,9,"update","76.27","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,17,10,"update","76.20","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,17,1,"update","25.96","0.08","115.58","14.28","6393.57","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 26]}"
"postgres","optimized","steady",3,17,2,"update","26.59","0.08","112.84","13.81","6393.54","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 29]}"
"postgres","optimized","steady",3,17,3,"update","26.41","0.08","113.59","13.66","6393.44","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 32]}"
"postgres","optimized","steady",3,17,4,"update","26.06","0.08","115.14","14.08","6393.78","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 35]}"
"postgres","optimized","steady",3,17,5,"update","35.81","0.08","83.77","10.03","6393.66","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 38]}"
"postgres","optimized","steady",3,17,6,"update","26.06","0.08","115.13","13.81","6393.60","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 41]}"
"postgres","optimized","steady",3,17,7,"update","26.46","0.08","113.36","13.72","6393.87","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 44]}"
"postgres","optimized","steady",3,17,8,"update","26.06","0.08","115.11","13.85","6393.97","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 47]}"
"postgres","optimized","steady",3,17,9,"update","26.42","0.08","113.57","13.62","6393.72","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 50]}"
"postgres","optimized","steady",3,17,10,"update","25.96","0.09","115.56","14.03","6394.00","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 53]}"
"postgres","optimized","warmup",3,18,1,"update","76.91","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,2,"update","76.27","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,3,"update","76.12","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,4,"update","76.38","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,5,"update","76.78","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,6,"update","76.30","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,7,"update","76.40","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,8,"update","77.07","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,9,"update","76.86","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,18,10,"update","76.45","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,18,1,"update","27.00","0.10","111.13","13.33","6393.61","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [51, 3]}"
"postgres","optimized","steady",3,18,2,"update","26.09","0.10","114.97","13.93","6393.59","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [54, 1]}"
"postgres","optimized","steady",3,18,3,"update","27.59","0.10","108.73","13.19","6393.54","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [57, 3]}"
"postgres","optimized","steady",3,18,4,"update","23.87","0.10","125.68","15.09","6393.52","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [60, 4]}"
"postgres","optimized","steady",3,18,5,"update","24.47","0.09","122.59","15.08","6393.59","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [63, 4]}"
"postgres","optimized","steady",3,18,6,"update","24.57","0.10","122.09","14.86","6393.74","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [66, 1]}"
"postgres","optimized","steady",3,18,7,"update","24.62","0.10","121.83","14.80","6393.79","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [69, 2]}"
"postgres","optimized","steady",3,18,8,"update","23.89","0.10","125.56","15.13","6393.72","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [72, 2]}"
"postgres","optimized","steady",3,18,9,"update","25.26","0.10","118.77","14.42","6393.66","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [75, 2]}"
"postgres","optimized","steady",3,18,10,"update","23.72","0.10","126.48","15.23","6393.72","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [78, 2]}"
"postgres","optimized","warmup",3,19,1,"update","74.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,2,"update","74.22","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,3,"update","73.83","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,4,"update","73.77","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,5,"update","74.76","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,6,"update","74.04","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,7,"update","74.02","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,8,"update","74.54","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,9,"update","73.33","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,19,10,"update","74.46","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,19,1,"update","23.75","0.08","126.34","15.30","6394.09","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [51, 5]}"
"postgres","optimized","steady",3,19,2,"update","24.16","0.09","124.17","14.96","6393.93","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [54, 5]}"
"postgres","optimized","steady",3,19,3,"update","23.93","0.08","125.39","15.10","6393.75","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [57, 5]}"
"postgres","optimized","steady",3,19,4,"update","23.85","0.08","125.79","15.22","6394.14","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [60, 4]}"
"postgres","optimized","steady",3,19,5,"update","23.84","0.08","125.83","15.36","6394.16","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [63, 5]}"
"postgres","optimized","steady",3,19,6,"update","24.07","0.10","124.65","15.07","6394.22","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [66, 5]}"
"postgres","optimized","steady",3,19,7,"update","23.74","0.08","126.38","15.18","6394.20","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [69, 4]}"
"postgres","optimized","steady",3,19,8,"update","24.46","0.09","122.62","14.81","6394.10","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [72, 4]}"
"postgres","optimized","steady",3,19,9,"update","23.67","0.08","126.74","15.10","6394.13","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [75, 5]}"
"postgres","optimized","steady",3,19,10,"update","24.26","0.09","123.65","14.93","6394.16","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [78, 4]}"
"postgres","optimized","warmup",3,20,1,"update","74.89","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,2,"update","74.46","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,3,"update","74.81","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,4,"update","74.69","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,5,"update","75.00","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,6,"update","74.69","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,7,"update","75.80","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,8,"update","75.91","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,9,"update","75.15","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,20,10,"update","74.88","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,20,1,"update","24.44","0.10","122.77","15.27","6393.77","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [51, ""hans-ulrichziegert@example.net.tmp""]}"
"postgres","optimized","steady",3,20,2,"update","23.41","0.11","128.18","15.90","6394.01","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [54, ""hildburg59@example.com.tmp""]}"
"postgres","optimized","steady",3,20,3,"update","24.28","0.10","123.55","15.32","6393.83","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [57, ""veronicaschaefer@example.org.tmp""]}"
"postgres","optimized","steady",3,20,4,"update","24.83","0.10","120.83","14.93","6393.84","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [60, ""gebhardgerlach@example.org.tmp""]}"
"postgres","optimized","steady",3,20,5,"update","28.50","0.10","105.25","14.33","6394.14","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [63, ""acaspar@example.net.tmp""]}"
"postgres","optimized","steady",3,20,6,"update","25.24","0.11","118.84","15.14","6394.26","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [66, ""beierfolkert@example.com.tmp""]}"
"postgres","optimized","steady",3,20,7,"update","24.84","0.11","120.78","14.96","6393.88","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [69, ""hildepoelitz@example.org.tmp""]}"
"postgres","optimized","steady",3,20,8,"update","23.68","0.10","126.68","15.71","6393.73","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [72, ""matteo74@example.net.tmp""]}"
"postgres","optimized","steady",3,20,9,"update","24.51","0.12","122.39","15.12","6393.74","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [75, ""mandykambs@example.com.tmp""]}"
"postgres","optimized","steady",3,20,10,"update","23.67","0.10","126.74","15.75","6393.83","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [78, ""wulf48@example.net.tmp""]}"
"postgres","optimized","warmup",3,21,1,"delete","74.28","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,2,"delete","73.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,3,"delete","74.33","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,4,"delete","74.05","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,5,"delete","74.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,6,"delete","74.12","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,7,"delete","73.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,8,"delete","73.96","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,9,"delete","73.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,21,10,"delete","74.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,21,1,"delete","24.26","0.04","123.68","14.88","6394.04","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,21,2,"delete","23.93","0.04","125.37","15.47","6394.01","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,21,3,"delete","23.83","0.04","125.91","15.26","6393.92","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,21,4,"delete","23.71","0.04","126.52","15.32","6393.80","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,21,5,"delete","24.23","0.04","123.83","14.94","6393.52","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,21,6,"delete","23.94","0.04","125.32","15.35","6394.07","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,21,7,"delete","24.05","0.08","124.72","15.36","6393.77","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,21,8,"delete","42.09","0.06","71.28","8.59","6393.69","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,21,9,"delete","24.29","0.04","123.51","15.00","6394.02","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,21,10,"delete","24.00","0.04","125.02","15.25","6393.86","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,22,1,"delete","74.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,2,"delete","74.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,3,"delete","74.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,4,"delete","73.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,5,"delete","74.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,6,"delete","74.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,7,"delete","74.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,8,"delete","75.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,9,"delete","74.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,22,10,"delete","74.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,22,1,"delete","23.78","0.07","126.18","15.29","6393.83","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,22,2,"delete","23.90","0.07","125.53","15.26","6393.76","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,22,3,"delete","24.46","0.07","122.66","14.94","6393.75","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,22,4,"delete","23.91","0.07","125.45","15.24","6393.76","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,22,5,"delete","22.20","0.07","135.15","16.93","6394.19","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,22,6,"delete","24.11","0.07","124.43","15.02","6393.71","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,22,7,"delete","23.84","0.07","125.82","15.21","6394.13","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,22,8,"delete","23.87","0.06","125.67","15.49","6394.17","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,22,9,"delete","23.90","0.07","125.50","15.22","6394.21","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,22,10,"delete","24.36","0.10","123.13","14.93","6394.01","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,23,1,"delete","74.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,2,"delete","74.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,3,"delete","74.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,4,"delete","73.70","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,5,"delete","74.29","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,6,"delete","74.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,7,"delete","74.25","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,8,"delete","74.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,9,"delete","74.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,23,10,"delete","74.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,23,1,"delete","24.18","0.04","124.07","15.12","6393.95","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,23,2,"delete","23.98","0.04","125.11","15.22","6393.85","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,23,3,"delete","32.89","0.04","91.23","11.04","6393.91","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,23,4,"delete","24.18","0.04","124.05","15.00","6394.04","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,23,5,"delete","23.94","0.04","125.31","15.09","6394.23","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,23,6,"delete","23.92","0.04","125.40","15.10","6394.06","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,23,7,"delete","24.02","0.04","124.90","15.12","6394.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,23,8,"delete","24.50","0.05","122.45","14.89","6393.77","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,23,9,"delete","23.84","0.04","125.82","15.16","6394.35","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,23,10,"delete","23.73","0.04","126.42","15.28","6393.95","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",3,24,1,"delete","75.15","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,2,"delete","74.58","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,3,"delete","74.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,4,"delete","74.80","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,5,"delete","74.07","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,6,"delete","74.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,7,"delete","74.74","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,8,"delete","87.36","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,9,"delete","74.23","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",3,24,10,"delete","74.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",3,24,1,"delete","24.47","0.04","122.58","14.86","6393.97","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [51]}"
"postgres","optimized","steady",3,24,2,"delete","24.32","0.04","123.33","15.04","6394.19","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [54]}"
"postgres","optimized","steady",3,24,3,"delete","23.17","0.04","129.49","15.77","6393.89","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [57]}"
"postgres","optimized","steady",3,24,4,"delete","23.87","0.04","125.66","15.29","6393.90","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [60]}"
"postgres","optimized","steady",3,24,5,"delete","23.97","0.04","125.15","15.10","6394.08","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [63]}"
"postgres","optimized","steady",3,24,6,"delete","24.29","0.04","123.52","14.89","6394.21","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [66]}"
"postgres","optimized","steady",3,24,7,"delete","23.90","0.04","125.54","15.29","6393.80","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [69]}"
"postgres","optimized","steady",3,24,8,"delete","23.82","0.04","125.95","15.38","6394.30","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [72]}"
"postgres","optimized","steady",3,24,9,"delete","23.88","0.04","125.61","15.42","6394.08","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [75]}"
"postgres","optimized","steady",3,24,10,"delete","24.36","0.04","123.14","14.97","6393.98","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [78]}"
"postgres","optimized","warmup",5,1,1,"simple","130.46","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,2,"simple","128.32","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,3,"simple","128.62","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,4,"simple","128.00","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,5,"simple","127.08","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,6,"simple","136.22","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,7,"simple","127.60","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,8,"simple","127.26","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,9,"simple","126.96","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,1,10,"simple","127.18","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,1,1,"simple","77.58","2.30","64.45","11.64","6394.01","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,2,"simple","90.31","2.23","55.36","10.35","6394.14","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,3,"simple","87.00","2.22","57.47","10.27","6393.98","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,4,"simple","88.92","2.24","56.23","10.18","6393.95","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,5,"simple","76.60","2.26","65.27","11.68","6393.70","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,6,"simple","86.95","2.22","57.50","10.27","6393.99","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,7,"simple","77.99","2.19","64.11","11.62","6394.11","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,8,"simple","76.40","2.19","65.45","11.65","6393.83","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,9,"simple","76.19","2.20","65.62","11.75","6393.92","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,1,10,"simple","87.04","2.23","57.45","10.18","6393.72","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",5,2,1,"simple","94.88","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,2,"simple","95.02","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,3,"simple","94.93","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,4,"simple","94.46","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,5,"simple","94.98","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,6,"simple","94.37","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,7,"simple","94.36","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,8,"simple","94.31","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,9,"simple","94.38","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,2,10,"simple","94.42","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,2,1,"simple","44.23","0.07","113.04","10.12","6394.42","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,2,"simple","43.79","0.11","114.19","10.23","6394.14","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,3,"simple","43.28","0.07","115.51","10.29","6393.78","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,4,"simple","43.82","0.07","114.10","10.21","6394.07","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,5,"simple","44.57","0.07","112.18","10.08","6394.09","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,6,"simple","43.29","0.07","115.50","10.44","6393.97","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,7,"simple","43.66","0.07","114.53","10.36","6394.18","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,8,"simple","44.15","0.07","113.24","10.03","6394.19","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,9,"simple","43.83","0.07","114.07","10.25","6394.27","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",5,2,10,"simple","43.50","0.07","114.95","10.29","6393.97","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",5,3,1,"simple","110.09","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,2,"simple","95.41","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,3,"simple","96.25","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,4,"simple","95.22","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,5,"simple","95.77","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,6,"simple","95.36","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,7,"simple","94.37","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,8,"simple","95.74","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,9,"simple","95.89","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,3,10,"simple","95.78","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",5,3,1,"simple","68.78","0.20","72.70","6.93","6393.93","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,2,"simple","45.21","0.21","110.60","10.62","6394.05","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,3,"simple","45.51","0.19","109.86","10.46","6393.67","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,4,"simple","44.50","0.19","112.36","10.72","6394.00","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,5,"simple","45.48","0.19","109.94","10.49","6393.90","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,6,"simple","46.32","0.20","107.94","10.68","6393.99","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,7,"simple","45.89","0.19","108.96","10.84","6393.95","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,8,"simple","45.50","0.22","109.88","10.56","6393.95","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,9,"simple","45.53","0.19","109.81","10.44","6394.17","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","steady",5,3,10,"simple","44.74","0.19","111.77","10.53","6393.95","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [81, 59, ""Athanasios-Graf-Ring 1/6"", ""Kemnath"", ""20181"", ""Deutschland"", true]}"
"postgres","optimized","warmup",5,4,1,"medium","99.19","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,2,"medium","100.30","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,3,"medium","100.60","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,4,"medium","97.78","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,5,"medium","99.97","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,6,"medium","101.45","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,7,"medium","100.04","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,8,"medium","100.06","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,9,"medium","97.66","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,4,10,"medium","100.21","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,4,1,"medium","46.61","0.45","107.27","11.27","6394.29","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,2,"medium","50.08","0.46","99.85","10.62","6393.78","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,3,"medium","51.67","0.45","96.76","10.34","6394.35","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,4,"medium","47.38","0.47","105.52","11.26","6394.10","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,5,"medium","47.48","0.45","105.30","11.28","6394.08","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,6,"medium","47.79","0.45","104.62","11.03","6393.93","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,7,"medium","47.39","0.45","105.51","11.27","6394.34","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,8,"medium","47.30","0.47","105.72","11.39","6394.21","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,9,"medium","49.42","0.48","101.18","10.76","6394.81","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",5,4,10,"medium","47.88","0.48","104.44","11.07","6393.87","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",5,5,1,"medium","130.72","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,2,"medium","128.93","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,3,"medium","131.67","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,4,"medium","128.41","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,5,"medium","129.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,6,"medium","160.61","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,7,"medium","129.25","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,8,"medium","128.64","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,9,"medium","129.12","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,5,10,"medium","134.08","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,5,1,"medium","77.90","16.35","64.19","25.69","6394.03","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,2,"medium","83.95","15.48","59.56","23.70","6394.21","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,3,"medium","81.40","16.41","61.42","24.60","6393.86","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,4,"medium","78.28","16.19","63.87","25.64","6393.89","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,5,"medium","80.74","16.29","61.93","24.83","6394.36","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,6,"medium","85.22","16.12","58.67","23.53","6393.97","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,7,"medium","85.58","16.10","58.42","24.16","6393.97","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,8,"medium","81.47","16.30","61.37","24.70","6394.13","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,9,"medium","90.16","16.38","55.46","22.27","6393.91","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",5,5,10,"medium","78.53","16.38","63.67","25.64","6393.98","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","warmup",5,6,1,"medium","94.79","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,2,"medium","95.93","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,3,"medium","94.62","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,4,"medium","94.43","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,5,"medium","94.08","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,6,"medium","94.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,7,"medium","94.59","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,8,"medium","94.79","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,9,"medium","94.46","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,6,10,"medium","94.36","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,6,1,"medium","44.69","0.07","111.88","10.20","6394.05","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,2,"medium","44.15","0.07","113.26","10.49","6394.05","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,3,"medium","44.52","0.07","112.32","10.31","6394.45","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,4,"medium","59.38","0.07","84.21","7.73","6393.87","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,5,"medium","44.84","0.07","111.51","10.18","6393.77","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,6,"medium","44.10","0.09","113.37","10.41","6394.07","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,7,"medium","43.96","0.09","113.75","10.33","6394.19","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,8,"medium","47.06","0.07","106.25","10.50","6394.54","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,9,"medium","44.47","0.07","112.44","10.28","6394.08","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","steady",5,6,10,"medium","43.38","0.07","115.26","10.37","6394.41","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 100, ""first"": [129, 559, 1005038, 2, ""2025-07-13 02:35:24""]}"
"postgres","optimized","warmup",5,7,1,"complex","96.71","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,2,"complex","98.06","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,3,"complex","97.31","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,4,"complex","97.05","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,5,"complex","96.80","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,6,"complex","95.49","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,7,"complex","98.11","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,8,"complex","96.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,9,"complex","95.65","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,7,10,"complex","96.52","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,7,1,"complex","47.18","0.75","105.97","10.99","6394.23","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,2,"complex","47.87","0.78","104.45","10.64","6394.25","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,3,"complex","45.98","0.77","108.74","11.16","6394.34","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,4,"complex","46.19","0.76","108.24","11.02","6394.05","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,5,"complex","46.70","0.77","107.07","11.02","6393.89","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,6,"complex","46.02","0.76","108.64","11.14","6393.97","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,7,"complex","46.01","0.79","108.66","11.08","6394.13","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,8,"complex","46.22","0.77","108.18","11.19","6394.35","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,9,"complex","46.68","0.77","107.11","11.35","6394.33","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",5,7,10,"complex","47.91","0.78","104.36","10.65","6393.97","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","warmup",5,8,1,"complex","97.53","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,2,"complex","97.44","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,3,"complex","98.41","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,4,"complex","100.94","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,5,"complex","100.10","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,6,"complex","97.46","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,7,"complex","97.26","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,8,"complex","97.47","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,9,"complex","97.03","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,8,10,"complex","97.55","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,8,1,"complex","47.17","0.70","106.00","12.81","6393.55","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,2,"complex","47.80","0.69","104.59","12.61","6393.95","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,3,"complex","46.95","0.71","106.49","12.84","6394.05","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,4,"complex","47.11","0.70","106.14","12.73","6394.13","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,5,"complex","47.17","0.72","106.00","12.53","6394.17","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,6,"complex","48.15","0.69","103.84","12.42","6394.29","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,7,"complex","47.19","0.70","105.95","12.87","6393.88","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,8,"complex","49.49","0.75","101.03","12.48","6394.11","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,9,"complex","47.82","0.71","104.55","12.53","6394.07","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",5,8,10,"complex","46.94","0.70","106.51","12.67","6393.94","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 36, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",5,9,1,"complex","96.09","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,2,"complex","95.44","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,3,"complex","100.61","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,4,"complex","97.56","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,5,"complex","96.64","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,6,"complex","95.89","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,7,"complex","95.68","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,8,"complex","96.17","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,9,"complex","96.47","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,9,10,"complex","97.48","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,9,1,"complex","45.32","0.59","110.32","11.05","6393.90","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,2,"complex","66.64","0.57","75.03","7.60","6394.15","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,3,"complex","45.34","0.57","110.27","11.23","6394.12","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,4,"complex","45.32","0.58","110.33","11.22","6394.20","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,5,"complex","45.57","0.56","109.73","11.07","6393.96","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,6,"complex","46.55","0.56","107.40","11.01","6393.82","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,7,"complex","45.32","0.57","110.33","11.42","6394.09","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,8,"complex","45.45","0.56","110.00","11.16","6394.05","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,9,"complex","45.42","0.56","110.07","11.11","6393.97","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","steady",5,9,10,"complex","47.55","0.57","105.14","10.63","6394.16","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 269, ""first"": [1, 20]}"
"postgres","optimized","warmup",5,10,1,"very_complex","99.13","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,2,"very_complex","100.50","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,3,"very_complex","97.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,4,"very_complex","96.74","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,5,"very_complex","97.76","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,6,"very_complex","97.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,7,"very_complex","97.11","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,8,"very_complex","98.24","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,9,"very_complex","115.23","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,10,10,"very_complex","98.21","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,10,1,"very_complex","48.01","1.70","104.15","11.83","6394.03","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,2,"very_complex","47.76","1.69","104.68","11.92","6393.71","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,3,"very_complex","66.75","1.66","74.90","8.82","6394.20","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,4,"very_complex","49.03","1.65","101.98","12.05","6394.05","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,5,"very_complex","47.81","1.64","104.58","11.92","6393.88","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,6,"very_complex","50.96","1.64","98.12","11.20","6394.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,7,"very_complex","48.36","1.64","103.38","11.70","6394.17","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,8,"very_complex","47.80","1.64","104.59","11.81","6394.33","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,9,"very_complex","47.89","1.64","104.40","11.86","6393.81","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,10,10,"very_complex","51.08","1.67","97.89","11.14","6393.83","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",5,11,1,"very_complex","106.37","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,2,"very_complex","101.71","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,3,"very_complex","104.39","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,4,"very_complex","98.88","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,5,"very_complex","103.76","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,6,"very_complex","98.50","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,7,"very_complex","103.75","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,8,"very_complex","99.33","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,9,"very_complex","99.00","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,11,10,"very_complex","117.68","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,11,1,"very_complex","53.21","4.31","93.97","11.92","6394.00","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,2,"very_complex","48.66","4.32","102.75","13.10","6393.83","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,3,"very_complex","48.45","4.31","103.19","13.17","6393.83","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,4,"very_complex","54.03","4.31","92.55","11.69","6394.10","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,5,"very_complex","53.18","4.31","94.03","11.90","6394.06","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,6,"very_complex","48.42","4.34","103.26","13.01","6394.04","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,7,"very_complex","48.53","4.31","103.04","13.02","6394.03","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,8,"very_complex","49.26","4.32","101.50","12.99","6393.94","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,9,"very_complex","48.59","4.31","102.90","13.07","6393.94","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",5,11,10,"very_complex","48.45","4.30","103.20","13.13","6394.32","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","warmup",5,12,1,"very_complex","98.25","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,2,"very_complex","100.07","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,3,"very_complex","97.84","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,4,"very_complex","97.39","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,5,"very_complex","100.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,6,"very_complex","100.58","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,7,"very_complex","101.19","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,8,"very_complex","97.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,9,"very_complex","97.66","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,12,10,"very_complex","96.94","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,12,1,"very_complex","47.58","1.69","105.09","11.93","6393.94","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,2,"very_complex","46.58","1.66","107.33","11.99","6394.18","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,3,"very_complex","46.97","1.63","106.45","12.12","6394.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,4,"very_complex","46.15","1.71","108.35","12.42","6393.79","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,5,"very_complex","47.60","1.68","105.05","11.97","6394.05","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,6,"very_complex","46.66","1.69","107.15","12.25","6394.07","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,7,"very_complex","47.14","1.68","106.06","12.12","6394.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,8,"very_complex","46.62","1.64","107.25","12.14","6394.23","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,9,"very_complex","50.62","1.65","98.78","11.12","6393.85","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",5,12,10,"very_complex","49.88","1.73","100.24","11.37","6393.69","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",5,13,1,"create","96.48","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,2,"create","96.46","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,3,"create","95.20","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,4,"create","95.87","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,5,"create","95.56","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,6,"create","95.64","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,7,"create","95.62","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,8,"create","96.07","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,9,"create","94.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,13,10,"create","95.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,13,1,"create","45.89","0.10","108.96","10.32","6393.99","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1512]}"
"postgres","optimized","steady",5,13,2,"create","45.70","0.13","109.40","10.44","6394.00","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1518]}"
"postgres","optimized","steady",5,13,3,"create","46.04","0.12","108.61","10.42","6394.24","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1524]}"
"postgres","optimized","steady",5,13,4,"create","45.16","0.16","110.72","10.65","6394.15","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1530]}"
"postgres","optimized","steady",5,13,5,"create","44.65","0.10","111.98","10.54","6394.03","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1536]}"
"postgres","optimized","steady",5,13,6,"create","45.80","0.10","109.16","10.31","6394.20","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1542]}"
"postgres","optimized","steady",5,13,7,"create","45.11","0.10","110.85","10.62","6394.17","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1548]}"
"postgres","optimized","steady",5,13,8,"create","43.88","0.14","113.95","10.91","6394.30","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1554]}"
"postgres","optimized","steady",5,13,9,"create","45.81","0.10","109.15","10.35","6394.19","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1560]}"
"postgres","optimized","steady",5,13,10,"create","45.72","0.10","109.37","10.44","6394.36","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1566]}"
"postgres","optimized","warmup",5,14,1,"create","95.29","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,2,"create","96.87","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,3,"create","96.67","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,4,"create","96.35","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,5,"create","95.44","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,6,"create","96.02","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,7,"create","95.83","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,8,"create","97.04","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,9,"create","95.15","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,14,10,"create","95.34","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,14,1,"create","45.04","0.10","111.01","10.70","6394.04","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2105]}"
"postgres","optimized","steady",5,14,2,"create","45.73","0.10","109.35","10.52","6394.22","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2111]}"
"postgres","optimized","steady",5,14,3,"create","45.93","0.10","108.87","10.35","6394.20","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2117]}"
"postgres","optimized","steady",5,14,4,"create","45.14","0.12","110.78","10.71","6394.14","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2123]}"
"postgres","optimized","steady",5,14,5,"create","45.15","0.10","110.75","10.65","6394.30","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2129]}"
"postgres","optimized","steady",5,14,6,"create","45.87","0.10","108.99","10.87","6394.34","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2135]}"
"postgres","optimized","steady",5,14,7,"create","46.26","0.10","108.08","10.48","6394.21","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2141]}"
"postgres","optimized","steady",5,14,8,"create","46.36","0.10","107.85","10.30","6394.32","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2147]}"
"postgres","optimized","steady",5,14,9,"create","45.30","0.10","110.37","10.57","6394.19","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2153]}"
"postgres","optimized","steady",5,14,10,"create","45.73","0.13","109.34","10.37","6394.11","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2159]}"
"postgres","optimized","warmup",5,15,1,"create","95.81","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,2,"create","95.59","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,3,"create","97.79","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,4,"create","95.73","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,5,"create","97.33","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,6,"create","95.95","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,7,"create","95.71","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,8,"create","96.13","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,9,"create","96.00","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,15,10,"create","95.35","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,15,1,"create","45.15","0.12","110.75","10.68","6394.31","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1626]}"
"postgres","optimized","steady",5,15,2,"create","45.41","0.12","110.11","10.65","6394.27","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1632]}"
"postgres","optimized","steady",5,15,3,"create","46.12","0.12","108.41","10.51","6393.95","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1638]}"
"postgres","optimized","steady",5,15,4,"create","45.80","0.12","109.17","10.70","6394.40","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1644]}"
"postgres","optimized","steady",5,15,5,"create","46.25","0.11","108.12","10.44","6394.36","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1650]}"
"postgres","optimized","steady",5,15,6,"create","45.37","0.11","110.21","10.58","6394.47","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1656]}"
"postgres","optimized","steady",5,15,7,"create","45.98","0.11","108.74","10.50","6394.29","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1662]}"
"postgres","optimized","steady",5,15,8,"create","45.48","0.13","109.94","10.55","6394.25","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1668]}"
"postgres","optimized","steady",5,15,9,"create","45.31","0.11","110.36","10.69","6394.51","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1674]}"
"postgres","optimized","steady",5,15,10,"create","45.91","0.11","108.92","10.58","6394.25","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1680]}"
"postgres","optimized","warmup",5,16,1,"create","96.16","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,2,"create","96.42","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,3,"create","97.18","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,4,"create","97.52","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,5,"create","96.76","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,6,"create","97.35","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,7,"create","95.83","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,8,"create","96.38","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,9,"create","96.08","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,16,10,"create","95.57","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,16,1,"create","45.18","0.14","110.68","10.78","6394.47","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10456]}"
"postgres","optimized","steady",5,16,2,"create","45.50","0.12","109.89","10.65","6394.52","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10462]}"
"postgres","optimized","steady",5,16,3,"create","46.00","0.12","108.69","10.64","6394.15","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10468]}"
"postgres","optimized","steady",5,16,4,"create","45.47","0.11","109.95","10.65","6394.25","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10474]}"
"postgres","optimized","steady",5,16,5,"create","45.22","0.12","110.57","10.78","6394.33","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10480]}"
"postgres","optimized","steady",5,16,6,"create","45.20","0.12","110.63","10.75","6394.35","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10486]}"
"postgres","optimized","steady",5,16,7,"create","45.83","0.12","109.09","10.54","6394.66","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10492]}"
"postgres","optimized","steady",5,16,8,"create","45.22","0.12","110.57","10.75","6394.53","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10498]}"
"postgres","optimized","steady",5,16,9,"create","45.51","0.12","109.87","10.71","6394.71","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10504]}"
"postgres","optimized","steady",5,16,10,"create","45.58","0.11","109.71","10.92","6394.33","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10510]}"
"postgres","optimized","warmup",5,17,1,"update","95.87","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,2,"update","94.97","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,3,"update","95.35","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,4,"update","95.59","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,5,"update","95.21","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,6,"update","95.16","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,7,"update","95.33","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,8,"update","96.35","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,9,"update","94.55","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,17,10,"update","95.59","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,17,1,"update","46.05","0.08","108.58","10.42","6394.50","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 106]}"
"postgres","optimized","steady",5,17,2,"update","46.32","0.08","107.94","10.44","6394.68","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 111]}"
"postgres","optimized","steady",5,17,3,"update","45.37","0.08","110.21","10.18","6394.26","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 116]}"
"postgres","optimized","steady",5,17,4,"update","44.70","0.08","111.86","10.36","6394.61","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 121]}"
"postgres","optimized","steady",5,17,5,"update","44.98","0.08","111.16","10.22","6394.38","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 126]}"
"postgres","optimized","steady",5,17,6,"update","44.95","0.09","111.24","10.24","6394.49","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 131]}"
"postgres","optimized","steady",5,17,7,"update","44.72","0.08","111.81","10.32","6394.06","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 136]}"
"postgres","optimized","steady",5,17,8,"update","44.70","0.08","111.86","10.36","6394.36","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 141]}"
"postgres","optimized","steady",5,17,9,"update","43.96","0.08","113.75","10.78","6394.54","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 146]}"
"postgres","optimized","steady",5,17,10,"update","46.13","0.08","108.39","10.24","6394.45","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 151]}"
"postgres","optimized","warmup",5,18,1,"update","95.65","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,2,"update","95.92","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,3,"update","95.25","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,4,"update","95.46","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,5,"update","95.39","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,6,"update","117.23","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,7,"update","94.78","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,8,"update","95.23","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,9,"update","96.48","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,18,10,"update","94.69","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,18,1,"update","44.98","0.08","111.15","11.25","6394.35","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,2,"update","44.62","0.07","112.05","10.23","6394.49","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,3,"update","45.06","0.09","110.97","10.39","6394.15","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,4,"update","44.86","0.07","111.47","10.39","6394.47","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,5,"update","45.03","0.08","111.05","10.48","6394.28","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,6,"update","45.61","0.07","109.63","10.17","6394.65","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,7,"update","44.78","0.07","111.65","10.40","6394.38","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,8,"update","44.86","0.07","111.47","10.53","6394.62","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,9,"update","44.86","0.07","111.46","10.46","6394.42","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","steady",5,18,10,"update","45.59","0.07","109.67","10.17","6394.55","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [81, 1]}"
"postgres","optimized","warmup",5,19,1,"update","95.45","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,2,"update","95.08","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,3,"update","95.05","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,4,"update","95.51","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,5,"update","94.84","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,6,"update","95.23","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,7,"update","96.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,8,"update","95.94","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,9,"update","95.11","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,19,10,"update","95.82","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,19,1,"update","44.14","0.11","113.27","10.64","6394.64","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [131, 5]}"
"postgres","optimized","steady",5,19,2,"update","45.60","0.08","109.64","10.11","6394.40","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [136, 5]}"
"postgres","optimized","steady",5,19,3,"update","46.06","0.08","108.55","10.15","6394.75","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [141, 4]}"
"postgres","optimized","steady",5,19,4,"update","44.78","0.09","111.66","10.44","6394.81","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [146, 4]}"
"postgres","optimized","steady",5,19,5,"update","44.77","0.16","111.68","10.31","6394.90","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [151, 5]}"
"postgres","optimized","steady",5,19,6,"update","44.37","0.10","112.68","10.25","6394.72","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [156, 4]}"
"postgres","optimized","steady",5,19,7,"update","45.13","0.09","110.80","10.21","6394.53","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [84, 7]}"
"postgres","optimized","steady",5,19,8,"update","44.87","0.10","111.43","10.37","6394.48","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [89, 8]}"
"postgres","optimized","steady",5,19,9,"update","45.97","0.09","108.76","10.14","6394.40","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [94, 8]}"
"postgres","optimized","steady",5,19,10,"update","44.66","0.13","111.95","10.26","6394.68","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [99, 8]}"
"postgres","optimized","warmup",5,20,1,"update","97.73","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,2,"update","95.88","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,3,"update","95.33","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,4,"update","96.00","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,5,"update","96.13","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,6,"update","95.50","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,7,"update","94.76","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,8,"update","95.51","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,9,"update","95.49","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,20,10,"update","105.13","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,20,1,"update","45.18","0.11","110.66","11.01","6394.43","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [41, ""chartmann@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,2,"update","46.19","0.11","108.24","10.42","6394.89","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [47, ""gschenk@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,3,"update","45.38","0.11","110.18","10.37","6394.93","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [52, ""heydrichmichelle@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,4,"update","46.95","0.10","106.50","10.19","6394.56","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [58, ""annelenegraf@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,5,"update","46.04","0.11","108.60","11.92","6394.83","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [63, ""acaspar@example.net.tmp.tmp""]}"
"postgres","optimized","steady",5,20,6,"update","66.28","0.11","75.44","7.29","6394.68","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [69, ""hildepoelitz@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,7,"update","46.29","0.11","108.00","10.30","6394.69","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [74, ""weinholdmarie-louise@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,8,"update","46.18","0.11","108.27","10.36","6394.64","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [80, ""yjacobi-jaeckel@example.org.tmp.tmp""]}"
"postgres","optimized","steady",5,20,9,"update","46.11","0.11","108.43","10.39","6394.87","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [85, ""dariuszsuessebier@example.com.tmp.tmp""]}"
"postgres","optimized","steady",5,20,10,"update","44.86","0.13","111.46","10.60","6394.88","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [90, ""marek46@example.net.tmp.tmp""]}"
"postgres","optimized","warmup",5,21,1,"delete","95.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,2,"delete","96.24","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,3,"delete","96.20","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,4,"delete","118.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,5,"delete","95.29","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,6,"delete","94.86","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,7,"delete","95.57","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,8,"delete","95.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,9,"delete","95.62","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,21,10,"delete","95.43","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,21,1,"delete","45.31","0.04","110.35","10.26","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,21,2,"delete","44.50","0.04","112.35","10.38","6394.77","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,21,3,"delete","67.94","0.04","73.59","6.92","6394.89","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,21,4,"delete","45.37","0.04","110.19","10.19","6394.77","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,21,5,"delete","44.48","0.04","112.42","10.55","6394.60","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,21,6,"delete","44.63","0.04","112.03","10.40","6394.88","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,21,7,"delete","44.82","0.06","111.56","10.42","6394.65","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,21,8,"delete","44.79","0.04","111.63","10.25","6394.73","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,21,9,"delete","44.75","0.04","111.74","10.33","6394.59","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,21,10,"delete","44.18","0.04","113.18","10.43","6394.67","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,22,1,"delete","96.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,2,"delete","95.42","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,3,"delete","95.35","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,4,"delete","95.51","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,5,"delete","95.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,6,"delete","95.71","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,7,"delete","94.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,8,"delete","95.35","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,9,"delete","95.73","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,22,10,"delete","96.30","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,22,1,"delete","44.78","0.06","111.65","10.36","6394.66","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,22,2,"delete","44.80","0.06","111.60","10.32","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,22,3,"delete","44.86","0.06","111.45","10.47","6394.83","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,22,4,"delete","46.24","0.06","108.13","10.37","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,22,5,"delete","45.96","0.06","108.79","10.29","6394.88","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,22,6,"delete","44.77","0.06","111.67","10.46","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,22,7,"delete","44.93","0.06","111.29","10.35","6394.68","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,22,8,"delete","45.28","0.08","110.43","11.28","6394.61","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,22,9,"delete","44.97","0.05","111.18","10.46","6394.82","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,22,10,"delete","44.64","0.05","112.02","10.50","6394.75","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,23,1,"delete","95.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,2,"delete","95.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,3,"delete","94.90","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,4,"delete","95.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,5,"delete","95.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,6,"delete","95.44","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,7,"delete","95.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,8,"delete","95.49","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,9,"delete","95.67","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,23,10,"delete","94.59","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,23,1,"delete","45.25","0.04","110.49","10.33","6394.94","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,23,2,"delete","44.50","0.04","112.36","10.42","6394.82","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,23,3,"delete","44.50","0.04","112.35","10.37","6394.77","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,23,4,"delete","45.32","0.04","110.32","10.27","6394.79","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,23,5,"delete","45.85","0.04","109.05","10.20","6394.65","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,23,6,"delete","44.91","0.04","111.32","10.40","6394.89","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,23,7,"delete","45.00","0.04","111.12","10.22","6394.81","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,23,8,"delete","66.70","0.04","74.96","6.94","6394.71","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,23,9,"delete","45.44","0.04","110.05","10.23","6394.81","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,23,10,"delete","44.44","0.04","112.51","10.39","6394.91","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",5,24,1,"delete","95.68","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,2,"delete","96.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,3,"delete","95.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,4,"delete","95.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,5,"delete","96.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,6,"delete","97.32","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,7,"delete","98.19","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,8,"delete","96.65","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,9,"delete","97.08","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",5,24,10,"delete","97.31","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",5,24,1,"delete","44.63","0.04","112.03","10.36","6395.16","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [131]}"
"postgres","optimized","steady",5,24,2,"delete","46.13","0.04","108.38","10.03","6394.76","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [136]}"
"postgres","optimized","steady",5,24,3,"delete","45.06","0.04","110.97","10.30","6394.63","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [141]}"
"postgres","optimized","steady",5,24,4,"delete","44.55","0.04","112.23","10.43","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [146]}"
"postgres","optimized","steady",5,24,5,"delete","44.64","0.04","112.00","10.38","6395.02","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [151]}"
"postgres","optimized","steady",5,24,6,"delete","45.65","0.04","109.53","10.21","6394.83","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [156]}"
"postgres","optimized","steady",5,24,7,"delete","45.36","0.04","110.23","10.23","6394.95","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [161]}"
"postgres","optimized","steady",5,24,8,"delete","45.46","0.04","109.98","10.29","6394.60","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [166]}"
"postgres","optimized","steady",5,24,9,"delete","44.85","0.04","111.47","10.27","6395.07","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [171]}"
"postgres","optimized","steady",5,24,10,"delete","45.55","0.05","109.77","10.21","6394.90","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [176]}"
"postgres","optimized","warmup",10,1,1,"simple","201.92","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,2,"simple","219.43","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,3,"simple","195.90","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,4,"simple","213.33","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,5,"simple","233.75","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,6,"simple","206.81","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,7,"simple","197.67","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,8,"simple","212.80","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,9,"simple","199.39","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,1,10,"simple","187.81","nan","nan","nan","nan","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,1,1,"simple","165.22","2.19","60.53","9.54","6394.81","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,2,"simple","167.28","2.22","59.78","9.54","6395.17","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,3,"simple","145.95","2.19","68.52","10.94","6394.51","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,4,"simple","160.92","2.20","62.14","9.73","6394.58","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,5,"simple","177.63","2.22","56.30","8.96","6394.50","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,6,"simple","145.41","2.24","68.77","11.10","6394.73","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,7,"simple","173.74","2.23","57.56","8.95","6394.67","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,8,"simple","160.46","2.23","62.32","10.15","6394.76","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,9,"simple","158.25","2.22","63.19","10.31","6394.88","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,1,10,"simple","154.34","2.23","64.79","10.33","6394.80","443.00","SELECT id, name, price, stock, created_at, updated_at FROM products ORDER BY id LIMIT 10000;","{""rows"": 10000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",10,2,1,"simple","136.84","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,2,"simple","135.51","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,3,"simple","136.28","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,4,"simple","136.35","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,5,"simple","135.23","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,6,"simple","137.69","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,7,"simple","134.37","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,8,"simple","135.93","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,9,"simple","135.44","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,2,10,"simple","135.11","nan","nan","nan","nan","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,2,1,"simple","85.37","0.07","117.13","7.63","6389.85","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,2,"simple","86.63","0.07","115.43","7.40","6389.94","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,3,"simple","85.78","0.07","116.57","7.56","6390.13","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,4,"simple","85.36","0.07","117.15","7.56","6389.90","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,5,"simple","86.86","0.07","115.13","7.31","6389.80","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,6,"simple","85.02","0.08","117.62","7.47","6389.93","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,7,"simple","85.10","0.07","117.52","7.46","6390.08","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,8,"simple","86.22","0.07","115.98","7.45","6390.00","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,9,"simple","85.63","0.07","116.78","7.36","6390.14","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","steady",10,2,10,"simple","84.04","0.07","118.99","7.56","6390.30","443.00","SELECT id, name FROM categories ORDER BY id LIMIT 5000;","{""rows"": 321, ""first"": [1, ""Hi-Fi Speakers""]}"
"postgres","optimized","warmup",10,3,1,"simple","149.42","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,2,"simple","148.52","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,3,"simple","148.33","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,4,"simple","146.00","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,5,"simple","148.54","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,6,"simple","148.44","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,7,"simple","150.46","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,8,"simple","148.78","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,9,"simple","146.94","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,3,10,"simple","149.83","nan","nan","nan","nan","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""note"": ""warmup""}"
"postgres","optimized","steady",10,3,1,"simple","99.19","0.19","100.82","7.55","6390.20","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,2,"simple","96.90","0.19","103.20","7.67","6389.83","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,3,"simple","98.74","0.19","101.28","7.58","6390.04","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,4,"simple","97.00","0.19","103.09","7.72","6389.95","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,5,"simple","111.63","0.19","89.58","6.60","6390.13","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,6,"simple","99.03","0.19","100.97","7.78","6390.10","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,7,"simple","97.89","0.19","102.15","7.66","6390.01","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,8,"simple","98.14","0.20","101.90","7.59","6390.21","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,9,"simple","98.72","0.19","101.30","7.63","6390.23","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","steady",10,3,10,"simple","98.95","0.19","101.06","7.50","6390.13","443.00","SELECT * FROM addresses ORDER BY id LIMIT 1000;","{""rows"": 1000, ""first"": [181, 131, ""Bährgasse 66"", ""Magdeburg"", ""49486"", ""Deutschland"", true]}"
"postgres","optimized","warmup",10,4,1,"medium","151.30","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,2,"medium","154.66","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,3,"medium","149.86","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,4,"medium","161.62","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,5,"medium","152.27","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,6,"medium","152.88","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,7,"medium","149.10","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,8,"medium","154.10","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,9,"medium","154.47","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,4,10,"medium","149.97","nan","nan","nan","nan","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,4,1,"medium","104.56","0.47","95.64","8.18","6390.09","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,2,"medium","104.01","0.47","96.14","8.26","6390.52","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,3,"medium","103.15","0.45","96.95","8.28","6390.26","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,4,"medium","105.31","0.45","94.96","8.35","6390.45","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,5,"medium","119.39","0.45","83.76","7.25","6390.34","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,6,"medium","126.51","0.46","79.04","7.30","6390.50","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,7,"medium","104.91","0.48","95.32","8.19","6390.38","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,8,"medium","102.98","0.47","97.11","8.24","6390.42","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,9,"medium","99.61","0.48","100.39","8.63","6390.36","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","steady",10,4,10,"medium","105.66","0.45","94.65","8.12","6390.47","443.00","         SELECT p.id, p.name, p.price, p.stock, p.created_at, p.updated_at           FROM products p          WHERE EXISTS ( SELECT 1                           FROM product_categories pc                          WHERE pc.product_id = p.id )          ORDER BY p.id          LIMIT 1000;         ","{""rows"": 1000, ""first"": [1, ""Echo Dot (5th generation, 2022 release) | Big vibrant sound Wi-Fi and Bluetooth smart speaker with Alexa | Charcoal"", ""21.99"", 15, ""2024-06-10 03:30:51"", ""2025-02-03 13:44:58""]}"
"postgres","optimized","warmup",10,5,1,"medium","209.19","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,2,"medium","189.88","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,3,"medium","196.32","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,4,"medium","197.35","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,5,"medium","202.30","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,6,"medium","192.07","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,7,"medium","194.60","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,8,"medium","191.81","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,9,"medium","191.16","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,5,10,"medium","190.33","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,5,1,"medium","138.81","16.35","72.04","29.34","6393.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,2,"medium","135.53","16.43","73.78","29.90","6393.14","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,3,"medium","139.37","16.34","71.75","29.96","6393.24","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,4,"medium","143.58","16.36","69.65","28.57","6393.22","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,5,"medium","159.13","15.58","62.84","25.95","6393.48","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,6,"medium","140.85","16.09","71.00","28.78","6393.02","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,7,"medium","139.70","16.35","71.58","29.30","6393.25","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,8,"medium","138.01","16.35","72.46","31.12","6393.29","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,9,"medium","145.59","16.11","68.68","27.96","6393.30","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","steady",10,5,10,"medium","145.14","16.33","68.90","27.92","6393.27","443.00","         SELECT p.id,                p.name,                p.price,                p.stock,                p.created_at,                p.updated_at,                oi.quantity           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id           JOIN products     p  ON p.id        = oi.product_id          ORDER BY o.created_at DESC, o.id DESC, p.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1488876, ""Stylish Simplicity Wedding Dress Sexy Deep V-Neckline Backless Mermaid Stylish Simplicity Wedding Dresses Spaghetti Straps Bridal Dress Romantic Wedding Gowns (Color : Champagne, US Size : 22W), ESB"", ""823.5"", 85, ""2017-07-07 07:40:41"", ""2023-04-09 04:53:05"", 2]}"
"postgres","optimized","warmup",10,6,1,"medium","156.11","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,2,"medium","135.84","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,3,"medium","136.68","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,4,"medium","142.05","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,5,"medium","140.62","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,6,"medium","141.18","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,7,"medium","141.11","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,8,"medium","136.53","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,9,"medium","135.51","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,6,10,"medium","135.84","nan","nan","nan","nan","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,6,1,"medium","85.40","0.05","117.10","7.55","6390.41","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,2,"medium","88.11","0.06","113.49","7.50","6390.01","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,3,"medium","88.04","0.06","113.58","7.60","6389.90","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,4,"medium","85.27","0.06","117.28","7.61","6389.71","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,5,"medium","86.92","0.06","115.05","7.50","6390.27","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,6,"medium","84.59","0.06","118.22","7.84","6390.08","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,7,"medium","85.61","0.06","116.81","7.55","6390.02","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,8,"medium","91.07","0.06","109.81","7.41","6389.96","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,9,"medium","85.77","0.09","116.59","7.65","6390.29","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","steady",10,6,10,"medium","85.49","0.06","116.97","7.56","6390.09","443.00","         SELECT id,                user_id,                product_id,                rating,                created_at           FROM reviews          ORDER BY created_at DESC, id DESC          LIMIT 100;         ","{""rows"": 61, ""first"": [190, 859, 2150968, 2, ""2025-07-10 14:46:22""]}"
"postgres","optimized","warmup",10,7,1,"complex","147.88","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,2,"complex","150.85","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,3,"complex","149.45","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,4,"complex","150.33","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,5,"complex","147.45","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,6,"complex","147.67","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,7,"complex","152.38","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,8,"complex","148.97","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,9,"complex","149.35","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,7,10,"complex","148.07","nan","nan","nan","nan","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,7,1,"complex","99.74","0.81","100.26","8.23","6390.36","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,2,"complex","99.51","0.77","100.50","8.21","6390.50","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,3,"complex","99.77","0.77","100.23","8.32","6390.50","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,4,"complex","97.79","0.77","102.26","8.47","6390.61","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,5,"complex","101.65","0.83","98.38","8.38","6390.46","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,6,"complex","101.94","0.81","98.10","8.05","6390.56","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,7,"complex","106.81","0.81","93.62","7.69","6390.23","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,8,"complex","100.88","0.78","99.12","8.42","6390.43","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,9,"complex","99.68","0.77","100.32","8.33","6390.09","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","steady",10,7,10,"complex","97.81","0.82","102.24","8.50","6390.40","443.00","         SELECT o.id,                o.created_at,                SUM(oi.quantity * oi.price) AS total           FROM orders       o           JOIN order_items  oi ON oi.order_id = o.id          GROUP BY o.id, o.created_at          ORDER BY o.id          LIMIT 500;         ","{""rows"": 500, ""first"": [1, ""2025-05-27 15:28:49"", ""397.52""]}"
"postgres","optimized","warmup",10,8,1,"complex","149.48","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,2,"complex","149.90","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,3,"complex","150.11","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,4,"complex","155.39","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,5,"complex","149.59","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,6,"complex","152.73","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,7,"complex","148.40","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,8,"complex","151.13","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,9,"complex","148.10","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,8,10,"complex","151.05","nan","nan","nan","nan","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,8,1,"complex","105.10","0.33","95.15","8.40","6390.83","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,2,"complex","97.71","0.33","102.35","9.06","6391.05","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,3,"complex","102.53","0.36","97.53","8.79","6391.14","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,4,"complex","101.39","0.34","98.63","8.79","6391.25","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,5,"complex","99.55","0.35","100.46","8.87","6391.01","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,6,"complex","104.38","0.32","95.80","8.43","6391.29","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,7,"complex","101.73","0.33","98.30","8.72","6390.87","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,8,"complex","96.91","0.32","103.19","8.99","6390.81","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,9,"complex","113.63","0.33","88.01","7.69","6391.06","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","steady",10,8,10,"complex","102.41","0.32","97.65","8.72","6390.84","443.00","         SELECT p.id,                p.name,                AVG(r.rating) AS avg_rating           FROM products p           JOIN reviews  r ON r.product_id = p.id          GROUP BY p.id, p.name         HAVING AVG(r.rating) > 4          ORDER BY avg_rating DESC, p.id LIMIT 1000;         ","{""rows"": 11, ""first"": [10085, ""Keneddng Original New PVR-520R with mechanical PVR520R PVR 520R Optical Pickup Laser Head"", ""5.0000000000000000""]}"
"postgres","optimized","warmup",10,9,1,"complex","150.94","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,2,"complex","151.94","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,3,"complex","149.61","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,4,"complex","150.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,5,"complex","157.59","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,6,"complex","147.51","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,7,"complex","148.86","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,8,"complex","148.55","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,9,"complex","150.81","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,9,10,"complex","147.16","nan","nan","nan","nan","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,9,1,"complex","97.07","0.60","103.02","8.24","6390.77","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,2,"complex","99.15","0.60","100.85","8.01","6391.02","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,3,"complex","97.58","0.60","102.48","8.43","6390.98","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,4,"complex","97.44","0.63","102.63","8.50","6391.18","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,5,"complex","98.43","0.63","101.60","8.11","6391.05","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,6,"complex","97.06","0.66","103.03","8.32","6391.23","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,7,"complex","96.61","0.64","103.50","8.47","6391.03","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,8,"complex","101.10","0.61","98.91","7.92","6390.93","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,9,"complex","98.92","0.60","101.09","8.17","6391.07","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","steady",10,9,10,"complex","98.21","0.62","101.82","8.37","6391.35","443.00","         SELECT u.id,                COUNT(*) AS orders_last_30d           FROM users  u           JOIN orders o ON o.user_id = u.id          WHERE o.created_at >= CURRENT_DATE - INTERVAL '30 days'          GROUP BY u.id        HAVING COUNT(*) > 0          ORDER BY u.id          LIMIT 500;         ","{""rows"": 270, ""first"": [1, 20]}"
"postgres","optimized","warmup",10,10,1,"very_complex","153.23","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,2,"very_complex","150.28","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,3,"very_complex","148.56","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,4,"very_complex","149.86","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,5,"very_complex","155.88","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,6,"very_complex","156.90","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,7,"very_complex","159.38","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,8,"very_complex","153.41","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,9,"very_complex","152.29","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,10,10,"very_complex","150.13","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,10,1,"very_complex","103.09","1.93","97.00","9.30","6391.31","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,2,"very_complex","99.22","1.63","100.78","9.42","6392.08","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,3,"very_complex","103.87","1.61","96.28","9.11","6392.29","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,4,"very_complex","100.81","1.65","99.20","9.39","6392.15","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,5,"very_complex","102.83","1.65","97.25","9.12","6392.14","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,6,"very_complex","101.52","1.67","98.50","9.35","6392.34","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,7,"very_complex","98.35","1.64","101.67","9.94","6392.03","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,8,"very_complex","98.87","1.66","101.15","9.63","6392.37","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,9,"very_complex","100.56","1.61","99.45","9.46","6391.96","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,10,10,"very_complex","98.84","1.65","101.17","9.68","6392.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT o.user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id AS rec_id,                COUNT(*)       AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",10,11,1,"very_complex","159.39","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,2,"very_complex","156.16","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,3,"very_complex","155.55","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,4,"very_complex","158.57","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,5,"very_complex","157.71","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,6,"very_complex","154.19","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,7,"very_complex","157.79","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,8,"very_complex","162.58","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,9,"very_complex","162.03","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,11,10,"very_complex","153.45","nan","nan","nan","nan","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,11,1,"very_complex","114.38","4.31","87.43","9.32","6392.10","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,2,"very_complex","108.75","4.33","91.95","9.82","6392.15","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,3,"very_complex","103.32","4.77","96.78","10.36","6391.93","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,4,"very_complex","111.34","4.29","89.82","9.62","6392.00","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,5,"very_complex","107.34","4.31","93.16","9.91","6392.32","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,6,"very_complex","100.98","4.36","99.03","10.65","6392.00","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,7,"very_complex","112.03","4.29","89.26","9.61","6392.14","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,8,"very_complex","100.58","4.30","99.42","10.76","6391.93","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,9,"very_complex","108.52","4.30","92.15","9.83","6392.36","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","steady",10,11,10,"very_complex","102.07","4.39","97.97","10.43","6392.12","443.00","         WITH pairs AS (             SELECT                 LEAST(oi1.product_id, oi2.product_id)      AS prodA,                 GREATEST(oi1.product_id, oi2.product_id)   AS prodB,                 oi1.order_id                               AS order_id             FROM   order_items  oi1             JOIN   order_items  oi2                 ON  oi2.order_id   = oi1.order_id                 AND oi2.product_id > oi1.product_id     -- Duplikate + Selbstpaare raus         )         SELECT  prodA,                 prodB,                 COUNT(DISTINCT order_id) AS co_orders      -- ⇦ jede Bestellung nur 1-mal         FROM    pairs         GROUP  BY prodA, prodB         -- HAVING COUNT(DISTINCT order_id) >= 2          -- (falls Mindest-Support gewünscht)         ORDER BY co_orders DESC, prodA, prodB         LIMIT 100;         ","{""rows"": 100, ""first"": [237, 2139801, 1]}"
"postgres","optimized","warmup",10,12,1,"very_complex","159.22","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,2,"very_complex","155.63","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,3,"very_complex","154.49","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,4,"very_complex","157.61","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,5,"very_complex","155.06","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,6,"very_complex","162.20","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,7,"very_complex","162.11","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,8,"very_complex","154.33","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,9,"very_complex","153.24","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,12,10,"very_complex","154.33","nan","nan","nan","nan","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,12,1,"very_complex","104.94","1.65","95.30","8.99","6392.04","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,2,"very_complex","103.38","1.67","96.74","9.48","6392.13","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,3,"very_complex","101.29","1.64","98.73","9.65","6392.47","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,4,"very_complex","107.05","1.64","93.42","8.70","6392.20","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,5,"very_complex","100.12","1.68","99.88","9.46","6392.15","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,6,"very_complex","101.92","1.64","98.12","9.64","6391.93","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,7,"very_complex","99.01","1.68","101.00","9.64","6392.11","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,8,"very_complex","100.83","1.69","99.18","9.35","6392.00","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,9,"very_complex","119.96","1.68","83.36","7.86","6391.76","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","steady",10,12,10,"very_complex","102.35","1.63","97.71","9.28","6392.16","443.00","         WITH top_prod AS (                 SELECT product_id                   FROM order_items                  GROUP BY product_id                  ORDER BY COUNT(*) DESC, product_id                  LIMIT 1         ),         buyers AS (                 SELECT DISTINCT user_id                   FROM orders       o                   JOIN order_items oi ON oi.order_id = o.id                  WHERE oi.product_id = (SELECT product_id FROM top_prod)         )         SELECT oi2.product_id,                COUNT(*) AS freq           FROM orders       o           JOIN order_items  oi2 ON oi2.order_id = o.id          WHERE o.user_id IN (SELECT user_id FROM buyers)            AND oi2.product_id <> (SELECT product_id FROM top_prod)          GROUP BY oi2.product_id          ORDER BY freq DESC, oi2.product_id          LIMIT 100;         ","{""rows"": 17, ""first"": [36043, 1]}"
"postgres","optimized","warmup",10,13,1,"create","148.17","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,2,"create","150.87","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,3,"create","146.78","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,4,"create","149.45","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,5,"create","148.93","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,6,"create","146.54","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,7,"create","148.50","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,8,"create","150.34","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,9,"create","148.70","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,13,10,"create","148.62","nan","nan","nan","nan","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,13,1,"create","97.09","0.12","103.00","7.70","6392.41","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1672]}"
"postgres","optimized","steady",10,13,2,"create","97.19","0.10","102.89","7.68","6392.31","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1683]}"
"postgres","optimized","steady",10,13,3,"create","99.67","0.15","100.34","7.64","6392.41","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1694]}"
"postgres","optimized","steady",10,13,4,"create","96.10","0.10","104.06","7.65","6392.52","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1705]}"
"postgres","optimized","steady",10,13,5,"create","101.20","0.10","98.82","7.77","6392.03","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1716]}"
"postgres","optimized","steady",10,13,6,"create","100.28","0.11","99.72","7.61","6392.39","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1727]}"
"postgres","optimized","steady",10,13,7,"create","97.66","0.12","102.40","7.59","6392.47","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1738]}"
"postgres","optimized","steady",10,13,8,"create","97.22","0.10","102.86","7.76","6392.40","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1749]}"
"postgres","optimized","steady",10,13,9,"create","99.05","0.10","100.96","7.47","6392.66","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1760]}"
"postgres","optimized","steady",10,13,10,"create","98.47","0.17","101.55","7.59","6392.20","443.00","         INSERT INTO addresses (user_id, street, city, zip, country, is_primary)         VALUES (             (SELECT id FROM users LIMIT 1),             'Foo-' || gen_random_uuid()::text,             'Bar City',             '12345',             'DE',             FALSE         )         RETURNING id AS address_id;         ","{""rows"": 1, ""first"": [1771]}"
"postgres","optimized","warmup",10,14,1,"create","149.82","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,2,"create","147.32","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,3,"create","148.45","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,4,"create","149.99","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,5,"create","162.84","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,6,"create","147.87","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,7,"create","147.36","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,8,"create","147.86","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,9,"create","150.07","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,14,10,"create","150.56","nan","nan","nan","nan","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,14,1,"create","100.19","0.12","99.81","7.56","6392.22","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2265]}"
"postgres","optimized","steady",10,14,2,"create","98.52","0.10","101.51","7.63","6392.44","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2276]}"
"postgres","optimized","steady",10,14,3,"create","97.45","0.10","102.62","7.75","6392.49","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2287]}"
"postgres","optimized","steady",10,14,4,"create","98.95","0.10","101.06","7.67","6392.31","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2298]}"
"postgres","optimized","steady",10,14,5,"create","98.88","0.10","101.13","7.52","6392.53","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2309]}"
"postgres","optimized","steady",10,14,6,"create","96.73","0.10","103.38","8.97","6392.68","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2320]}"
"postgres","optimized","steady",10,14,7,"create","100.41","0.10","99.59","7.53","6392.24","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2331]}"
"postgres","optimized","steady",10,14,8,"create","97.53","0.11","102.53","7.72","6392.68","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2342]}"
"postgres","optimized","steady",10,14,9,"create","98.36","0.15","101.67","7.74","6392.58","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2353]}"
"postgres","optimized","steady",10,14,10,"create","99.27","0.10","100.74","7.66","6392.66","443.00","         INSERT INTO orders (user_id, status, total, created_at)         VALUES (             (SELECT id FROM users LIMIT 1),             'pending',             0.0,             CURRENT_TIMESTAMP         )         RETURNING id AS order_id;         ","{""rows"": 1, ""first"": [2364]}"
"postgres","optimized","warmup",10,15,1,"create","148.13","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,2,"create","147.41","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,3,"create","146.98","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,4,"create","149.11","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,5,"create","159.31","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,6,"create","147.09","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,7,"create","149.39","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,8,"create","147.24","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,9,"create","148.58","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,15,10,"create","149.15","nan","nan","nan","nan","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,15,1,"create","98.83","0.11","101.18","7.67","6392.69","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1786]}"
"postgres","optimized","steady",10,15,2,"create","98.94","0.11","101.07","8.06","6392.53","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1797]}"
"postgres","optimized","steady",10,15,3,"create","97.57","0.11","102.49","7.88","6392.29","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1808]}"
"postgres","optimized","steady",10,15,4,"create","99.51","0.14","100.49","7.90","6392.57","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1819]}"
"postgres","optimized","steady",10,15,5,"create","99.30","0.12","100.70","7.65","6392.54","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1830]}"
"postgres","optimized","steady",10,15,6,"create","98.71","0.11","101.31","7.78","6392.41","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1841]}"
"postgres","optimized","steady",10,15,7,"create","99.95","0.11","100.05","7.62","6392.87","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1852]}"
"postgres","optimized","steady",10,15,8,"create","99.81","0.12","100.19","7.56","6393.00","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1863]}"
"postgres","optimized","steady",10,15,9,"create","114.23","0.11","87.54","6.74","6392.52","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1874]}"
"postgres","optimized","steady",10,15,10,"create","108.08","0.12","92.53","7.10","6392.52","443.00","         INSERT INTO cart_items (user_id, product_id, quantity, added_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             2,             CURRENT_TIMESTAMP         )         RETURNING id AS cart_item_id;         ","{""rows"": 1, ""first"": [1885]}"
"postgres","optimized","warmup",10,16,1,"create","150.37","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,2,"create","151.66","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,3,"create","147.37","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,4,"create","147.78","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,5,"create","146.94","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,6,"create","148.18","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,7,"create","147.26","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,8,"create","148.89","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,9,"create","147.84","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,16,10,"create","148.52","nan","nan","nan","nan","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,16,1,"create","97.75","0.15","102.30","7.91","6392.82","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10616]}"
"postgres","optimized","steady",10,16,2,"create","103.12","0.11","96.97","8.01","6392.87","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10627]}"
"postgres","optimized","steady",10,16,3,"create","100.27","0.11","99.73","7.98","6392.95","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10638]}"
"postgres","optimized","steady",10,16,4,"create","99.33","0.14","100.68","7.69","6392.94","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10649]}"
"postgres","optimized","steady",10,16,5,"create","98.90","0.14","101.11","8.11","6392.88","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10660]}"
"postgres","optimized","steady",10,16,6,"create","97.20","0.12","102.88","7.92","6392.91","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10671]}"
"postgres","optimized","steady",10,16,7,"create","98.98","0.18","101.03","7.81","6393.06","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10682]}"
"postgres","optimized","steady",10,16,8,"create","99.47","0.11","100.53","7.77","6393.20","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10693]}"
"postgres","optimized","steady",10,16,9,"create","99.39","0.12","100.62","7.74","6393.03","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10704]}"
"postgres","optimized","steady",10,16,10,"create","97.63","0.15","102.43","7.87","6393.01","443.00","         INSERT INTO product_views (user_id, product_id, viewed_at)         VALUES (             (SELECT id FROM users    LIMIT 1),             (SELECT id FROM products LIMIT 1),             CURRENT_TIMESTAMP         )         RETURNING id AS product_view_id;         ","{""rows"": 1, ""first"": [10715]}"
"postgres","optimized","warmup",10,17,1,"update","149.68","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,2,"update","147.77","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,3,"update","148.63","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,4,"update","149.52","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,5,"update","147.14","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,6,"update","146.56","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,7,"update","151.63","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,8,"update","147.32","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,9,"update","150.48","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,17,10,"update","146.34","nan","nan","nan","nan","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,17,1,"update","98.55","0.13","101.47","7.29","6392.92","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 256]}"
"postgres","optimized","steady",10,17,2,"update","98.15","0.08","101.88","7.34","6392.86","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 266]}"
"postgres","optimized","steady",10,17,3,"update","96.72","0.11","103.39","7.37","6393.25","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 276]}"
"postgres","optimized","steady",10,17,4,"update","99.05","0.08","100.96","7.38","6393.06","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 286]}"
"postgres","optimized","steady",10,17,5,"update","97.23","0.08","102.85","7.40","6392.96","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 296]}"
"postgres","optimized","steady",10,17,6,"update","97.30","0.08","102.78","7.39","6393.12","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 306]}"
"postgres","optimized","steady",10,17,7,"update","98.15","0.11","101.89","7.28","6392.84","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 316]}"
"postgres","optimized","steady",10,17,8,"update","97.18","0.08","102.90","7.36","6393.13","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 326]}"
"postgres","optimized","steady",10,17,9,"update","98.22","0.08","101.81","7.36","6392.79","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 336]}"
"postgres","optimized","steady",10,17,10,"update","99.44","0.09","100.56","7.15","6392.96","443.00","         UPDATE products         SET stock = stock + 1         WHERE id = (SELECT id FROM products LIMIT 1)         RETURNING id AS product_id, stock AS new_stock;         ","{""rows"": 1, ""first"": [4, 346]}"
"postgres","optimized","warmup",10,18,1,"update","146.46","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,2,"update","148.04","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,3,"update","148.45","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,4,"update","148.99","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,5,"update","148.27","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,6,"update","153.24","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,7,"update","155.73","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,8,"update","151.72","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,9,"update","175.26","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,18,10,"update","151.93","nan","nan","nan","nan","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,18,1,"update","97.59","0.09","102.47","7.36","6393.04","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [239, 1]}"
"postgres","optimized","steady",10,18,2,"update","98.65","0.08","101.37","7.32","6392.88","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [187, 3]}"
"postgres","optimized","steady",10,18,3,"update","98.59","0.08","101.43","7.34","6393.19","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [197, 1]}"
"postgres","optimized","steady",10,18,4,"update","97.02","0.09","103.07","7.45","6393.06","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [207, 1]}"
"postgres","optimized","steady",10,18,5,"update","98.80","0.10","101.21","7.51","6393.25","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [217, 1]}"
"postgres","optimized","steady",10,18,6,"update","97.73","0.07","102.33","7.39","6393.49","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [227, 1]}"
"postgres","optimized","steady",10,18,7,"update","97.10","0.06","102.99","7.40","6393.18","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [229, 1]}"
"postgres","optimized","steady",10,18,8,"update","99.49","0.08","100.51","7.14","6392.93","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [229, 1]}"
"postgres","optimized","steady",10,18,9,"update","96.87","0.08","103.24","7.50","6393.31","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [231, 2]}"
"postgres","optimized","steady",10,18,10,"update","96.86","0.07","103.24","9.25","6395.02","443.00","         UPDATE reviews         SET rating = GREATEST(rating - 1, 1)         WHERE id = (SELECT id FROM reviews LIMIT 1)         RETURNING id AS review_id, rating AS new_rating;         ","{""rows"": 1, ""first"": [241, 3]}"
"postgres","optimized","warmup",10,19,1,"update","148.69","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,2,"update","149.07","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,3,"update","148.24","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,4,"update","146.73","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,5,"update","148.77","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,6,"update","148.02","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,7,"update","147.74","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,8,"update","149.75","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,9,"update","172.12","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,19,10,"update","147.25","nan","nan","nan","nan","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,19,1,"update","99.73","0.11","100.27","7.49","6400.67","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1814, 8]}"
"postgres","optimized","steady",10,19,2,"update","97.19","0.12","102.89","7.37","6401.88","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1841, 8]}"
"postgres","optimized","steady",10,19,3,"update","99.52","0.08","100.49","7.41","6402.54","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1869, 8]}"
"postgres","optimized","steady",10,19,4,"update","98.69","0.08","101.33","7.39","6403.84","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1686, 11]}"
"postgres","optimized","steady",10,19,5,"update","98.34","0.12","101.69","7.52","6404.94","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1724, 11]}"
"postgres","optimized","steady",10,19,6,"update","101.30","0.10","98.72","7.27","6406.22","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1758, 11]}"
"postgres","optimized","steady",10,19,7,"update","96.94","0.08","103.16","7.45","6407.52","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1797, 11]}"
"postgres","optimized","steady",10,19,8,"update","96.81","0.08","103.29","7.55","6407.96","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1828, 11]}"
"postgres","optimized","steady",10,19,9,"update","99.42","0.10","100.58","7.45","6409.20","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1855, 11]}"
"postgres","optimized","steady",10,19,10,"update","96.37","0.08","103.76","7.36","6410.12","443.00","         UPDATE cart_items         SET quantity = quantity + 3         WHERE id = (SELECT id FROM cart_items LIMIT 1)         RETURNING id AS cart_item_id, quantity AS new_quantity;         ","{""rows"": 1, ""first"": [1883, 11]}"
"postgres","optimized","warmup",10,20,1,"update","151.53","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,2,"update","149.44","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,3,"update","146.53","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,4,"update","148.46","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,5,"update","150.20","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,6,"update","148.01","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,7,"update","147.20","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,8,"update","146.84","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,9,"update","148.19","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,20,10,"update","148.94","nan","nan","nan","nan","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,20,1,"update","100.92","0.14","99.09","7.90","6415.90","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [112, ""schoenlandwiebke@example.com.tmp""]}"
"postgres","optimized","steady",10,20,2,"update","97.37","0.11","102.70","7.80","6416.93","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [122, ""leszek60@example.org.tmp""]}"
"postgres","optimized","steady",10,20,3,"update","101.35","0.12","98.67","7.59","6418.44","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [132, ""tmetz@example.org.tmp""]}"
"postgres","optimized","steady",10,20,4,"update","100.13","0.14","99.87","8.93","6419.37","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [142, ""thedagierschner@example.com.tmp""]}"
"postgres","optimized","steady",10,20,5,"update","97.03","0.11","103.06","7.80","6420.90","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp""]}"
"postgres","optimized","steady",10,20,6,"update","97.75","0.14","102.30","7.74","6421.63","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp""]}"
"postgres","optimized","steady",10,20,7,"update","102.03","0.14","98.01","7.50","6423.27","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp""]}"
"postgres","optimized","steady",10,20,8,"update","99.45","0.13","100.55","7.69","6424.27","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp""]}"
"postgres","optimized","steady",10,20,9,"update","99.09","0.14","100.92","7.74","6424.89","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp""]}"
"postgres","optimized","steady",10,20,10,"update","97.78","0.13","102.27","7.66","6426.38","443.00","         UPDATE users         SET email = email || '.tmp'         WHERE id = (SELECT id FROM users LIMIT 1)         RETURNING id AS user_id, email AS new_email;         ","{""rows"": 1, ""first"": [152, ""nadinefinke@example.com.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp.tmp""]}"
"postgres","optimized","warmup",10,21,1,"delete","148.34","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,2,"delete","147.26","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,3,"delete","148.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,4,"delete","146.97","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,5,"delete","151.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,6,"delete","147.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,7,"delete","147.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,8,"delete","147.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,9,"delete","147.50","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,21,10,"delete","147.21","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,21,1,"delete","96.16","0.04","103.99","7.46","6431.84","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,21,2,"delete","98.31","0.04","101.72","7.42","6432.90","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,21,3,"delete","97.02","0.04","103.07","7.53","6434.30","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,21,4,"delete","97.59","0.06","102.47","7.46","6435.15","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,21,5,"delete","99.94","0.04","100.06","7.29","6436.12","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,21,6,"delete","96.18","0.05","103.97","7.56","6437.12","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,21,7,"delete","97.06","0.04","103.03","7.44","6438.73","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,21,8,"delete","98.71","0.04","101.30","7.27","6439.65","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,21,9,"delete","97.75","0.04","102.30","7.58","6440.12","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,21,10,"delete","96.90","0.04","103.20","7.65","6441.21","443.00","         WITH victim AS (             SELECT id             FROM   addresses             ORDER  BY id             LIMIT  1         )         DELETE FROM addresses a         USING victim         WHERE a.id = victim.id         RETURNING a.id AS deleted_address_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,22,1,"delete","150.77","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,2,"delete","150.13","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,3,"delete","148.11","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,4,"delete","146.39","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,5,"delete","148.22","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,6,"delete","149.16","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,7,"delete","146.89","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,8,"delete","136.63","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,9,"delete","136.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,22,10,"delete","139.52","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,22,1,"delete","86.15","0.04","116.07","7.80","6444.76","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,2,"delete","85.52","0.04","116.93","7.69","6445.70","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,3,"delete","86.84","0.04","115.15","7.64","6446.84","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,4,"delete","89.03","0.04","112.32","7.73","6447.74","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,5,"delete","85.49","0.04","116.98","7.79","6448.77","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,6,"delete","86.87","0.04","115.12","7.72","6449.93","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,7,"delete","85.02","0.04","117.63","7.83","6451.09","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,8,"delete","85.57","0.04","116.87","7.95","6451.58","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,9,"delete","88.35","0.04","113.18","7.56","6452.86","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","steady",10,22,10,"delete","99.37","0.04","100.63","6.69","6454.28","443.00","         WITH victim AS (             SELECT id             FROM   reviews             ORDER  BY id             LIMIT  1         )         DELETE FROM reviews r         USING victim         WHERE r.id = victim.id         RETURNING r.id AS deleted_review_id;         ","{""rows"": 0, ""first"": null}"
"postgres","optimized","warmup",10,23,1,"delete","146.45","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,2,"delete","147.69","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,3,"delete","146.98","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,4,"delete","149.43","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,5,"delete","146.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,6,"delete","146.93","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,7,"delete","149.00","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,8,"delete","147.46","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,9,"delete","146.54","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,23,10,"delete","148.01","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,23,1,"delete","97.95","0.04","102.09","7.45","6459.97","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,23,2,"delete","95.11","0.04","105.14","7.85","6460.62","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,23,3,"delete","97.48","0.04","102.58","7.52","6462.18","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,23,4,"delete","98.13","0.04","101.91","7.38","6463.03","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,23,5,"delete","98.32","0.04","101.70","7.56","6463.81","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,23,6,"delete","96.94","0.04","103.16","7.59","6465.17","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,23,7,"delete","98.16","0.07","101.88","7.50","6466.20","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,23,8,"delete","96.77","0.04","103.34","7.55","6467.16","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,23,9,"delete","115.73","0.04","86.41","6.30","6468.27","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,23,10,"delete","98.94","0.07","101.07","7.30","6469.79","443.00","         WITH victim AS (             SELECT id             FROM   cart_items             ORDER  BY id             LIMIT  1         )         DELETE FROM cart_items c         USING victim         WHERE c.id = victim.id         RETURNING c.id AS deleted_cart_item_id;         ","{""rows"": 1, ""first"": [371]}"
"postgres","optimized","warmup",10,24,1,"delete","149.09","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,2,"delete","147.27","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,3,"delete","147.37","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,4,"delete","147.76","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,5,"delete","147.47","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,6,"delete","154.66","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,7,"delete","153.02","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,8,"delete","152.78","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,9,"delete","153.82","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","warmup",10,24,10,"delete","163.35","nan","nan","nan","nan","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""note"": ""warmup""}"
"postgres","optimized","steady",10,24,1,"delete","97.62","0.04","102.43","7.65","6475.17","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [281]}"
"postgres","optimized","steady",10,24,2,"delete","98.77","0.04","101.24","7.43","6476.22","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [291]}"
"postgres","optimized","steady",10,24,3,"delete","98.47","0.04","101.55","7.91","6477.12","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [301]}"
"postgres","optimized","steady",10,24,4,"delete","96.61","0.04","103.51","7.53","6477.52","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [311]}"
"postgres","optimized","steady",10,24,5,"delete","97.94","0.04","102.10","7.45","6479.01","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [321]}"
"postgres","optimized","steady",10,24,6,"delete","97.60","0.04","102.46","7.65","6480.03","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [331]}"
"postgres","optimized","steady",10,24,7,"delete","96.53","0.04","103.60","7.60","6481.16","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [341]}"
"postgres","optimized","steady",10,24,8,"delete","97.40","0.04","102.67","7.57","6482.33","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [351]}"
"postgres","optimized","steady",10,24,9,"delete","97.95","0.05","102.09","7.37","6483.80","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [361]}"
"postgres","optimized","steady",10,24,10,"delete","97.30","0.04","102.78","7.59","6484.51","443.00","         WITH victim AS (             SELECT id             FROM   product_purchases             ORDER  BY id             LIMIT  1         )         DELETE FROM product_purchases pp         USING victim         WHERE pp.id = victim.id         RETURNING pp.id AS deleted_purchase_id;         ","{""rows"": 1, ""first"": [371]}"
