-- Setup: PostgreSQL Optimiert (Baseline + gezielte Index-Optimierungen)

CREATE TABLE "users" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name"       VARCHAR,
  "email"      VARCHAR UNIQUE,
  "created_at" TIMESTAMP
);

CREATE INDEX idx_users_email  ON users(email);
-- Partial-Index: nur auf die letzten 90 Tage, beschleunigt "aktive User"-Queries

CREATE INDEX idx_users_recent ON users(created_at)
  WHERE created_at > DATE '2025-01-01' - INTERVAL '90 days';

CREATE TABLE "addresses" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"    INT,
  "street"     VARCHAR,
  "city"       VARCHAR,
  "zip"        VARCHAR,
  "country"    VARCHAR,
  "is_primary" BOOLEAN
);

CREATE INDEX idx_addresses_user_id      ON addresses(user_id);
-- Composite-Index für typische Lookups nach User + primäre Adresse
CREATE INDEX idx_addresses_user_primary ON addresses(user_id, is_primary);

CREATE TABLE "products" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name"        VARCHAR,
  "description" TEXT,
  "price"       DECIMAL CHECK (price >= 0),
  "stock"       INT CHECK (stock >= 0),
  "created_at"  TIMESTAMP,
  "updated_at"  TIMESTAMP
);

CREATE INDEX idx_products_name ON products(name);

CREATE TABLE "categories" (
  "id"   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR
);

CREATE TABLE "product_categories" (
  "product_id"  INT,
  "category_id" INT,
  PRIMARY KEY ("product_id", "category_id")
);

CREATE INDEX idx_product_categories_product  ON product_categories(product_id);
CREATE INDEX idx_product_categories_category ON product_categories(category_id);

CREATE TABLE "orders" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"    INT,
  "status"     VARCHAR,
  "total"      DECIMAL,
  "created_at" TIMESTAMP,
  "updated_at" TIMESTAMP
);

CREATE INDEX idx_orders_user_id        ON orders(user_id);
-- Composite-Index für Join + Zeit-Filter
CREATE INDEX idx_orders_user_date      ON orders(user_id, created_at);
-- Partial-Index für aktive Bestellungen
CREATE INDEX idx_orders_active         ON orders(user_id, status)
  WHERE status IN ('pending','processing','shipped');

CREATE TABLE "order_items" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"   INT,
  "product_id" INT,
  "quantity"   INT CHECK (quantity > 0),
  "price"      DECIMAL CHECK (price >= 0)
);

CREATE INDEX idx_order_items_order_id        ON order_items(order_id);
CREATE INDEX idx_order_items_product_id      ON order_items(product_id);
-- Composite-Index für häufige Joins Order→Item→Product
CREATE INDEX idx_order_items_order_product  ON order_items(order_id, product_id);

CREATE TABLE "payments" (
  "id"             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"       INT,
  "payment_method" VARCHAR,
  "payment_status" VARCHAR,
  "paid_at"        TIMESTAMP
);

CREATE INDEX idx_payments_order_id    ON payments(order_id);
-- Partial-Index für ausstehende Zahlungen
CREATE INDEX idx_payments_pending     ON payments(order_id, payment_status)
  WHERE payment_status = 'pending';

CREATE TABLE "reviews" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "rating"      INT CHECK (rating >= 1 AND rating <= 5),
  "comment"     TEXT,
  "created_at"  TIMESTAMP
);

CREATE INDEX idx_reviews_user_id      ON reviews(user_id);
CREATE INDEX idx_reviews_product_id   ON reviews(product_id);
-- Composite-Index für Produkt- und Nutzer-Abfragen
CREATE INDEX idx_reviews_prod_user     ON reviews(product_id, user_id);
-- Partial-Index für hoch bewertete Produkte
CREATE INDEX idx_reviews_high_rating   ON reviews(product_id, rating)
  WHERE rating >= 4;

CREATE TABLE "cart_items" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "quantity"    INT,
  "added_at"    TIMESTAMP
);

CREATE INDEX idx_cart_items_user_id      ON cart_items(user_id);
CREATE INDEX idx_cart_items_product_id   ON cart_items(product_id);
-- Composite-Index für User+Produkt-Lookup
CREATE INDEX idx_cart_items_user_product ON cart_items(user_id, product_id);

CREATE TABLE "shipments" (
  "id"             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"       INT,
  "tracking_number" VARCHAR,
  "shipped_at"      TIMESTAMP,
  "delivered_at"    TIMESTAMP,
  "carrier"         VARCHAR
);

CREATE INDEX idx_shipments_order_id   ON shipments(order_id);
-- Partial-Index für ungelieferte Sendungen
CREATE INDEX idx_shipments_undelivered ON shipments(order_id)
  WHERE delivered_at IS NULL;

CREATE TABLE "wishlists" (
  "user_id"    INT,
  "product_id" INT,
  "created_at" TIMESTAMP,
  PRIMARY KEY ("user_id", "product_id")
);

CREATE INDEX idx_wishlists_user_id     ON wishlists(user_id);
CREATE INDEX idx_wishlists_product_id  ON wishlists(product_id);

CREATE TABLE "product_views" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "viewed_at"   TIMESTAMP
);

CREATE INDEX idx_product_views_user_id           ON product_views(user_id);
CREATE INDEX idx_product_views_product_id        ON product_views(product_id);
-- Composite-Index für User+Produkt+Datum-Abfragen
CREATE INDEX idx_product_views_user_prod_date    ON product_views(user_id, product_id, viewed_at);

CREATE TABLE "product_purchases" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "purchased_at" TIMESTAMP
);

CREATE INDEX idx_product_purchases_user_id       ON product_purchases(user_id);
CREATE INDEX idx_product_purchases_product_id    ON product_purchases(product_id);
-- Composite-Index für User+Produkt-Joins
CREATE INDEX idx_product_purchases_user_product ON product_purchases(user_id, product_id);

-- Foreign Keys
ALTER TABLE "addresses"         ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_categories" ADD FOREIGN KEY ("product_id")    REFERENCES "products" ("id");
ALTER TABLE "product_categories" ADD FOREIGN KEY ("category_id")  REFERENCES "categories" ("id");
ALTER TABLE "orders"            ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "order_items"       ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "order_items"       ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "payments"          ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "reviews"           ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "reviews"           ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "cart_items"        ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "cart_items"        ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "shipments"         ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "wishlists"         ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "wishlists"         ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "product_views"     ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_views"     ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "product_purchases" ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_purchases" ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");

-- Ende Setup
