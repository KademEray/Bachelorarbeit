-- Setup: PostgreSQL Optimiert (Baseline + gezielte Index-Optimierungen)

-- Tabelle für Nutzer
CREATE TABLE "users" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Automatisch inkrementierende ID
  "name"       VARCHAR,                                            -- Nutzername
  "email"      VARCHAR UNIQUE,                                     -- Eindeutige E-Mail-Adresse
  "created_at" TIMESTAMP                                           -- Zeitpunkt der Registrierung
);

-- Index auf E-Mail zur schnellen Suche
CREATE INDEX idx_users_email  ON users(email);

-- Partial-Index auf neue Nutzer (letzte 90 Tage) für aktive User-Analysen
CREATE INDEX idx_users_recent ON users(created_at)
  WHERE created_at > DATE '2025-01-01' - INTERVAL '90 days';

-- Adressen von Nutzern
CREATE TABLE "addresses" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"    INT,                        -- Verweis auf Nutzer
  "street"     VARCHAR,
  "city"       VARCHAR,
  "zip"        VARCHAR,
  "country"    VARCHAR,
  "is_primary" BOOLEAN                     -- Hauptadresse ja/nein
);

-- Indexe für typische Suchen nach Nutzer-ID und Hauptadresse
CREATE INDEX idx_addresses_user_id      ON addresses(user_id);
CREATE INDEX idx_addresses_user_primary ON addresses(user_id, is_primary);

-- Produkte im Shop
CREATE TABLE "products" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name"        VARCHAR,
  "description" TEXT,
  "price"       DECIMAL CHECK (price >= 0),  -- Kein negativer Preis erlaubt
  "stock"       INT CHECK (stock >= 0),      -- Kein negativer Lagerbestand erlaubt
  "created_at"  TIMESTAMP,
  "updated_at"  TIMESTAMP
);

-- Index auf Produktnamen für Textsuche
CREATE INDEX idx_products_name ON products(name);

-- Produkt-Kategorien
CREATE TABLE "categories" (
  "id"   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR
);

-- Zuordnung Produkt → Kategorie (n:m)
CREATE TABLE "product_categories" (
  "product_id"  INT,
  "category_id" INT,
  PRIMARY KEY ("product_id", "category_id")
);

-- Indexe zur schnelleren Navigation der Verknüpfungen
CREATE INDEX idx_product_categories_product  ON product_categories(product_id);
CREATE INDEX idx_product_categories_category ON product_categories(category_id);

-- Bestellungen
CREATE TABLE "orders" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"    INT,
  "status"     VARCHAR,               -- z. B. 'pending', 'shipped'
  "total"      DECIMAL,
  "created_at" TIMESTAMP,
  "updated_at" TIMESTAMP
);

-- Indexe zur Optimierung von Join- und Zeitabfragen
CREATE INDEX idx_orders_user_id    ON orders(user_id);
CREATE INDEX idx_orders_user_date  ON orders(user_id, created_at);
CREATE INDEX idx_orders_active     ON orders(user_id, status)
  WHERE status IN ('pending','processing','shipped');

-- Einzelne Artikel in Bestellungen
CREATE TABLE "order_items" (
  "id"         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"   INT,
  "product_id" INT,
  "quantity"   INT CHECK (quantity > 0),
  "price"      DECIMAL CHECK (price >= 0)
);

-- Indexe zur Beschleunigung von Joins und Produktanalysen
CREATE INDEX idx_order_items_order_id       ON order_items(order_id);
CREATE INDEX idx_order_items_product_id     ON order_items(product_id);
CREATE INDEX idx_order_items_order_product  ON order_items(order_id, product_id);

-- Zahlungen
CREATE TABLE "payments" (
  "id"             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"       INT,
  "payment_method" VARCHAR,
  "payment_status" VARCHAR,
  "paid_at"        TIMESTAMP
);

-- Indexe für Zahlungssuche und offene Transaktionen
CREATE INDEX idx_payments_order_id   ON payments(order_id);
CREATE INDEX idx_payments_pending    ON payments(order_id, payment_status)
  WHERE payment_status = 'pending';

-- Produktbewertungen
CREATE TABLE "reviews" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "rating"      INT CHECK (rating >= 1 AND rating <= 5),
  "comment"     TEXT,
  "created_at"  TIMESTAMP
);

-- Indexe zur Filterung nach Nutzern und Produkten
CREATE INDEX idx_reviews_user_id     ON reviews(user_id);
CREATE INDEX idx_reviews_product_id  ON reviews(product_id);
CREATE INDEX idx_reviews_prod_user   ON reviews(product_id, user_id);
CREATE INDEX idx_reviews_high_rating ON reviews(product_id, rating)
  WHERE rating >= 4;

-- Warenkorb-Einträge
CREATE TABLE "cart_items" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "quantity"    INT,
  "added_at"    TIMESTAMP
);

CREATE INDEX idx_cart_items_user_id      ON cart_items(user_id);
CREATE INDEX idx_cart_items_product_id   ON cart_items(product_id);
CREATE INDEX idx_cart_items_user_product ON cart_items(user_id, product_id);

-- Versandinformationen
CREATE TABLE "shipments" (
  "id"              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "order_id"        INT,
  "tracking_number" VARCHAR,
  "shipped_at"      TIMESTAMP,
  "delivered_at"    TIMESTAMP,
  "carrier"         VARCHAR
);

-- Indexe zur Sendungsverfolgung
CREATE INDEX idx_shipments_order_id     ON shipments(order_id);
CREATE INDEX idx_shipments_undelivered  ON shipments(order_id)
  WHERE delivered_at IS NULL;

-- Wunschlisten
CREATE TABLE "wishlists" (
  "user_id"    INT,
  "product_id" INT,
  "created_at" TIMESTAMP,
  PRIMARY KEY ("user_id", "product_id")
);

CREATE INDEX idx_wishlists_user_id    ON wishlists(user_id);
CREATE INDEX idx_wishlists_product_id ON wishlists(product_id);

-- Produktansichten (für Analytics)
CREATE TABLE "product_views" (
  "id"          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"     INT,
  "product_id"  INT,
  "viewed_at"   TIMESTAMP
);

CREATE INDEX idx_product_views_user_id          ON product_views(user_id);
CREATE INDEX idx_product_views_product_id       ON product_views(product_id);
CREATE INDEX idx_product_views_user_prod_date   ON product_views(user_id, product_id, viewed_at);

-- Gekaufte Produkte
CREATE TABLE "product_purchases" (
  "id"           INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id"      INT,
  "product_id"   INT,
  "purchased_at" TIMESTAMP
);

CREATE INDEX idx_product_purchases_user_id        ON product_purchases(user_id);
CREATE INDEX idx_product_purchases_product_id     ON product_purchases(product_id);
CREATE INDEX idx_product_purchases_user_product   ON product_purchases(user_id, product_id);

-- Fremdschlüssel-Beziehungen (Referentielle Integrität)
ALTER TABLE "addresses"          ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_categories" ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "product_categories" ADD FOREIGN KEY ("category_id")    REFERENCES "categories" ("id");
ALTER TABLE "orders"             ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "order_items"        ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "order_items"        ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "payments"           ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "reviews"            ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "reviews"            ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "cart_items"         ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "cart_items"         ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "shipments"          ADD FOREIGN KEY ("order_id")       REFERENCES "orders" ("id");
ALTER TABLE "wishlists"          ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "wishlists"          ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "product_views"      ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_views"      ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");
ALTER TABLE "product_purchases"  ADD FOREIGN KEY ("user_id")        REFERENCES "users" ("id");
ALTER TABLE "product_purchases"  ADD FOREIGN KEY ("product_id")     REFERENCES "products" ("id");

-- Erweiterungen & Zusatzoptimierungen

-- Erweiterung: Extensions für bessere Indexierung und Textsuche
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- Erweiterung: Textsuche für Produktsuche & E-Mails beschleunigen
CREATE INDEX idx_products_name_trgm ON products USING gin (name gin_trgm_ops);
CREATE INDEX idx_users_email_trgm   ON users USING gin (email gin_trgm_ops);

-- Erweiterung: BRIN-Index für große Zeitreihen (schneller für Scans)
CREATE INDEX brin_product_views_viewed_at
  ON product_views USING brin (viewed_at);
CREATE INDEX brin_product_purchases_purchased_at
  ON product_purchases USING brin (purchased_at);
CREATE INDEX brin_orders_created_at
  ON orders USING brin (created_at);

-- Erweiterung: Covering Indexes (Index-Only Scans bei häufigen Joins)
CREATE INDEX idx_order_items_order_product_cover ON order_items(order_id, product_id) INCLUDE(quantity, price);
CREATE INDEX idx_reviews_product_user_cover      ON reviews(product_id, user_id) INCLUDE(rating, created_at);
CREATE INDEX idx_cart_items_user_product_cover   ON cart_items(user_id, product_id) INCLUDE(quantity, added_at);

-- Ende Setup
